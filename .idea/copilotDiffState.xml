<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/grails-app/controllers/mz/maleyanga/simulador/Item.groovy">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/grails-app/controllers/mz/maleyanga/simulador/Item.groovy" />
              <option name="originalContent" value="package mz.maleyanga.simulador&#10;&#10;/**&#10; * Created by Claudino on 11/8/2017.&#10; */&#10;class Item {&#10;&#10;    String meses&#10;    String saldoDevedor&#10;    String prestacoes&#10;    String amortizacao&#10;    String juros&#10;&#10;&#10;&#10;&#10;}&#10;" />
              <option name="updatedContent" value="package mz.maleyanga.simulador&#13;&#10;&#13;&#10;/**&#13;&#10; * Created by Claudino on 11/8/2017.&#13;&#10; */&#13;&#10;class Item {&#13;&#10;&#13;&#10;    String meses&#13;&#10;    BigDecimal saldoDevedor&#13;&#10;    BigDecimal prestacoes&#13;&#10;    BigDecimal amortizacao&#13;&#10;    BigDecimal juros&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/grails-app/services/mz/maleyanga/PagamentoService.groovy">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/grails-app/services/mz/maleyanga/PagamentoService.groovy" />
              <option name="originalContent" value="package mz.maleyanga&#10;&#10;&#10;import mz.maleyanga.credito.Credito&#10;import mz.maleyanga.documento.Nota&#10;import mz.maleyanga.feriado.Feriado&#10;import mz.maleyanga.pagamento.Pagamento&#10;import mz.maleyanga.pagamento.Parcela&#10;import mz.maleyanga.pagamento.Remissao&#10;import mz.maleyanga.settings.DefinicaoDeCredito&#10;import mz.maleyanga.settings.Settings&#10;import org.springframework.transaction.annotation.Transactional&#10;import org.zkoss.zul.ListModelList&#10;&#10;import java.math.RoundingMode&#10;import java.sql.SQLDataException&#10;&#10;&#10;/**&#10; * PagamentoService&#10; * A service class encapsulates the core business logic of a Grails application&#10; */&#10;@Transactional&#10;class PagamentoService {&#10;&#10;    Credito credito&#10;    boolean reterCapital&#10;    ContadorService contadorService&#10;    SimuladorService simuladorService&#10;    Pagamento pagamentoInstance&#10;    Parcela parcelaInstance&#10;    def contaService&#10;    def settingsService&#10;&#10;&#10;    def criarPagamentos(Credito creditoInstance, DefinicaoDeCredito definicaoDeCredito) {&#10;        def pagamentos = new ArrayList&lt;Pagamento&gt;()&#10;        Integer dias = 0&#10;        Calendar c = Calendar.getInstance()&#10;        def valorDaPrestacao = 0.0&#10;        def feriados = Feriado.all&#10;&#10;&#10;        def r = creditoInstance.percentualDejuros / 100&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#10;            valorDaPrestacao = pmt(r, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0, 0)&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#10;            valorDaPrestacao = taxafixa(r, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0, 0)&#10;        }&#10;        c.setTime(creditoInstance.dateConcecao)&#10;&#10;        1.upto(creditoInstance.numeroDePrestacoes) {&#10;            //  System.println('antes do incremento' + c.getTime())&#10;            if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;                c.add(Calendar.MONTH, 1)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;                c.add(Calendar.DATE, 15)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;                c.add(Calendar.DATE, 7)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;                c.add(Calendar.DATE, 1)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;                c.add(Calendar.DATE, 2)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;variavel&quot;) {&#10;                int variavel = definicaoDeCredito.periodoVariavel as int&#10;                creditoInstance.periodoVariavel = variavel as Integer&#10;                c.add(Calendar.DATE, variavel)&#10;            }&#10;            //   System.println('depois do incremento' + c.getTime())&#10;            def pagamento = new Pagamento()&#10;            def num = creditoInstance.numeroDePrestacoes&#10;            pagamento.recorenciaDeMoras = definicaoDeCredito.recorenciaDeMoras&#10;            pagamento.setCredito(creditoInstance)&#10;            int dayOfWeek = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOfWeek == 7) {&#10;                if (definicaoDeCredito.excluirSabados) {&#10;                    pagamento.descricao += &quot;Sabado!&quot;&#10;                    //  System.println('sabado' + c.getTime())&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;            }&#10;            int dayOfWee = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOfWee == 1) {&#10;                if (definicaoDeCredito.excluirDomingos) {&#10;                    pagamento.descricao += &quot;Domingo&quot;&#10;                    dias = dias + 1&#10;                    //  System.println('domingo' + c.getTime())&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;&#10;&#10;            }&#10;&#10;            for (Iterator&lt;Feriado&gt; i = feriados.iterator(); i.hasNext();) {&#10;                Feriado feriado = i.next()&#10;                if (Objects.equals(c.getTime().format(&quot;dd/MM/yyyy&quot;), feriado.data.format(&quot;dd/MM/yyyy&quot;))) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    int sabado = c.get(Calendar.DAY_OF_WEEK)&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; sabado == 7) {&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    }&#10;                    int domingo = c.get(Calendar.DAY_OF_WEEK)&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; domingo == 1) {&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    }&#10;&#10;                }&#10;            }&#10;            int dayOf = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOf == 7) {&#10;                if (definicaoDeCredito.excluirSabados) {&#10;                    pagamento.descricao += &quot;Sabado!&quot;&#10;                    //  System.println('sabado' + c.getTime())&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;            }&#10;            int dayO = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayO == 1) {&#10;                if (definicaoDeCredito.excluirDomingos) {&#10;                    pagamento.descricao += &quot;Domingo&quot;&#10;                    dias = dias + 1&#10;                    // System.println('domingo' + c.getTime())&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;&#10;&#10;            }&#10;&#10;            pagamento.setDataPrevistoDePagamento(c.getTime())&#10;            pagamento.setValorDaPrestacao(valorDaPrestacao)&#10;&#10;            pagamento.setDescricao(&quot;${it}º- Prestação&quot;)&#10;            def numeroDoCredito = creditoInstance.numeroDoCredito.split('/')&#10;            pagamento.setNumeroDePagamento(numeroDoCredito[0] + numeroDoCredito[1] + it.toString())&#10;            if (num.equals(it)) {&#10;                if (creditoInstance.reterCapital) {&#10;                    //   System.println(&quot;reterCapital&quot;)&#10;                    pagamento.setValorDaPrestacao(valorDaPrestacao + creditoInstance.valorCreditado)&#10;                }&#10;&#10;&#10;            }&#10;            pagamentos.add(pagamento)&#10;            // pagamento.save flush:true&#10;&#10;        }&#10;&#10;        for (Pagamento p in pagamentos) {&#10;            Calendar cs = Calendar.getInstance()&#10;            Calendar cd = Calendar.getInstance()&#10;            cs.setTime(p.dataPrevistoDePagamento)&#10;            int sabado = cs.get(Calendar.DAY_OF_WEEK)&#10;            if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; sabado == 7) {&#10;                cs.add(Calendar.DAY_OF_MONTH, 1)&#10;                p.dataPrevistoDePagamento = cs.getTime()&#10;            }&#10;            cd.setTime(p.dataPrevistoDePagamento)&#10;            int domingo = cd.get(Calendar.DAY_OF_WEEK)&#10;            if (definicaoDeCredito.excluirDiaDePagNoDomingo &amp;&amp; domingo == 1) {&#10;                cd.add(Calendar.DAY_OF_MONTH, 1)&#10;                p.dataPrevistoDePagamento = cd.getTime()&#10;            }&#10;        }&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#10;            ArrayList its = simuladorService.gerarExtrato(creditoInstance, valorDaPrestacao)&#10;&#10;            for (int x = 1; x &lt; its.size(); x++) {&#10;&#10;                pagamentos[x - 1].saldoDevedor = its[x].saldoDevedor.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;                pagamentos[x - 1].valorDeJuros = its[x].juros.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;                pagamentos[x - 1].valorDeAmortizacao = its[x].amortizacao.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;                pagamentos[x - 1].save(failOnError: true, flush: true)&#10;&#10;            }&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#10;            BigDecimal amortizacao = creditoInstance.valorCreditado / creditoInstance.numeroDePrestacoes&#10;            BigDecimal valorDeJuros = (creditoInstance.valorCreditado * creditoInstance.percentualDejuros / 100) / creditoInstance.numeroDePrestacoes&#10;            BigDecimal base = creditoInstance.valorCreditado&#10;            BigDecimal v_amortizacao = 0&#10;            for (Pagamento pagamento in pagamentos) {&#10;                v_amortizacao += amortizacao&#10;                //  System.println(base)&#10;                pagamento.valorDeAmortizacao = amortizacao&#10;                pagamento.valorDeJuros = valorDeJuros&#10;                pagamento.saldoDevedor = base - v_amortizacao&#10;                pagamento.save(failOnError: true, flush: true)&#10;&#10;            }&#10;&#10;        }&#10;&#10;&#10;&#10;&#10;&#10;    }&#10;&#10;    def actualizarEstadoDeCredito(Credito creditoInstance) {&#10;        def pagamentosNaoPagos = creditoInstance.pagamentos.findAll { !it.pago }&#10;        if (pagamentosNaoPagos.empty) {&#10;            creditoInstance.emDivida = false&#10;            creditoInstance.estado = &quot;Fechado&quot;&#10;        }&#10;        for (Pagamento p in pagamentosNaoPagos) {&#10;            if (p.diasDeMora &gt; 0) {&#10;                p.credito.estado = &quot;Pendente&quot;&#10;            } else p.credito.estado = &quot;EmProgresso&quot;&#10;        }&#10;        if (!creditoInstance.emDivida) {&#10;            creditoInstance.estado = &quot;Fechado&quot;&#10;        }&#10;&#10;&#10;        creditoInstance.merge(flush: true)&#10;    }&#10;&#10;    def eliminarPagamentos(Credito creditoInstance) {&#10;        for (Pagamento p in creditoInstance.pagamentos) {&#10;            creditoInstance.pagamentos.remove(p)&#10;            p.delete(flush: true)&#10;        }&#10;        creditoInstance&#10;    }&#10;&#10;    def eliminarCapitalizacoes(Credito creditoInstance) {&#10;        try {&#10;            def pagamentos = Pagamento.findAllByDescricaoAndCredito(&quot;CAPITALIZACAO&quot;, creditoInstance)&#10;            for (Pagamento pagamento in pagamentos) {&#10;                pagamento.credito = null&#10;                for (Nota nota in pagamento.notas) {&#10;                    nota.pagamento = null&#10;                    nota.merge(flush: true)&#10;                }&#10;                for (Parcela parcela in pagamento.parcelas) {&#10;                    parcela.pagamento = null&#10;                    parcela.merge(flush: true)&#10;                }&#10;                for (Remissao remissao in pagamento.remissoes) {&#10;                    remissao.pagamento = null&#10;                    remissao.merge(flush: true)&#10;                }&#10;                pagamento.parcelas = null&#10;                pagamento.remissoes = null&#10;                pagamento.notas = null&#10;                pagamento.merge(flush: true)&#10;                pagamento.delete(flush: true)&#10;                return true&#10;            }&#10;        } catch (SQLDataException e) {&#10;            System.println(e.toString())&#10;            return false&#10;        }&#10;&#10;&#10;    }&#10;&#10;    def calcularMoras(Pagamento pagamentoInstance) {&#10;        /*   if (pagamentoInstance?.credito == null) {&#10;               return&#10;           }&#10;           System.println(&quot;calcularMoras.pagamentoInstance&quot; + pagamentoInstance?.descricao)&#10;           def agora = new Date()&#10;           def dias = 0&#10;           int periodo = 0&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;mensal&quot;) {&#10;               dias = 15&#10;               periodo = 31&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;quinzenal&quot;) {&#10;               dias = 7&#10;               periodo = 15&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;semanal&quot;) {&#10;               dias = 3&#10;               periodo = 7&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;diario&quot;) {&#10;               dias = 1&#10;               periodo = 2&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;doisdias&quot;) {&#10;               dias = 1&#10;               periodo = 3&#10;           }&#10;           if (!pagamentoInstance.pago) {&#10;               if (pagamentoInstance.parcelas.empty) {&#10;&#10;                   dias += agora - pagamentoInstance.dataPrevistoDePagamento&#10;                   if (dias &lt; 0) {&#10;                       dias = 0&#10;                   }&#10;                   if (dias &gt; 0) {&#10;                       def moras = dias / periodo&#10;                       if (moras.setScale(0, RoundingMode.HALF_DOWN).toInteger() &gt;= 1) {&#10;                           moras = 1&#10;                       }&#10;                       pagamentoInstance.diasDeMora = moras&#10;                   } else {&#10;                       pagamentoInstance.diasDeMora = 0&#10;                   }&#10;                   pagamentoInstance.save()&#10;               } else {&#10;                   dias += agora - pagamentoInstance.dataPrevistoDePagamento&#10;                   System.println(&quot;dias de mora com uma parte paga&quot; + dias)&#10;                   if (dias &gt; 0) {&#10;                       def moras = dias / periodo&#10;                       if (moras.setScale(0, RoundingMode.HALF_DOWN).toInteger() &gt;= 1) {&#10;                           moras = 1&#10;                       }&#10;                       pagamentoInstance.diasDeMora = moras&#10;                       pagamentoInstance.credito.estado = &quot;Pendente&quot;&#10;                       pagamentoInstance.credito.save()&#10;                       pagamentoInstance.save()&#10;                   } else {&#10;                       pagamentoInstance.diasDeMora = 0&#10;                   }&#10;&#10;&#10;               }&#10;&#10;           }&#10;&#10;           pagamentoInstance.merge()&#10;           verificarPagamentos(pagamentoInstance.credito)*/&#10;        if (!pagamentoInstance.parcelas.empty) {&#10;            pagamentoInstance.parcelas.sort { it.dataDePagamento }&#10;            BigDecimal vp = 0.0&#10;            BigDecimal vem = 0.0&#10;&#10;&#10;            for (Parcela parcela in pagamentoInstance.parcelas) {&#10;                vp += parcela.valorParcial&#10;                vem += parcela.vdjdm&#10;                if (vp + vem &gt;= pagamentoInstance.valorDaPrestacao * (-1)) {&#10;                    pagamentoInstance.diasDeMora = parcela.dem&#10;&#10;                }&#10;&#10;            }&#10;        } else {&#10;            Date date = new Date()&#10;            if (date.after(pagamentoInstance.dataPrevistoDePagamento)) {&#10;                pagamentoInstance.diasDeMora = date - pagamentoInstance.dataPrevistoDePagamento&#10;                if (pagamentoInstance.recorenciaDeMoras &gt; pagamentoInstance.diasDeMora) {&#10;                    pagamentoInstance.diasDeMora = pagamentoInstance.recorenciaDeMoras&#10;                }&#10;            } else {&#10;                pagamentoInstance.diasDeMora = 0&#10;            }&#10;        }&#10;        try {&#10;            pagamentoInstance.merge(flush: true)&#10;        } catch (SQLDataException e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;    }&#10;&#10;    def calcularMoraCaPital(Credito creditoInstance) {&#10;        try {&#10;&#10;            def agora = new Date()&#10;            def dias = 0&#10;            int periodo = 30&#10;&#10;            if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;                dias = 15&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;                dias = 15&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;                dias = 23&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;                dias = 29&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;                dias = 28&#10;&#10;            }&#10;            //  System.println(&quot;calcularMoraCaPital&quot; + &quot; time==&quot; + agora + &quot; Dias==&quot; + dias)&#10;&#10;            List&lt;Pagamento&gt; pagamentos = new ArrayList&lt;Pagamento&gt;(Pagamento.findAllByCredito(creditoInstance))&#10;            pagamentos.sort { it.id }&#10;            Calendar c = Calendar.getInstance()&#10;            c.setTime(pagamentos.last().dataPrevistoDePagamento)&#10;            c.add(Calendar.DAY_OF_MONTH, 1)&#10;            c.add(Calendar.MONTH, 1)&#10;            creditoInstance.validade = c.getTime()&#10;            dias += agora - c.getTime()&#10;            if (dias &lt; 0) {&#10;                dias = 0&#10;            }&#10;                if (dias &gt; 0) {&#10;                    def moras = dias / periodo&#10;&#10;                    //  System.println(&quot;moras==&quot; + moras)&#10;                    creditoInstance.setMoras(moras.setScale(0, RoundingMode.HALF_DOWN).toInteger())&#10;                    if (creditoInstance.moras &gt; 0) {&#10;                        for (int m = 1; m &lt; creditoInstance.moras; m++) {&#10;                            String numro = creditoInstance.id + &quot;-&quot; + m + 1&#10;                            Pagamento pgmt = Pagamento.findByNumeroDePagamento(numro)&#10;                            if (pgmt == null) {&#10;                                Pagamento paga = new Pagamento()&#10;                                Calendar cal = Calendar.getInstance()&#10;                                cal.setTime(creditoInstance.validade)&#10;                                cal.add(Calendar.MONTH, 1)&#10;                                paga.dataPrevistoDePagamento = cal.getTime()&#10;                                cal.setTime(paga.dataPrevistoDePagamento)&#10;                                Calendar call = Calendar.getInstance()&#10;                                call.setTime(creditoInstance.validade)&#10;                                call.add(Calendar.MONTH, m)&#10;                                //  System.println(call.getTime())&#10;                                paga.dataDaCriacao = call.getTime()&#10;                                BigDecimal divida = getSaldo(pagamentos, creditoInstance, paga.dataDaCriacao)&#10;                                def pdjdd = creditoInstance.percentualJurosDeDemora&#10;                                if (settingsService.settings.pdjda == &quot;pdj&quot;) {&#10;                                    pdjdd = creditoInstance.percentualDejuros&#10;                                }&#10;                                if (settingsService.settings.pdjda == &quot;pdjdm&quot;) {&#10;                                    pdjdd = creditoInstance.percentualJurosDeDemora&#10;                                }&#10;&#10;                                def valorDeMoras = divida * pdjdd / 100&#10;                                paga.valorDaPrestacao = valorDeMoras&#10;                                paga.numeroDePagamento = numro&#10;                                paga.pago = false&#10;                                paga.descricao = &quot;CAPITALIZACAO&quot;&#10;                                paga.credito = creditoInstance&#10;                                if (paga.valorDaPrestacao &lt; 0) {&#10;                                    paga.save(flush: true)&#10;                                } else {&#10;                                    System.println(&quot;paga.valorDaPrestacao==&quot; + paga.valorDaPrestacao)&#10;                                }&#10;                                pagamentos.clear()&#10;                                pagamentos = Pagamento.findAllByCredito(creditoInstance)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                } else {&#10;                    creditoInstance.moras = 0&#10;                }&#10;&#10;            creditoInstance.merge(failOnError: true)&#10;&#10;            //  pagamentoInstance.merge(flush: true)&#10;&#10;            verificarPagamentos(creditoInstance)&#10;        } catch (Exception e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;    }&#10;&#10;    BigDecimal getSaldo(List&lt;Pagamento&gt; pagamentos, Credito creditoInstance, Date data) {&#10;&#10;        List&lt;ExtratoDeCredito&gt; extratoDeCreditos = new ArrayList&lt;ExtratoDeCredito&gt;()&#10;        List&lt;ExtratoDeCredito&gt; extratos = new ArrayList&lt;ExtratoDeCredito&gt;()&#10;&#10;        BigDecimal juros = 0.0&#10;        for (Pagamento pagamento1 in pagamentos.sort { it.id }) {&#10;&#10;            juros += pagamento1.valorDeJuros&#10;        }&#10;        BigDecimal saldo = creditoInstance.valorCreditado + juros&#10;        ExtratoDeCredito extrato = new ExtratoDeCredito()&#10;        extrato.debito = saldo&#10;        extrato.credito = 0.0&#10;        extrato.descricao = &quot;EMPRESTIMO C/ JUROS&quot;&#10;        extrato.jurosDeMora = 0.0&#10;        extrato.juros = 0.0&#10;        extrato.data = creditoInstance.dateConcecao&#10;        extrato.saldo = 0.0&#10;        extratoDeCreditos.add(extrato)&#10;&#10;&#10;        for (Pagamento pagamento in pagamentos.sort { it.id }) {&#10;&#10;            for (Parcela parcela in pagamento?.parcelas?.sort { it.id }) {&#10;                if (parcela.valorPago &gt; 0.0) {&#10;                    ExtratoDeCredito extratoDeCredito = new ExtratoDeCredito()&#10;                    extratoDeCredito.data = parcela.dataDePagamento&#10;                    extratoDeCredito.descricao = parcela.descricao&#10;                    extratoDeCredito.debito = 0.0&#10;                    extratoDeCredito.credito = parcela.valorPago * (-1)&#10;                    extratoDeCredito.jurosDeMora = 0.0&#10;                    extratoDeCredito.saldo = 0.0&#10;                    extratoDeCreditos.add(extratoDeCredito)&#10;&#10;                }&#10;&#10;            }&#10;            if (pagamento.valorDeJurosDeDemora * (-1) &gt; 0.0) {&#10;                Calendar c = Calendar.getInstance()&#10;                c.setTime(pagamento.dataPrevistoDePagamento)&#10;                c.add(Calendar.DAY_OF_MONTH, 1)&#10;                ExtratoDeCredito extratoDeCredito = new ExtratoDeCredito()&#10;                extratoDeCredito.data = c.getTime()&#10;                extratoDeCredito.descricao = &quot;JUROS DE MORA da &quot; + pagamento.descricao&#10;                extratoDeCredito.debito = 0.0&#10;                extratoDeCredito.credito = 0.0&#10;                extratoDeCredito.jurosDeMora = pagamento.valorDeJurosDeDemora * (-1)&#10;                extratoDeCredito.saldo = 0.0&#10;                extratoDeCreditos.add(extratoDeCredito)&#10;            }&#10;            if (pagamento.descricao == &quot;CAPITALIZACAO&quot;) {&#10;&#10;                ExtratoDeCredito extratoDeCredito = new ExtratoDeCredito()&#10;                extratoDeCredito.data = pagamento.dataDaCriacao&#10;                extratoDeCredito.descricao = pagamento.descricao&#10;                extratoDeCredito.debito = 0.0&#10;                extratoDeCredito.credito = 0.0&#10;                extratoDeCredito.jurosDeMora = pagamento.valorDaPrestacao * (-1)&#10;                extratoDeCredito.saldo = 0.0&#10;                extratoDeCreditos.add(extratoDeCredito)&#10;            }&#10;&#10;        }&#10;        extratoDeCreditos.each {&#10;            if (it.data &lt; data) {&#10;                extratos.add(it)&#10;            }&#10;        }&#10;        extratos.sort { it.data }&#10;&#10;        BigDecimal sal = 0.0&#10;        for (ExtratoDeCredito extratoDeCredito in extratos) {&#10;&#10;            sal += extratoDeCredito.credito&#10;            sal += extratoDeCredito.debito&#10;            sal += extratoDeCredito.jurosDeMora&#10;            extratoDeCredito.saldo = sal&#10;&#10;        }&#10;&#10;        return extratos.last().saldo * (-1)&#10;    }&#10;    def calcularMoras(Pagamento pagamentoInstance, Parcela parcela) {&#10;        try {&#10;            def agora = parcela.dataDePagamento&#10;            def dias = 0&#10;&#10;            if (!pagamentoInstance.pago) {&#10;                if (pagamentoInstance.parcelas.empty) {&#10;&#10;                    dias += agora - pagamentoInstance.dataPrevistoDePagamento&#10;                    if (dias &lt; 0) {&#10;                        dias = 0&#10;                    }&#10;&#10;                    if (dias &gt; 0) {&#10;&#10;                        if (pagamentoInstance.recorenciaDeMoras &gt; dias) {&#10;                            dias = pagamentoInstance.recorenciaDeMoras&#10;                        }&#10;                        pagamentoInstance.diasDeMora = dias&#10;&#10;&#10;                    } else {&#10;                        pagamentoInstance.diasDeMora = 0&#10;                    }&#10;&#10;                } else {&#10;&#10;                    dias = pagamentoInstance.parcelas.sort { it.dataDePagamento }.last().dataDePagamento - pagamentoInstance.dataPrevistoDePagamento&#10;                    if (dias &gt; 0) {&#10;                        if (pagamentoInstance.recorenciaDeMoras &gt; dias) {&#10;                            pagamentoInstance.diasDeMora = dias&#10;                        }&#10;                        pagamentoInstance.credito.estado = &quot;Pendente&quot;&#10;&#10;                    } else {&#10;                        pagamentoInstance.diasDeMora = 0&#10;                    }&#10;&#10;&#10;                }&#10;&#10;            }&#10;        } catch (Exception e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;&#10;    }&#10;&#10;    def calcularJurosDeDemora(Parcela parcelaInstance) {&#10;        int periodo = 0&#10;        def dias = 0&#10;        if (pagamentoInstance.credito.periodicidade == &quot;mensal&quot;) {&#10;            dias = 15&#10;            periodo = 30&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;quinzenal&quot;) {&#10;            dias = 7&#10;            periodo = 15&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;semanal&quot;) {&#10;            dias = 3&#10;            periodo = 7&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;diario&quot;) {&#10;            periodo = 1&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;doisdias&quot;) {&#10;            dias = 1&#10;            periodo = 2&#10;        }&#10;&#10;&#10;        dias += parcelaInstance.dataDePagamento - parcelaInstance.pagamento.dataPrevistoDePagamento&#10;        //  System.println(&quot;dias de demora =&quot; + dias)&#10;        if (dias &gt; 0) {&#10;&#10;            //  System.println(dias + &quot; &gt; 0&quot;)&#10;            def moras = dias / periodo&#10;            if (moras.setScale(0, RoundingMode.HALF_DOWN).toInteger() &gt;= 1) {&#10;                moras = 1&#10;            }&#10;            pagamentoInstance.diasDeMora = moras&#10;            parcelaInstance.pagamento.credito.estado = &quot;Pendente&quot;&#10;            parcelaInstance.pagamento.credito.save(flush: true)&#10;            pagamentoInstance.save(flush: true)&#10;        } else {&#10;            parcelaInstance.pagamento.diasDeMora = 0&#10;            parcelaInstance.pagamento.valorDeJurosDeDemora = 0&#10;        }&#10;        parcelaInstance.pagamento.save(flush: true)&#10;&#10;    }&#10;&#10;&#10;    def verificarPagamentos(Credito creditoInstance) {&#10;        try {&#10;            def allNaoPago = creditoInstance.pagamentos.findAll { !it.pago }&#10;&#10;            if (allNaoPago.empty) {&#10;                creditoInstance.estado = &quot;Fechado&quot;&#10;                creditoInstance.emDivida = false&#10;                creditoInstance.merge(flush: true)&#10;            } else {&#10;                for (Pagamento p in allNaoPago) {&#10;                    if (p.diasDeMora &gt; 0) {&#10;                        creditoInstance.estado = &quot;Pendente&quot;&#10;                        creditoInstance.merge(flush: true)&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;&#10;    }&#10;&#10;&#10;    /* def calcularPagamentosVencidos() {&#10;&#10;         def pagamentos = Pagamento.findAllByPago(false)&#10;         DateFormat dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;)&#10;         Calendar c = Calendar.getInstance()&#10;         //c.add(Calendar.DATE, 30)&#10;         System.println(c.getTime())&#10;&#10;         for (Pagamento p : pagamentos) {&#10;             System.println(c.getTime())&#10;             if (!p.dataPrevistoDePagamento.equals(null)) {&#10;                 c.setTime(p.dataPrevistoDePagamento as Date)&#10;                 c.add(Calendar.DATE, 30)&#10;                 Date date = new Date()&#10;                 if (date &lt; c.getTime()) {&#10;                     String descricao = p.descricao&#10;                     BigDecimal valorDaPrestcao = p.valorDaPrestacao&#10;                     p.setDescricao(descricao + &quot;+1J&quot;)&#10;                     p.setDataPrevistoDePagamento(c.getTime() as Date)&#10;                     p.valorDaPrestacao += p.valorDaPrestacao * p.credito.percentualDejuros / 100&#10;                     p.credito.estado = &quot;Pendente&quot;&#10;                     p.credito.save()&#10;                     p.save flush: true&#10;&#10;&#10;                 }&#10;&#10;             }&#10;&#10;&#10;         }&#10;     }*/&#10;&#10;&#10;&#10;    BigDecimal pmt(double r, int nper, BigDecimal pv, BigDecimal fv, int type) {&#10;        BigDecimal pmt = r / (Math.pow(1 + r, nper) - 1) * -(pv * Math.pow(1 + r, nper) + fv)&#10;&#10;        return pmt&#10;    }&#10;&#10;    double taxafixa(double r, int nper, BigDecimal pv, BigDecimal fv, int type) {&#10;        BigDecimal juros = pv * r&#10;        BigDecimal total = pv + juros&#10;        double taxafixa = total / nper&#10;        return taxafixa * (-1)&#10;    }&#10;&#10;    List simuladorDeCredito(Credito creditoInstance) {&#10;        def pagamentos = new ArrayList&lt;Pagamento&gt;()&#10;        Integer dias = 0&#10;        Calendar c = Calendar.getInstance()&#10;        BigDecimal valorDaPrestacao = 0.0&#10;        int periodo = 0&#10;        if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;            periodo = 30&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;            periodo = 15&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;            periodo = 7&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;            periodo = 1&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;            periodo = 2&#10;        }&#10;&#10;        def r = creditoInstance.percentualDejuros / 100&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#10;            // double pmt(double r, int nper, BigDecimal pv, BigDecimal fv, int type)&#10;            valorDaPrestacao = pmt(r, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0.0, 0)&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#10;            valorDaPrestacao = taxafixa(r, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0.0, 0)&#10;        }&#10;&#10;&#10;        1.upto(creditoInstance.numeroDePrestacoes) {&#10;            def pagamento = new Pagamento()&#10;            def num = creditoInstance.numeroDePrestacoes&#10;            pagamento.setCredito(creditoInstance)&#10;            pagamento.setValorDaPrestacao(valorDaPrestacao)&#10;            pagamentos.add(pagamento)&#10;        }&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#10;            ArrayList its = simuladorService.gerarExtrato(creditoInstance, valorDaPrestacao)&#10;&#10;            for (int x = 1; x &lt; its.size(); x++) {&#10;&#10;                pagamentos[x - 1].saldoDevedor = its[x].saldoDevedor.toBigDecimal()&#10;                pagamentos[x - 1].valorDeJuros = its[x].juros.toBigDecimal()&#10;                pagamentos[x - 1].valorDeAmortizacao = its[x].amortizacao.toBigDecimal()&#10;&#10;&#10;            }&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#10;            BigDecimal amortizacao = creditoInstance.valorCreditado / creditoInstance.numeroDePrestacoes&#10;            BigDecimal valorDeJuros = (creditoInstance.valorCreditado * creditoInstance.percentualDejuros / 100) / creditoInstance.numeroDePrestacoes&#10;            BigDecimal base = creditoInstance.valorCreditado&#10;            BigDecimal v_amortizacao = 0&#10;&#10;            for (Pagamento pagamento in pagamentos) {&#10;                v_amortizacao += amortizacao&#10;                //  System.println(base)&#10;                pagamento.valorDeAmortizacao = amortizacao&#10;                pagamento.valorDeJuros = valorDeJuros&#10;                pagamento.saldoDevedor = base - v_amortizacao&#10;&#10;            }&#10;&#10;        }&#10;        // System.println(pagamentos)&#10;        return pagamentos&#10;    }&#10;&#10;    def merge(Pagamento pagamento) {&#10;        try {&#10;            pagamento.merge(flush: true)&#10;            return true&#10;        } catch (SQLDataException e) {&#10;            System.println(e.toString())&#10;            return false&#10;        }&#10;    }&#10;&#10;    List&lt;Pagamento&gt; getByCredito(Credito credito1) {&#10;        return Pagamento.findAllByCredito(credito1)&#10;    }&#10;&#10;    List&lt;Pagamento&gt; findAllByDataPrevistoDePagamento(Date dia) {&#10;        List&lt;Pagamento&gt; pgmts&#10;        if (pgmts == null) {&#10;            pgmts = new ListModelList&lt;&gt;()&#10;        }&#10;        def pagamentos = findAllByDate(dia)&#10;        for (Iterator&lt;Pagamento&gt; i = pagamentos.iterator(); i.hasNext();) {&#10;            Pagamento p = i.next()&#10;            if (Objects.equals(p.dataPrevistoDePagamento.format(&quot;dd/MM/yyyy&quot;), dia.format(&quot;dd/MM/yyyy&quot;))) {&#10;                if (p.valorDaPrestacao &lt; 0 &amp;&amp; p.totalEmDivida &lt; 0) {&#10;                    pgmts.add(p)&#10;                }&#10;&#10;&#10;            }&#10;        }&#10;        return pgmts&#10;    }&#10;&#10;    List&lt;Pagamento&gt; findAll() {&#10;        return Pagamento.all&#10;    }&#10;&#10;    List&lt;Pagamento&gt; findAllByDate(Date date) {&#10;        Calendar c = Calendar.getInstance()&#10;        c.setTime(date)&#10;        c.add(Calendar.DAY_OF_MONTH, -1)&#10;        def startDate = c.getTime()&#10;        c.add(Calendar.DAY_OF_MONTH, 2)&#10;        def endDate = c.getTime()&#10;&#10;        def pgmts = Pagamento.findAllByDataPrevistoDePagamentoBetween(startDate, endDate)&#10;        return pgmts&#10;    }&#10;&#10;    def udateDatas(Credito creditoInstance) {&#10;        int x = 0&#10;        def pagamentos = Pagamento.findAllByCredito(creditoInstance)&#10;        pagamentos.sort { it.id }&#10;        Calendar c = Calendar.getInstance()&#10;        c.setTime(creditoInstance.dateConcecao)&#10;        def definicaoDeCredito = DefinicaoDeCredito.findAllByAtivoAndPeriodicidadeAndFormaDeCalculo(true, creditoInstance.periodicidade, creditoInstance.formaDeCalculo)&#10;        1.upto(creditoInstance.numeroDePrestacoes) {&#10;&#10;&#10;            if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;                c.add(Calendar.MONTH, 1)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;                c.add(Calendar.DATE, 15)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;                c.add(Calendar.DATE, 7)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;                c.add(Calendar.DATE, 1)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;                c.add(Calendar.DATE, 2)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;variavel&quot;) {&#10;                int variavel = definicaoDeCredito.periodoVariavel as int&#10;                creditoInstance.periodoVariavel = variavel as Integer&#10;                c.add(Calendar.DATE, variavel)&#10;            }&#10;            //   System.println('depois do incremento' + c.getTime())&#10;&#10;            int dayOfWeek = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOfWeek == 7) {&#10;                if (definicaoDeCredito.excluirSabados) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;            }&#10;            int dayOfWee = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOfWee == 1) {&#10;                if (definicaoDeCredito.excluirDomingos) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;&#10;&#10;            }&#10;            def feriados = Feriado.all&#10;            for (Iterator&lt;Feriado&gt; i = feriados.iterator(); i.hasNext();) {&#10;                Feriado feriado = i.next()&#10;                if (Objects.equals(c.getTime().format(&quot;dd/MM/yyyy&quot;), feriado.data.format(&quot;dd/MM/yyyy&quot;))) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    int sabado = c.get(Calendar.DAY_OF_WEEK)&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; sabado == 7) {&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    }&#10;                    int domingo = c.get(Calendar.DAY_OF_WEEK)&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; domingo == 1) {&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    }&#10;&#10;                }&#10;            }&#10;            int dayOf = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOf == 7) {&#10;                if (definicaoDeCredito.excluirSabados) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;            }&#10;            int dayO = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayO == 1) {&#10;                if (definicaoDeCredito.excluirDomingos) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;&#10;&#10;            }&#10;&#10;            pagamentos[x].setDataPrevistoDePagamento(c.getTime())&#10;            pagamentos[x].merge(flush: true)&#10;            x++&#10;&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package mz.maleyanga&#13;&#10;&#13;&#10;&#13;&#10;import mz.maleyanga.credito.Credito&#13;&#10;import mz.maleyanga.documento.Nota&#13;&#10;import mz.maleyanga.feriado.Feriado&#13;&#10;import mz.maleyanga.pagamento.Pagamento&#13;&#10;import mz.maleyanga.pagamento.Parcela&#13;&#10;import mz.maleyanga.pagamento.Remissao&#13;&#10;import mz.maleyanga.settings.DefinicaoDeCredito&#13;&#10;import mz.maleyanga.settings.Settings&#13;&#10;import org.springframework.transaction.annotation.Transactional&#13;&#10;import org.zkoss.zul.ListModelList&#13;&#10;&#13;&#10;import java.math.RoundingMode&#13;&#10;import java.sql.SQLDataException&#13;&#10;&#13;&#10;&#13;&#10;/**&#13;&#10; * PagamentoService&#13;&#10; * A service class encapsulates the core business logic of a Grails application&#13;&#10; */&#13;&#10;@Transactional&#13;&#10;class PagamentoService {&#13;&#10;&#13;&#10;    Credito credito&#13;&#10;    boolean reterCapital&#13;&#10;    ContadorService contadorService&#13;&#10;    SimuladorService simuladorService&#13;&#10;    Pagamento pagamentoInstance&#13;&#10;    Parcela parcelaInstance&#13;&#10;    def contaService&#13;&#10;    def settingsService&#13;&#10;&#13;&#10;&#13;&#10;    def criarPagamentos(Credito creditoInstance, DefinicaoDeCredito definicaoDeCredito) {&#13;&#10;        def pagamentos = new ArrayList&lt;Pagamento&gt;()&#13;&#10;        Integer dias = 0&#13;&#10;        Calendar c = Calendar.getInstance()&#13;&#10;        def valorDaPrestacao = 0.0&#13;&#10;        def feriados = Feriado.all&#13;&#10;&#13;&#10;&#13;&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#13;&#10;            def annualRate = creditoInstance.percentualDejuros / 100.0&#13;&#10;            def periodicRate = 0.0&#13;&#10;            def divisor = 1.0&#13;&#10;&#13;&#10;            if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#13;&#10;                divisor = 12.0&#13;&#10;            } else if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#13;&#10;                divisor = 24.0&#13;&#10;            } else if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#13;&#10;                divisor = 52.0&#13;&#10;            } else if (creditoInstance.periodicidade == &quot;diario&quot;) {&#13;&#10;                divisor = 365.0&#13;&#10;            } else if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#13;&#10;                divisor = 365.0 / 2.0&#13;&#10;            } else if (creditoInstance.periodicidade == &quot;variavel&quot;) {&#13;&#10;                if (creditoInstance.periodoVariavel &gt; 0) {&#13;&#10;                    divisor = 365.0 / creditoInstance.periodoVariavel&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;            if (divisor &gt; 0) {&#13;&#10;                periodicRate = annualRate / divisor&#13;&#10;            }&#13;&#10;            valorDaPrestacao = pmt(periodicRate, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0, 0)&#13;&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#13;&#10;            def r = creditoInstance.percentualDejuros / 100&#13;&#10;            valorDaPrestacao = taxafixa(r, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0, 0)&#13;&#10;        }&#13;&#10;        c.setTime(creditoInstance.dateConcecao)&#13;&#10;&#13;&#10;        1.upto(creditoInstance.numeroDePrestacoes) {&#13;&#10;            //  System.println('antes do incremento' + c.getTime())&#13;&#10;            if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#13;&#10;                c.add(Calendar.MONTH, 1)&#13;&#10;            }&#13;&#10;            if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#13;&#10;                c.add(Calendar.DATE, 15)&#13;&#10;            }&#13;&#10;            if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#13;&#10;                c.add(Calendar.DATE, 7)&#13;&#10;            }&#13;&#10;            if (creditoInstance.periodicidade == &quot;diario&quot;) {&#13;&#10;                c.add(Calendar.DATE, 1)&#13;&#10;            }&#13;&#10;            if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#13;&#10;                c.add(Calendar.DATE, 2)&#13;&#10;            }&#13;&#10;            if (creditoInstance.periodicidade == &quot;variavel&quot;) {&#13;&#10;                int variavel = definicaoDeCredito.periodoVariavel as int&#13;&#10;                creditoInstance.periodoVariavel = variavel as Integer&#13;&#10;                c.add(Calendar.DATE, variavel)&#13;&#10;            }&#13;&#10;            //   System.println('depois do incremento' + c.getTime())&#13;&#10;            def pagamento = new Pagamento()&#13;&#10;            def num = creditoInstance.numeroDePrestacoes&#13;&#10;            pagamento.recorenciaDeMoras = definicaoDeCredito.recorenciaDeMoras&#13;&#10;            pagamento.setCredito(creditoInstance)&#13;&#10;            int dayOfWeek = c.get(Calendar.DAY_OF_WEEK)&#13;&#10;            if (dayOfWeek == 7) {&#13;&#10;                if (definicaoDeCredito.excluirSabados) {&#13;&#10;                    pagamento.descricao += &quot;Sabado!&quot;&#13;&#10;                    //  System.println('sabado' + c.getTime())&#13;&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                }&#13;&#10;            }&#13;&#10;            int dayOfWee = c.get(Calendar.DAY_OF_WEEK)&#13;&#10;            if (dayOfWee == 1) {&#13;&#10;                if (definicaoDeCredito.excluirDomingos) {&#13;&#10;                    pagamento.descricao += &quot;Domingo&quot;&#13;&#10;                    dias = dias + 1&#13;&#10;                    //  System.println('domingo' + c.getTime())&#13;&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                }&#13;&#10;&#13;&#10;&#13;&#10;            }&#13;&#10;&#13;&#10;            for (Iterator&lt;Feriado&gt; i = feriados.iterator(); i.hasNext();) {&#13;&#10;                Feriado feriado = i.next()&#13;&#10;                if (Objects.equals(c.getTime().format(&quot;dd/MM/yyyy&quot;), feriado.data.format(&quot;dd/MM/yyyy&quot;))) {&#13;&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                    int sabado = c.get(Calendar.DAY_OF_WEEK)&#13;&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; sabado == 7) {&#13;&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                    }&#13;&#10;                    int domingo = c.get(Calendar.DAY_OF_WEEK)&#13;&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; domingo == 1) {&#13;&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                    }&#13;&#10;&#13;&#10;                }&#13;&#10;            }&#13;&#10;            int dayOf = c.get(Calendar.DAY_OF_WEEK)&#13;&#10;            if (dayOf == 7) {&#13;&#10;                if (definicaoDeCredito.excluirSabados) {&#13;&#10;                    pagamento.descricao += &quot;Sabado!&quot;&#13;&#10;                    //  System.println('sabado' + c.getTime())&#13;&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                }&#13;&#10;            }&#13;&#10;            int dayO = c.get(Calendar.DAY_OF_WEEK)&#13;&#10;            if (dayO == 1) {&#13;&#10;                if (definicaoDeCredito.excluirDomingos) {&#13;&#10;                    pagamento.descricao += &quot;Domingo&quot;&#13;&#10;                    dias = dias + 1&#13;&#10;                    // System.println('domingo' + c.getTime())&#13;&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                }&#13;&#10;&#13;&#10;&#13;&#10;            }&#13;&#10;&#13;&#10;            pagamento.setDataPrevistoDePagamento(c.getTime())&#13;&#10;            pagamento.setValorDaPrestacao(valorDaPrestacao)&#13;&#10;&#13;&#10;            pagamento.setDescricao(&quot;${it}º- Prestação&quot;)&#13;&#10;            def numeroDoCredito = creditoInstance.numeroDoCredito.split('/')&#13;&#10;            pagamento.setNumeroDePagamento(numeroDoCredito[0] + numeroDoCredito[1] + it.toString())&#13;&#10;            if (num.equals(it)) {&#13;&#10;                if (creditoInstance.reterCapital) {&#13;&#10;                    //   System.println(&quot;reterCapital&quot;)&#13;&#10;                    pagamento.setValorDaPrestacao(valorDaPrestacao + creditoInstance.valorCreditado)&#13;&#10;                }&#13;&#10;&#13;&#10;&#13;&#10;            }&#13;&#10;            pagamentos.add(pagamento)&#13;&#10;            // pagamento.save flush:true&#13;&#10;&#13;&#10;        }&#13;&#10;&#13;&#10;        for (Pagamento p in pagamentos) {&#13;&#10;            Calendar cs = Calendar.getInstance()&#13;&#10;            Calendar cd = Calendar.getInstance()&#13;&#10;            cs.setTime(p.dataPrevistoDePagamento)&#13;&#10;            int sabado = cs.get(Calendar.DAY_OF_WEEK)&#13;&#10;            if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; sabado == 7) {&#13;&#10;                cs.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                p.dataPrevistoDePagamento = cs.getTime()&#13;&#10;            }&#13;&#10;            cd.setTime(p.dataPrevistoDePagamento)&#13;&#10;            int domingo = cd.get(Calendar.DAY_OF_WEEK)&#13;&#10;            if (definicaoDeCredito.excluirDiaDePagNoDomingo &amp;&amp; domingo == 1) {&#13;&#10;                cd.add(Calendar.DAY_OF_MONTH, 1)&#13;&#10;                p.dataPrevistoDePagamento = cd.getTime()&#13;&#10;            }&#13;&#10;        }&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#10;            ArrayList its = simuladorService.gerarExtrato(creditoInstance, valorDaPrestacao)&#10;&#10;            for (int x = 1; x &lt; its.size(); x++) {&#10;&#10;                pagamentos[x - 1].saldoDevedor = its[x].saldoDevedor.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;                pagamentos[x - 1].valorDeJuros = its[x].juros.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;                pagamentos[x - 1].valorDeAmortizacao = its[x].amortizacao.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;            }&#10;            // Adjust last payment for rounding errors&#10;            if (pagamentos.size() &gt; 1 &amp;&amp; its.size() &gt; 1) {&#10;                def ultimoPagamento = pagamentos.last()&#10;                def ultimoItemDoExtrato = its.last()&#10;&#10;                if (ultimoItemDoExtrato.saldoDevedor.abs() &gt; 0.00) {&#10;                    ultimoPagamento.valorDeAmortizacao += ultimoItemDoExtrato.saldoDevedor.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;                    ultimoPagamento.valorDaPrestacao += ultimoItemDoExtrato.saldoDevedor.toBigDecimal().setScale(2, RoundingMode.HALF_UP)&#10;                    ultimoPagamento.saldoDevedor = 0.0&#10;                }&#10;            }&#10;&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#10;            BigDecimal amortizacao = creditoInstance.valorCreditado / creditoInstance.numeroDePrestacoes&#10;            BigDecimal valorDeJuros = (creditoInstance.valorCreditado * creditoInstance.percentualDejuros / 100) / creditoInstance.numeroDePrestacoes&#10;            BigDecimal base = creditoInstance.valorCreditado&#10;            BigDecimal v_amortizacao = 0&#10;            for (Pagamento pagamento in pagamentos) {&#10;                v_amortizacao += amortizacao&#10;                //  System.println(base)&#10;                pagamento.valorDeAmortizacao = amortizacao&#10;                pagamento.valorDeJuros = valorDeJuros&#10;                pagamento.saldoDevedor = base - v_amortizacao&#10;            }&#10;            // Adjust last payment for rounding errors&#10;            if(!pagamentos.empty()){&#10;                def ultimoPagamento = pagamentos.last()&#10;                if(ultimoPagamento.saldoDevedor.abs() &gt; 0.00){&#10;                    ultimoPagamento.valorDeAmortizacao += ultimoPagamento.saldoDevedor&#10;                    ultimoPagamento.saldoDevedor = 0.0&#10;                }&#10;            }&#10;        }&#10;&#10;        for(Pagamento p : pagamentos){&#10;            p.save(failOnError: true, flush: true)&#10;        }&#10;&#10;&#10;    }&#10;&#10;    def actualizarEstadoDeCredito(Credito creditoInstance) {&#10;        def pagamentosNaoPagos = creditoInstance.pagamentos.findAll { !it.pago }&#10;        if (pagamentosNaoPagos.empty) {&#10;            creditoInstance.emDivida = false&#10;            creditoInstance.estado = &quot;Fechado&quot;&#10;        }&#10;        for (Pagamento p in pagamentosNaoPagos) {&#10;            if (p.diasDeMora &gt; 0) {&#10;                p.credito.estado = &quot;Pendente&quot;&#10;            } else p.credito.estado = &quot;EmProgresso&quot;&#10;        }&#10;        if (!creditoInstance.emDivida) {&#10;            creditoInstance.estado = &quot;Fechado&quot;&#10;        }&#10;&#10;&#10;        creditoInstance.merge(flush: true)&#10;    }&#10;&#10;    def eliminarPagamentos(Credito creditoInstance) {&#10;        for (Pagamento p in creditoInstance.pagamentos) {&#10;            creditoInstance.pagamentos.remove(p)&#10;            p.delete(flush: true)&#10;        }&#10;        creditoInstance&#10;    }&#10;&#10;    def eliminarCapitalizacoes(Credito creditoInstance) {&#10;        try {&#10;            def pagamentos = Pagamento.findAllByDescricaoAndCredito(&quot;CAPITALIZACAO&quot;, creditoInstance)&#10;            for (Pagamento pagamento in pagamentos) {&#10;                pagamento.credito = null&#10;                for (Nota nota in pagamento.notas) {&#10;                    nota.pagamento = null&#10;                    nota.merge(flush: true)&#10;                }&#10;                for (Parcela parcela in pagamento.parcelas) {&#10;                    parcela.pagamento = null&#10;                    parcela.merge(flush: true)&#10;                }&#10;                for (Remissao remissao in pagamento.remissoes) {&#10;                    remissao.pagamento = null&#10;                    remissao.merge(flush: true)&#10;                }&#10;                pagamento.parcelas = null&#10;                pagamento.remissoes = null&#10;                pagamento.notas = null&#10;                pagamento.merge(flush: true)&#10;                pagamento.delete(flush: true)&#10;                return true&#10;            }&#10;        } catch (SQLDataException e) {&#10;            System.println(e.toString())&#10;            return false&#10;        }&#10;&#10;&#10;    }&#10;&#10;    def calcularMoras(Pagamento pagamentoInstance) {&#10;        /*   if (pagamentoInstance?.credito == null) {&#10;               return&#10;           }&#10;           System.println(&quot;calcularMoras.pagamentoInstance&quot; + pagamentoInstance?.descricao)&#10;           def agora = new Date()&#10;           def dias = 0&#10;           int periodo = 0&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;mensal&quot;) {&#10;               dias = 15&#10;               periodo = 31&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;quinzenal&quot;) {&#10;               dias = 7&#10;               periodo = 15&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;semanal&quot;) {&#10;               dias = 3&#10;               periodo = 7&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;diario&quot;) {&#10;               dias = 1&#10;               periodo = 2&#10;           }&#10;           if (pagamentoInstance?.credito?.periodicidade == &quot;doisdias&quot;) {&#10;               dias = 1&#10;               periodo = 3&#10;           }&#10;           if (!pagamentoInstance.pago) {&#10;               if (pagamentoInstance.parcelas.empty) {&#10;&#10;                   dias += agora - pagamentoInstance.dataPrevistoDePagamento&#10;                   if (dias &lt; 0) {&#10;                       dias = 0&#10;                   }&#10;                   if (dias &gt; 0) {&#10;                       def moras = dias / periodo&#10;                       if (moras.setScale(0, RoundingMode.HALF_DOWN).toInteger() &gt;= 1) {&#10;                           moras = 1&#10;                       }&#10;                       pagamentoInstance.diasDeMora = moras&#10;                   } else {&#10;                       pagamentoInstance.diasDeMora = 0&#10;                   }&#10;                   pagamentoInstance.save()&#10;               } else {&#10;                   dias += agora - pagamentoInstance.dataPrevistoDePagamento&#10;                   System.println(&quot;dias de mora com uma parte paga&quot; + dias)&#10;                   if (dias &gt; 0) {&#10;                       def moras = dias / periodo&#10;                       if (moras.setScale(0, RoundingMode.HALF_DOWN).toInteger() &gt;= 1) {&#10;                           moras = 1&#10;                       }&#10;                       pagamentoInstance.diasDeMora = moras&#10;                       pagamentoInstance.credito.estado = &quot;Pendente&quot;&#10;                       pagamentoInstance.credito.save()&#10;                       pagamentoInstance.save()&#10;                   } else {&#10;                       pagamentoInstance.diasDeMora = 0&#10;                   }&#10;&#10;&#10;               }&#10;&#10;           }&#10;&#10;           pagamentoInstance.merge()&#10;           verificarPagamentos(pagamentoInstance.credito)*/&#10;        if (!pagamentoInstance.parcelas.empty) {&#10;            pagamentoInstance.parcelas.sort { it.dataDePagamento }&#10;            BigDecimal vp = 0.0&#10;            BigDecimal vem = 0.0&#10;&#10;&#10;            for (Parcela parcela in pagamentoInstance.parcelas) {&#10;                vp += parcela.valorParcial&#10;                vem += parcela.vdjdm&#10;                if (vp + vem &gt;= pagamentoInstance.valorDaPrestacao * (-1)) {&#10;                    pagamentoInstance.diasDeMora = parcela.dem&#10;&#10;                }&#10;&#10;            }&#10;        } else {&#10;            Date date = new Date()&#10;            if (date.after(pagamentoInstance.dataPrevistoDePagamento)) {&#10;                pagamentoInstance.diasDeMora = date - pagamentoInstance.dataPrevistoDePagamento&#10;                if (pagamentoInstance.recorenciaDeMoras &gt; pagamentoInstance.diasDeMora) {&#10;                    pagamentoInstance.diasDeMora = pagamentoInstance.recorenciaDeMoras&#10;                }&#10;            } else {&#10;                pagamentoInstance.diasDeMora = 0&#10;            }&#10;        }&#10;        try {&#10;            pagamentoInstance.merge(flush: true)&#10;        } catch (SQLDataException e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;    }&#10;&#10;    def calcularMoraCaPital(Credito creditoInstance) {&#10;        try {&#10;&#10;            def agora = new Date()&#10;            def dias = 0&#10;            int periodo = 30&#10;&#10;            if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;                dias = 15&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;                dias = 15&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;                dias = 23&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;                dias = 29&#10;&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;                dias = 28&#10;&#10;            }&#10;            //  System.println(&quot;calcularMoraCaPital&quot; + &quot; time==&quot; + agora + &quot; Dias==&quot; + dias)&#10;&#10;            List&lt;Pagamento&gt; pagamentos = new ArrayList&lt;Pagamento&gt;(Pagamento.findAllByCredito(creditoInstance))&#10;            pagamentos.sort { it.id }&#10;            Calendar c = Calendar.getInstance()&#10;            c.setTime(pagamentos.last().dataPrevistoDePagamento)&#10;            c.add(Calendar.DAY_OF_MONTH, 1)&#10;            c.add(Calendar.MONTH, 1)&#10;            creditoInstance.validade = c.getTime()&#10;            dias += agora - c.getTime()&#10;            if (dias &lt; 0) {&#10;                dias = 0&#10;            }&#10;                if (dias &gt; 0) {&#10;                    def moras = dias / periodo&#10;&#10;                    //  System.println(&quot;moras==&quot; + moras)&#10;                    creditoInstance.setMoras(moras.setScale(0, RoundingMode.HALF_DOWN).toInteger())&#10;                    if (creditoInstance.moras &gt; 0) {&#10;                        for (int m = 1; m &lt; creditoInstance.moras; m++) {&#10;                            String numro = creditoInstance.id + &quot;-&quot; + m + 1&#10;                            Pagamento pgmt = Pagamento.findByNumeroDePagamento(numro)&#10;                            if (pgmt == null) {&#10;                                Pagamento paga = new Pagamento()&#10;                                Calendar cal = Calendar.getInstance()&#10;                                cal.setTime(creditoInstance.validade)&#10;                                cal.add(Calendar.MONTH, 1)&#10;                                paga.dataPrevistoDePagamento = cal.getTime()&#10;                                cal.setTime(paga.dataPrevistoDePagamento)&#10;                                Calendar call = Calendar.getInstance()&#10;                                call.setTime(creditoInstance.validade)&#10;                                call.add(Calendar.MONTH, m)&#10;                                //  System.println(call.getTime())&#10;                                paga.dataDaCriacao = call.getTime()&#10;                                BigDecimal divida = getSaldo(pagamentos, creditoInstance, paga.dataDaCriacao)&#10;                                def pdjdd = creditoInstance.percentualJurosDeDemora&#10;                                if (settingsService.settings.pdjda == &quot;pdj&quot;) {&#10;                                    pdjdd = creditoInstance.percentualDejuros&#10;                                }&#10;                                if (settingsService.settings.pdjda == &quot;pdjdm&quot;) {&#10;                                    pdjdd = creditoInstance.percentualJurosDeDemora&#10;                                }&#10;&#10;                                def valorDeMoras = divida * pdjdd / 100&#10;                                paga.valorDaPrestacao = valorDeMoras&#10;                                paga.numeroDePagamento = numro&#10;                                paga.pago = false&#10;                                paga.descricao = &quot;CAPITALIZACAO&quot;&#10;                                paga.credito = creditoInstance&#10;                                if (paga.valorDaPrestacao &lt; 0) {&#10;                                    paga.save(flush: true)&#10;                                } else {&#10;                                    System.println(&quot;paga.valorDaPrestacao==&quot; + paga.valorDaPrestacao)&#10;                                }&#10;                                pagamentos.clear()&#10;                                pagamentos = Pagamento.findAllByCredito(creditoInstance)&#10;                            }&#10;                        }&#10;                    }&#10;&#10;                } else {&#10;                    creditoInstance.moras = 0&#10;                }&#10;&#10;            creditoInstance.merge(failOnError: true)&#10;&#10;            //  pagamentoInstance.merge(flush: true)&#10;&#10;            verificarPagamentos(creditoInstance)&#10;        } catch (Exception e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;    }&#10;&#10;    BigDecimal getSaldo(List&lt;Pagamento&gt; pagamentos, Credito creditoInstance, Date data) {&#10;&#10;        List&lt;ExtratoDeCredito&gt; extratoDeCreditos = new ArrayList&lt;ExtratoDeCredito&gt;()&#10;        List&lt;ExtratoDeCredito&gt; extratos = new ArrayList&lt;ExtratoDeCredito&gt;()&#10;&#10;        BigDecimal juros = 0.0&#10;        for (Pagamento pagamento1 in pagamentos.sort { it.id }) {&#10;&#10;            juros += pagamento1.valorDeJuros&#10;        }&#10;        BigDecimal saldo = creditoInstance.valorCreditado + juros&#10;        ExtratoDeCredito extrato = new ExtratoDeCredito()&#10;        extrato.debito = saldo&#10;        extrato.credito = 0.0&#10;        extrato.descricao = &quot;EMPRESTIMO C/ JUROS&quot;&#10;        extrato.jurosDeMora = 0.0&#10;        extrato.juros = 0.0&#10;        extrato.data = creditoInstance.dateConcecao&#10;        extrato.saldo = 0.0&#10;        extratoDeCreditos.add(extrato)&#10;&#10;&#10;        for (Pagamento pagamento in pagamentos.sort { it.id }) {&#10;&#10;            for (Parcela parcela in pagamento?.parcelas?.sort { it.id }) {&#10;                if (parcela.valorPago &gt; 0.0) {&#10;                    ExtratoDeCredito extratoDeCredito = new ExtratoDeCredito()&#10;                    extratoDeCredito.data = parcela.dataDePagamento&#10;                    extratoDeCredito.descricao = parcela.descricao&#10;                    extratoDeCredito.debito = 0.0&#10;                    extratoDeCredito.credito = parcela.valorPago * (-1)&#10;                    extratoDeCredito.jurosDeMora = 0.0&#10;                    extratoDeCredito.saldo = 0.0&#10;                    extratoDeCreditos.add(extratoDeCredito)&#10;&#10;                }&#10;&#10;            }&#10;            if (pagamento.valorDeJurosDeDemora * (-1) &gt; 0.0) {&#10;                Calendar c = Calendar.getInstance()&#10;                c.setTime(pagamento.dataPrevistoDePagamento)&#10;                c.add(Calendar.DAY_OF_MONTH, 1)&#10;                ExtratoDeCredito extratoDeCredito = new ExtratoDeCredito()&#10;                extratoDeCredito.data = c.getTime()&#10;                extratoDeCredito.descricao = &quot;JUROS DE MORA da &quot; + pagamento.descricao&#10;                extratoDeCredito.debito = 0.0&#10;                extratoDeCredito.credito = 0.0&#10;                extratoDeCredito.jurosDeMora = pagamento.valorDeJurosDeDemora * (-1)&#10;                extratoDeCredito.saldo = 0.0&#10;                extratoDeCreditos.add(extratoDeCredito)&#10;            }&#10;            if (pagamento.descricao == &quot;CAPITALIZACAO&quot;) {&#10;&#10;                ExtratoDeCredito extratoDeCredito = new ExtratoDeCredito()&#10;                extratoDeCredito.data = pagamento.dataDaCriacao&#10;                extratoDeCredito.descricao = pagamento.descricao&#10;                extratoDeCredito.debito = 0.0&#10;                extratoDeCredito.credito = 0.0&#10;                extratoDeCredito.jurosDeMora = pagamento.valorDaPrestacao * (-1)&#10;                extratoDeCredito.saldo = 0.0&#10;                extratoDeCreditos.add(extratoDeCredito)&#10;            }&#10;&#10;        }&#10;        extratoDeCreditos.each {&#10;            if (it.data &lt; data) {&#10;                extratos.add(it)&#10;            }&#10;        }&#10;        extratos.sort { it.data }&#10;&#10;        BigDecimal sal = 0.0&#10;        for (ExtratoDeCredito extratoDeCredito in extratos) {&#10;&#10;            sal += extratoDeCredito.credito&#10;            sal += extratoDeCredito.debito&#10;            sal += extratoDeCredito.jurosDeMora&#10;            extratoDeCredito.saldo = sal&#10;&#10;        }&#10;&#10;        return extratos.last().saldo * (-1)&#10;    }&#10;    def calcularMoras(Pagamento pagamentoInstance, Parcela parcela) {&#10;        try {&#10;            def agora = parcela.dataDePagamento&#10;            def dias = 0&#10;&#10;            if (!pagamentoInstance.pago) {&#10;                if (pagamentoInstance.parcelas.empty) {&#10;&#10;                    dias += agora - pagamentoInstance.dataPrevistoDePagamento&#10;                    if (dias &lt; 0) {&#10;                        dias = 0&#10;                    }&#10;&#10;                    if (dias &gt; 0) {&#10;&#10;                        if (pagamentoInstance.recorenciaDeMoras &gt; dias) {&#10;                            dias = pagamentoInstance.recorenciaDeMoras&#10;                        }&#10;                        pagamentoInstance.diasDeMora = dias&#10;&#10;&#10;                    } else {&#10;                        pagamentoInstance.diasDeMora = 0&#10;                    }&#10;&#10;                } else {&#10;&#10;                    dias = pagamentoInstance.parcelas.sort { it.dataDePagamento }.last().dataDePagamento - pagamentoInstance.dataPrevistoDePagamento&#10;                    if (dias &gt; 0) {&#10;                        if (pagamentoInstance.recorenciaDeMoras &gt; dias) {&#10;                            pagamentoInstance.diasDeMora = dias&#10;                        }&#10;                        pagamentoInstance.credito.estado = &quot;Pendente&quot;&#10;&#10;                    } else {&#10;                        pagamentoInstance.diasDeMora = 0&#10;                    }&#10;&#10;&#10;                }&#10;&#10;            }&#10;        } catch (Exception e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;&#10;    }&#10;&#10;    def calcularJurosDeDemora(Parcela parcelaInstance) {&#10;        int periodo = 0&#10;        def dias = 0&#10;        if (pagamentoInstance.credito.periodicidade == &quot;mensal&quot;) {&#10;            dias = 15&#10;            periodo = 30&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;quinzenal&quot;) {&#10;            dias = 7&#10;            periodo = 15&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;semanal&quot;) {&#10;            dias = 3&#10;            periodo = 7&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;diario&quot;) {&#10;            periodo = 1&#10;        }&#10;        if (pagamentoInstance.credito.periodicidade == &quot;doisdias&quot;) {&#10;            dias = 1&#10;            periodo = 2&#10;        }&#10;&#10;&#10;        dias += parcelaInstance.dataDePagamento - parcelaInstance.pagamento.dataPrevistoDePagamento&#10;        //  System.println(&quot;dias de demora =&quot; + dias)&#10;        if (dias &gt; 0) {&#10;&#10;            //  System.println(dias + &quot; &gt; 0&quot;)&#10;            def moras = dias / periodo&#10;            if (moras.setScale(0, RoundingMode.HALF_DOWN).toInteger() &gt;= 1) {&#10;                moras = 1&#10;            }&#10;            pagamentoInstance.diasDeMora = moras&#10;            parcelaInstance.pagamento.credito.estado = &quot;Pendente&quot;&#10;            parcelaInstance.pagamento.credito.save(flush: true)&#10;            pagamentoInstance.save(flush: true)&#10;        } else {&#10;            parcelaInstance.pagamento.diasDeMora = 0&#10;            parcelaInstance.pagamento.valorDeJurosDeDemora = 0&#10;        }&#10;        parcelaInstance.pagamento.save(flush: true)&#10;&#10;    }&#10;&#10;&#10;    def verificarPagamentos(Credito creditoInstance) {&#10;        try {&#10;            def allNaoPago = creditoInstance.pagamentos.findAll { !it.pago }&#10;&#10;            if (allNaoPago.empty) {&#10;                creditoInstance.estado = &quot;Fechado&quot;&#10;                creditoInstance.emDivida = false&#10;                creditoInstance.merge(flush: true)&#10;            } else {&#10;                for (Pagamento p in allNaoPago) {&#10;                    if (p.diasDeMora &gt; 0) {&#10;                        creditoInstance.estado = &quot;Pendente&quot;&#10;                        creditoInstance.merge(flush: true)&#10;                    }&#10;                }&#10;            }&#10;        } catch (Exception e) {&#10;            System.println(e.toString())&#10;        }&#10;&#10;&#10;    }&#10;&#10;&#10;    /* def calcularPagamentosVencidos() {&#10;&#10;         def pagamentos = Pagamento.findAllByPago(false)&#10;         DateFormat dateFormat = new SimpleDateFormat(&quot;dd/MM/yyyy&quot;)&#10;         Calendar c = Calendar.getInstance()&#10;         //c.add(Calendar.DATE, 30)&#10;         System.println(c.getTime())&#10;&#10;         for (Pagamento p : pagamentos) {&#10;             System.println(c.getTime())&#10;             if (!p.dataPrevistoDePagamento.equals(null)) {&#10;                 c.setTime(p.dataPrevistoDePagamento as Date)&#10;                 c.add(Calendar.DATE, 30)&#10;                 Date date = new Date()&#10;                 if (date &lt; c.getTime()) {&#10;                     String descricao = p.descricao&#10;                     BigDecimal valorDaPrestcao = p.valorDaPrestacao&#10;                     p.setDescricao(descricao + &quot;+1J&quot;)&#10;                     p.setDataPrevistoDePagamento(c.getTime() as Date)&#10;                     p.valorDaPrestacao += p.valorDaPrestacao * p.credito.percentualDejuros / 100&#10;                     p.credito.estado = &quot;Pendente&quot;&#10;                     p.credito.save()&#10;                     p.save flush: true&#10;&#10;&#10;                 }&#10;&#10;             }&#10;&#10;&#10;         }&#10;     }*/&#10;&#10;&#10;&#10;    BigDecimal pmt(double r_double, int nper, BigDecimal pv, BigDecimal fv, int type) {&#10;        def i = new BigDecimal(r_double.toString())&#10;        def one = BigDecimal.ONE&#10;        def mc = new java.math.MathContext(16, java.math.RoundingMode.HALF_UP)&#10;&#10;        if (i.compareTo(BigDecimal.ZERO) == 0) {&#10;            return nper &gt; 0 ? -(pv + fv) / nper : 0.0&#10;        }&#10;&#10;        def one_plus_i = one + i&#10;        def one_plus_i_to_n = one_plus_i.pow(nper)&#10;&#10;        // Formula: P * i * (1+i)^n / ((1+i)^n - 1)&#10;        def numerator = pv.multiply(i).multiply(one_plus_i_to_n)&#10;        def denominator = one_plus_i_to_n - one&#10;&#10;        // Return negative value to align with existing logic expecting negative installments&#10;        def pmt = numerator.divide(denominator, mc).negate()&#10;&#10;        return pmt&#10;    }&#10;&#10;    double taxafixa(double r, int nper, BigDecimal pv, BigDecimal fv, int type) {&#10;        BigDecimal juros = pv * r&#10;        BigDecimal total = pv + juros&#10;        double taxafixa = total / nper&#10;        return taxafixa * (-1)&#10;    }&#10;&#10;    List simuladorDeCredito(Credito creditoInstance) {&#10;        def pagamentos = new ArrayList&lt;Pagamento&gt;()&#10;        Integer dias = 0&#10;        Calendar c = Calendar.getInstance()&#10;        BigDecimal valorDaPrestacao = 0.0&#10;        int periodo = 0&#10;        if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;            periodo = 30&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;            periodo = 15&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;            periodo = 7&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;            periodo = 1&#10;        }&#10;        if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;            periodo = 2&#10;        }&#10;&#10;        def r = creditoInstance.percentualDejuros / 100&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#10;            // double pmt(double r, int nper, BigDecimal pv, BigDecimal fv, int type)&#10;            valorDaPrestacao = pmt(r, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0.0, 0)&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#10;            valorDaPrestacao = taxafixa(r, creditoInstance.numeroDePrestacoes, creditoInstance.valorCreditado, 0.0, 0)&#10;        }&#10;&#10;&#10;        1.upto(creditoInstance.numeroDePrestacoes) {&#10;            def pagamento = new Pagamento()&#10;            def num = creditoInstance.numeroDePrestacoes&#10;            pagamento.setCredito(creditoInstance)&#10;            pagamento.setValorDaPrestacao(valorDaPrestacao)&#10;            pagamentos.add(pagamento)&#10;        }&#10;        if (creditoInstance.formaDeCalculo == &quot;pmt&quot;) {&#10;            ArrayList its = simuladorService.gerarExtrato(creditoInstance, valorDaPrestacao)&#10;&#10;            for (int x = 1; x &lt; its.size(); x++) {&#10;&#10;                pagamentos[x - 1].saldoDevedor = its[x].saldoDevedor.toBigDecimal()&#10;                pagamentos[x - 1].valorDeJuros = its[x].juros.toBigDecimal()&#10;                pagamentos[x - 1].valorDeAmortizacao = its[x].amortizacao.toBigDecimal()&#10;&#10;&#10;            }&#10;        } else if (creditoInstance.formaDeCalculo == &quot;taxafixa&quot;) {&#10;            BigDecimal amortizacao = creditoInstance.valorCreditado / creditoInstance.numeroDePrestacoes&#10;            BigDecimal valorDeJuros = (creditoInstance.valorCreditado * creditoInstance.percentualDejuros / 100) / creditoInstance.numeroDePrestacoes&#10;            BigDecimal base = creditoInstance.valorCreditado&#10;            BigDecimal v_amortizacao = 0&#10;&#10;            for (Pagamento pagamento in pagamentos) {&#10;                v_amortizacao += amortizacao&#10;                //  System.println(base)&#10;                pagamento.valorDeAmortizacao = amortizacao&#10;                pagamento.valorDeJuros = valorDeJuros&#10;                pagamento.saldoDevedor = base - v_amortizacao&#10;&#10;            }&#10;&#10;        }&#10;        // System.println(pagamentos)&#10;        return pagamentos&#10;    }&#10;&#10;    def merge(Pagamento pagamento) {&#10;        try {&#10;            pagamento.merge(flush: true)&#10;            return true&#10;        } catch (SQLDataException e) {&#10;            System.println(e.toString())&#10;            return false&#10;        }&#10;    }&#10;&#10;    List&lt;Pagamento&gt; getByCredito(Credito credito1) {&#10;        return Pagamento.findAllByCredito(credito1)&#10;    }&#10;&#10;    List&lt;Pagamento&gt; findAllByDataPrevistoDePagamento(Date dia) {&#10;        List&lt;Pagamento&gt; pgmts&#10;        if (pgmts == null) {&#10;            pgmts = new ListModelList&lt;&gt;()&#10;        }&#10;        def pagamentos = findAllByDate(dia)&#10;        for (Iterator&lt;Pagamento&gt; i = pagamentos.iterator(); i.hasNext();) {&#10;            Pagamento p = i.next()&#10;            if (Objects.equals(p.dataPrevistoDePagamento.format(&quot;dd/MM/yyyy&quot;), dia.format(&quot;dd/MM/yyyy&quot;))) {&#10;                if (p.valorDaPrestacao &lt; 0 &amp;&amp; p.totalEmDivida &lt; 0) {&#10;                    pgmts.add(p)&#10;                }&#10;&#10;&#10;            }&#10;        }&#10;        return pgmts&#10;    }&#10;&#10;    List&lt;Pagamento&gt; findAll() {&#10;        return Pagamento.all&#10;    }&#10;&#10;    List&lt;Pagamento&gt; findAllByDate(Date date) {&#10;        Calendar c = Calendar.getInstance()&#10;        c.setTime(date)&#10;        c.add(Calendar.DAY_OF_MONTH, -1)&#10;        def startDate = c.getTime()&#10;        c.add(Calendar.DAY_OF_MONTH, 2)&#10;        def endDate = c.getTime()&#10;&#10;        def pgmts = Pagamento.findAllByDataPrevistoDePagamentoBetween(startDate, endDate)&#10;        return pgmts&#10;    }&#10;&#10;    def udateDatas(Credito creditoInstance) {&#10;        int x = 0&#10;        def pagamentos = Pagamento.findAllByCredito(creditoInstance)&#10;        pagamentos.sort { it.id }&#10;        Calendar c = Calendar.getInstance()&#10;        c.setTime(creditoInstance.dateConcecao)&#10;        def definicaoDeCredito = DefinicaoDeCredito.findAllByAtivoAndPeriodicidadeAndFormaDeCalculo(true, creditoInstance.periodicidade, creditoInstance.formaDeCalculo)&#10;        1.upto(creditoInstance.numeroDePrestacoes) {&#10;&#10;&#10;            if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;                c.add(Calendar.MONTH, 1)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;                c.add(Calendar.DATE, 15)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;                c.add(Calendar.DATE, 7)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;                c.add(Calendar.DATE, 1)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;                c.add(Calendar.DATE, 2)&#10;            }&#10;            if (creditoInstance.periodicidade == &quot;variavel&quot;) {&#10;                int variavel = definicaoDeCredito.periodoVariavel as int&#10;                creditoInstance.periodoVariavel = variavel as Integer&#10;                c.add(Calendar.DATE, variavel)&#10;            }&#10;            //   System.println('depois do incremento' + c.getTime())&#10;&#10;            int dayOfWeek = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOfWeek == 7) {&#10;                if (definicaoDeCredito.excluirSabados) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;            }&#10;            int dayOfWee = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOfWee == 1) {&#10;                if (definicaoDeCredito.excluirDomingos) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;&#10;&#10;            }&#10;            def feriados = Feriado.all&#10;            for (Iterator&lt;Feriado&gt; i = feriados.iterator(); i.hasNext();) {&#10;                Feriado feriado = i.next()&#10;                if (Objects.equals(c.getTime().format(&quot;dd/MM/yyyy&quot;), feriado.data.format(&quot;dd/MM/yyyy&quot;))) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    int sabado = c.get(Calendar.DAY_OF_WEEK)&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; sabado == 7) {&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    }&#10;                    int domingo = c.get(Calendar.DAY_OF_WEEK)&#10;                    if (definicaoDeCredito.excluirDiaDePagNoSabado &amp;&amp; domingo == 1) {&#10;                        c.add(Calendar.DAY_OF_MONTH, 1)&#10;                    }&#10;&#10;                }&#10;            }&#10;            int dayOf = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayOf == 7) {&#10;                if (definicaoDeCredito.excluirSabados) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;            }&#10;            int dayO = c.get(Calendar.DAY_OF_WEEK)&#10;            if (dayO == 1) {&#10;                if (definicaoDeCredito.excluirDomingos) {&#10;                    c.add(Calendar.DAY_OF_MONTH, 1)&#10;                }&#10;&#10;&#10;            }&#10;&#10;            pagamentos[x].setDataPrevistoDePagamento(c.getTime())&#10;            pagamentos[x].merge(flush: true)&#10;            x++&#10;&#10;        }&#10;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/grails-app/services/mz/maleyanga/SimuladorService.groovy">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/grails-app/services/mz/maleyanga/SimuladorService.groovy" />
              <option name="originalContent" value="package mz.maleyanga&#10;&#10;import mz.maleyanga.credito.Credito&#10;import mz.maleyanga.pagamento.Pagamento&#10;import mz.maleyanga.settings.Settings&#10;import mz.maleyanga.simulador.Item&#10;import mz.maleyanga.simulador.Simulador&#10;import org.zkoss.zul.ListModelList&#10;&#10;/**&#10; * SimuladorService&#10; * A service class encapsulates the core business logic of a Grails application&#10; */&#10;&#10;class SimuladorService {&#10;&#10;    Credito credito&#10;    String juros&#10;    String jurosDeMora&#10;    String taxaFixa&#10;    Double totalPrestacoes = 0&#10;    Double totalamortizacao = 0&#10;    Double totaljuros = 0&#10;    Settings settings&#10;    ListModelList&lt;Pagamento&gt; prestacoes&#10;    Simulador simulador = new Simulador()&#10;&#10;&#10;    ArrayList gerarExtrato(Credito creditoInstance, BigDecimal prestacoes) {&#10;        def its = new ArrayList&lt;Item&gt;()&#10;&#10;        int nper = creditoInstance.numeroDePrestacoes as int&#10;        BigDecimal pv = creditoInstance.valorCreditado as BigDecimal&#10;&#10;        // --- Start of new logic ---&#10;        def annualRateDecimal = creditoInstance.percentualDejuros / 100.0&#10;        def periodicRate = 0.0&#10;        def divisor = 1.0&#10;&#10;        if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#10;            divisor = 12.0&#10;        } else if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#10;            divisor = 24.0&#10;        } else if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#10;            divisor = 52.0&#10;        } else if (creditoInstance.periodicidade == &quot;diario&quot;) {&#10;            divisor = 365.0&#10;        } else if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#10;            divisor = 365.0 / 2.0&#10;        } else if (creditoInstance.periodicidade == &quot;variavel&quot;) {&#10;            if (creditoInstance.periodoVariavel &gt; 0) {&#10;                divisor = 365.0 / creditoInstance.periodoVariavel&#10;            }&#10;        }&#10;&#10;        if (divisor &gt; 0) {&#10;            periodicRate = annualRateDecimal / divisor&#10;        }&#10;        def rate = new BigDecimal(periodicRate.toString())&#10;        // --- End of new logic ---&#10;&#10;        prestacoes = prestacoes.setScale(2, BigDecimal.ROUND_HALF_UP)&#10;&#10;        Item itm0 = new Item()&#10;        itm0.saldoDevedor = pv.setScale(2, BigDecimal.ROUND_HALF_UP)&#10;        itm0.meses = &quot;0&quot;&#10;        its.add(itm0)&#10;&#10;        for (int x = 1; x &lt;= nper; x++) {&#10;            def saldoDevedorLast = its.last().saldoDevedor as BigDecimal&#10;&#10;            BigDecimal juros = (saldoDevedorLast * rate).setScale(2, BigDecimal.ROUND_HALF_UP)&#10;            BigDecimal amortizacao = -prestacoes - juros&#10;            BigDecimal saldoDevedor = saldoDevedorLast - amortizacao&#10;&#10;            def d = new Item(meses: x.toString(), saldoDevedor: saldoDevedor, prestacoes: prestacoes, amortizacao: amortizacao, juros: juros)&#10;            its.add(d)&#10;        }&#10;&#10;        // Adjust rounding on the last item&#10;        if (!its.isEmpty() &amp;&amp; its.size() &gt; 1) {&#10;            def lastItem = its.last()&#10;            if (lastItem.saldoDevedor.abs() &gt; 0.0) {&#10;                lastItem.amortizacao += lastItem.saldoDevedor&#10;                lastItem.saldoDevedor = 0.0&#10;            }&#10;        }&#10;&#10;        return its&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package mz.maleyanga&#13;&#10;&#13;&#10;import mz.maleyanga.credito.Credito&#13;&#10;import mz.maleyanga.pagamento.Pagamento&#13;&#10;import mz.maleyanga.settings.Settings&#13;&#10;import mz.maleyanga.simulador.Item&#13;&#10;import mz.maleyanga.simulador.Simulador&#13;&#10;import org.zkoss.zul.ListModelList&#13;&#10;&#13;&#10;/**&#13;&#10; * SimuladorService&#13;&#10; * A service class encapsulates the core business logic of a Grails application&#13;&#10; */&#13;&#10;&#13;&#10;class SimuladorService {&#13;&#10;&#13;&#10;    Credito credito&#13;&#10;    String juros&#13;&#10;    String jurosDeMora&#13;&#10;    String taxaFixa&#13;&#10;    Double totalPrestacoes = 0&#13;&#10;    Double totalamortizacao = 0&#13;&#10;    Double totaljuros = 0&#13;&#10;    Settings settings&#13;&#10;    ListModelList&lt;Pagamento&gt; prestacoes&#13;&#10;    Simulador simulador = new Simulador()&#13;&#10;&#13;&#10;&#13;&#10;    ArrayList gerarExtrato(Credito creditoInstance, BigDecimal prestacoes) {&#13;&#10;        def its = new ArrayList&lt;Item&gt;()&#13;&#10;&#13;&#10;        int nper = creditoInstance.numeroDePrestacoes as int&#13;&#10;        BigDecimal pv = creditoInstance.valorCreditado as BigDecimal&#13;&#10;&#13;&#10;        // --- Start of new logic ---&#13;&#10;        def annualRateDecimal = creditoInstance.percentualDejuros / 100.0&#13;&#10;        def periodicRate = 0.0&#13;&#10;        def divisor = 1.0&#13;&#10;&#13;&#10;        if (creditoInstance.periodicidade == &quot;mensal&quot;) {&#13;&#10;            divisor = 12.0&#13;&#10;        } else if (creditoInstance.periodicidade == &quot;quinzenal&quot;) {&#13;&#10;            divisor = 24.0&#13;&#10;        } else if (creditoInstance.periodicidade == &quot;semanal&quot;) {&#13;&#10;            divisor = 52.0&#13;&#10;        } else if (creditoInstance.periodicidade == &quot;diario&quot;) {&#13;&#10;            divisor = 365.0&#13;&#10;        } else if (creditoInstance.periodicidade == &quot;doisdias&quot;) {&#13;&#10;            divisor = 365.0 / 2.0&#13;&#10;        } else if (creditoInstance.periodicidade == &quot;variavel&quot;) {&#13;&#10;            if (creditoInstance.periodoVariavel &gt; 0) {&#13;&#10;                divisor = 365.0 / creditoInstance.periodoVariavel&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        if (divisor &gt; 0) {&#13;&#10;            periodicRate = annualRateDecimal / divisor&#13;&#10;        }&#13;&#10;        def rate = new BigDecimal(periodicRate.toString())&#13;&#10;        // --- End of new logic ---&#13;&#10;&#13;&#10;        prestacoes = prestacoes.setScale(2, BigDecimal.ROUND_HALF_UP)&#13;&#10;&#13;&#10;        Item itm0 = new Item()&#13;&#10;        itm0.saldoDevedor = pv.setScale(2, BigDecimal.ROUND_HALF_UP)&#13;&#10;        itm0.meses = &quot;0&quot;&#13;&#10;        its.add(itm0)&#13;&#10;&#13;&#10;        for (int x = 1; x &lt;= nper; x++) {&#13;&#10;            def saldoDevedorLast = its.last().saldoDevedor as BigDecimal&#13;&#10;            &#13;&#10;            BigDecimal juros = (saldoDevedorLast * rate).setScale(2, BigDecimal.ROUND_HALF_UP)&#13;&#10;            BigDecimal amortizacao = -prestacoes - juros&#13;&#10;            BigDecimal saldoDevedor = (saldoDevedorLast - amortizacao).setScale(2, BigDecimal.ROUND_HALF_UP)&#13;&#10;&#13;&#10;            def d = new Item(meses: x.toString(), saldoDevedor: saldoDevedor, prestacoes: prestacoes, amortizacao: amortizacao, juros: juros)&#13;&#10;            its.add(d)&#13;&#10;        }&#13;&#10;&#13;&#10;        // Adjust the last payment to ensure zero balance&#13;&#10;        if (its.size() &gt; 1) {&#13;&#10;            def lastItem = its.last()&#13;&#10;            if (lastItem.saldoDevedor != 0.0) {&#13;&#10;                lastItem.amortizacao = lastItem.amortizacao + lastItem.saldoDevedor&#13;&#10;                lastItem.saldoDevedor = 0.0&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        return its&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/grails-app/viewmodels/pagamento/PagamentosViewModel.groovy">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/grails-app/viewmodels/pagamento/PagamentosViewModel.groovy" />
              <option name="originalContent" value="package pagamento&#10;&#10;import grails.plugin.springsecurity.SpringSecurityService&#10;import grails.transaction.Transactional&#10;import mz.maleyanga.ClienteService&#10;import mz.maleyanga.ContadorService&#10;import mz.maleyanga.CreditoService&#10;import mz.maleyanga.DiarioService&#10;import mz.maleyanga.PagamentoService&#10;import mz.maleyanga.SessionStorageService&#10;import mz.maleyanga.SettingsService&#10;import mz.maleyanga.cliente.Cliente&#10;import mz.maleyanga.conta.Conta&#10;import mz.maleyanga.credito.Credito&#10;import mz.maleyanga.diario.Diario&#10;import mz.maleyanga.pagamento.Pagamento&#10;import mz.maleyanga.pagamento.Parcela&#10;import mz.maleyanga.ParcelaService&#10;import mz.maleyanga.pagamento.Remissao&#10;import mz.maleyanga.saidas.Saida&#10;import mz.maleyanga.security.Utilizador&#10;import mz.maleyanga.transacao.Transacao&#10;import mz.maleyanga.transferencia.Transferencia&#10;import org.springframework.stereotype.Service&#10;import org.zkoss.bind.annotation.Init&#10;import org.zkoss.bind.annotation.Command&#10;import org.zkoss.bind.annotation.NotifyChange&#10;import org.zkoss.zk.ui.select.annotation.Wire&#10;import org.zkoss.zul.Button&#10;import org.zkoss.zul.Div&#10;import org.zkoss.zul.Label&#10;import org.zkoss.zul.ListModelList&#10;import org.zkoss.zul.Listbox&#10;import org.zkoss.zul.Row&#10;import java.math.RoundingMode&#10;import java.sql.SQLException&#10;&#10;@Transactional&#10;@Service&#10;class PagamentosViewModel {&#10;    PagamentoService pagamentoService&#10;    SessionStorageService sessionStorageService&#10;     SettingsService settingsService&#10;    @Wire Label info&#10;    @Wire Button bt_update_entrada&#10;    @Wire Label lb_pag&#10;    @Wire Label lb_remissoes&#10;    @Wire Row rw_co&#10;    @Wire Div dv_filtragem&#10;    @Wire Listbox lb_pagamentos&#10;    @Wire Row rw_destino&#10;    @Wire Button bt_diario&#10;    @Wire Button bt_salvar&#10;    @Wire Button bt_fechar_caixa&#10;    @Wire Listbox lb_credito&#10;    @Wire Listbox lb_creditos&#10;    private  String filter&#10;    private  String filterCliente&#10;    private  boolean  allPagamentos&#10;    private  boolean  allCreditos&#10;    private  String id&#10;    private  String pagamento_id = &quot;&quot;&#10;    private  Pagamento selectedPagamento&#10;    private  Pagamento selectedPagamentoo&#10;    private  Credito selectedCredito&#10;    private  Credito selectedCreditoo&#10;    private ListModelList&lt;Pagamento&gt; pagamentos&#10;    private ListModelList&lt;Pagamento&gt; pagamentoss&#10;    private ListModelList&lt;Parcela&gt; parcelas&#10;    private ListModelList&lt;Parcela&gt; entradas&#10;    private ListModelList&lt;Remissao&gt; remissoes&#10;    private ListModelList&lt;Parcela&gt; parcels&#10;    private ListModelList&lt;Saida&gt; saidas&#10;    private ListModelList&lt;Conta&gt; contas&#10;    private ListModelList&lt;Transacao&gt; tSaidas&#10;    private ListModelList&lt;Transacao&gt; tEntradas&#10;    private ListModelList&lt;Cliente&gt; clientes&#10;    private ListModelList&lt;Cliente&gt; clientess&#10;    private ListModelList&lt;Credito&gt; creditos&#10;    private ListModelList&lt;Credito&gt; creditoss&#10;    ClienteService clienteService&#10;    CreditoService creditoService&#10;    private Diario diario&#10;    private Parcela entrada&#10;    private Cliente selectedCliente&#10;    private Cliente selectedClientee&#10;    private Date dia&#10;    DiarioService diarioService&#10;    private Parcela parcela&#10;    private Parcela parcelaEntrada&#10;    private Saida saida&#10;    private Parcela sParcela&#10;    private String recibo&#10;    private Remissao remissao&#10;    private BigDecimal totalParcelas = 0.0&#10;    private BigDecimal totalSaidas = 0.0&#10;    ParcelaService parcelaService&#10;    SpringSecurityService springSecurityService&#10;      ContadorService contadorService&#10;    private  Utilizador utilizador&#10;    private  Conta contaCliente = new Conta()&#10;    private Remissao selectedRemissao&#10;&#10;    private  Conta selectedConta&#10;    private  Saida selectedSaida&#10;&#10;    @Command&#10;    @NotifyChange([&quot;clientes&quot;,&quot;selectedCliente&quot;,&quot;pagamentos&quot;,&quot;selectedCredito&quot;,&quot;creditos&quot;,&quot;selectedPagamento&quot;,&quot;filterCliente&quot;])&#10;    void doSearchCliente() {&#10;        info.value=&quot;&quot;&#10;        fecharEditor()&#10;        clientes.clear()&#10;        clientess.clear()&#10;        pagamentos.clear()&#10;        if(filterCliente.contains(&quot;/&quot;)){&#10;            selectedCredito = Credito.findByNumeroDoCredito(filterCliente)&#10;            if(selectedCredito){&#10;                creditos.add(selectedCredito)&#10;                selectedCliente = selectedCredito.cliente&#10;                showCreditos()&#10;                getSelectedCliente()&#10;                return&#10;            }else {&#10;               lb_credito.visible = false&#10;                creditos.clear()&#10;                info.value+=&quot;Crédito não indentificado !&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            }&#10;        }&#10;&#10;        List&lt;Cliente&gt; allItems = clienteService.findAllByName(filterCliente)&#10;        if (filterCliente != null &amp;&amp;! &quot;&quot;.equals(filterCliente))&#10;        {&#10;            for (Cliente item : allItems) {&#10;                if (item.nome.toLowerCase().indexOf(filterCliente.toLowerCase()) &gt;= 0 ||&#10;&#10;                        item.numeroDeIndentificao.indexOf(filterCliente) &gt;= 0) {&#10;                    clientes.add(item)&#10;                    clientess.add(item)&#10;                }&#10;            }&#10;            if(clientes.empty||clientess.empty){&#10;                lb_credito.visible = false&#10;                creditos.clear()&#10;                pagamentos.clear()&#10;                info.value+=&quot;Cliente não indentificado !&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            }&#10;        }&#10;    }&#10;&#10;    String getFilterCliente() {&#10;        return filterCliente&#10;    }&#10;&#10;    void setFilterCliente(String filterCliente) {&#10;        this.filterCliente = filterCliente&#10;    }&#10;&#10;    Pagamento getSelectedPagamentoo() {&#10;        return selectedPagamentoo&#10;    }&#10;&#10;    @NotifyChange([&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;,&quot;remissao&quot;,&quot;selectedRemissao&quot;])&#10;    void setSelectedPagamentoo(Pagamento selectedPagamentoo) {&#10;        this.selectedPagamentoo = selectedPagamentoo&#10;        selectedRemissao = null&#10;        remissao = new Remissao()&#10;    }&#10;&#10;    Credito getSelectedCreditoo() {&#10;        return selectedCreditoo&#10;    }&#10;&#10;    @NotifyChange([&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;,&quot;remissao&quot;,&quot;selectedRemissao&quot;,&quot;selectedCreditoo&quot;])&#10;    void setSelectedCreditoo(Credito selectedCreditoo) {&#10;        selectedRemissao = null&#10;        remissao = new Remissao()&#10;        this.selectedCreditoo = selectedCreditoo&#10;    }&#10;&#10;    Cliente getSelectedClientee() {&#10;        return selectedClientee&#10;    }&#10;&#10;    @NotifyChange([&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;selectedPagamento&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedCreditoo&quot;,&quot;selectedClientee&quot;,&quot;creditoss&quot;])&#10;    void setSelectedClientee(Cliente selectedClientee) {&#10;        sessionStorageService.cliente = selectedClientee&#10;        this.selectedClientee = selectedClientee&#10;       clientess.clear()&#10;        clientess.add(selectedClientee)&#10;    }&#10;&#10;    boolean getAllPagamentos() {&#10;        return allPagamentos&#10;    }&#10;&#10;    void setAllPagamentos(boolean allPagamentos) {&#10;        this.allPagamentos = allPagamentos&#10;    }&#10;    boolean getAllCreditos() {&#10;        return allCreditos&#10;    }&#10;&#10;    void setAllCreditos(boolean allCreditos) {&#10;        this.allCreditos = allCreditos&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;pagamentos&quot;,&quot;selectedCredito&quot;,&quot;info&quot;,&quot;allPagamentos&quot;,&quot;allCreditos&quot;])&#10;    void setAll() {&#10;        allPagamentos = !allPagamentos&#10;       getPagamentos()&#10;    }&#10;    @Command&#10;    @NotifyChange([&quot;creditos&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;allPagamentos&quot;,&quot;allCreditos&quot;,&quot;info&quot;])&#10;    void setAllC() {&#10;        allCreditos = !allCreditos&#10;        getCreditos()&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;allCreditos&quot;,&quot;allPagamentos&quot;,&quot;creditos&quot;,&quot;info&quot;])&#10;    def cleanAllCreditos(){&#10;        allCreditos = false&#10;        allPagamentos = false&#10;        info.value= &quot;&quot;&#10;        getCreditos()&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;allCreditos&quot;,&quot;allPagamentos&quot;,&quot;pagamentos&quot;,&quot;info&quot;])&#10;    def cleanAllPagamentos(){&#10;        info.value= &quot;&quot;&#10;        allPagamentos = false&#10;        getPagamentos()&#10;    }&#10;&#10;    @NotifyChange([&quot;creditos&quot;])&#10;    ListModelList&lt;Credito&gt; getCreditos() {&#10;        if(creditos==null){&#10;            creditos = new ListModelList&lt;Credito&gt;()&#10;        }&#10;        creditos.clear()&#10;&#10;        if(selectedCliente!=null){&#10;            if(allCreditos){&#10;                creditos = creditoService.findAllByCliente(selectedCliente)&#10;            }else&#10;            creditos = creditoService.findAllByClienteAndEmDivida(selectedCliente)&#10;        }&#10;        return creditos&#10;    }&#10;&#10;    ListModelList&lt;Credito&gt; getCreditoss() {&#10;        if(creditoss==null){&#10;            creditoss = new ListModelList&lt;Credito&gt;()&#10;        }&#10;        creditoss.clear()&#10;        if(selectedClientee!=null){&#10;            creditoss = Credito.findAllByClienteAndEmDivida(selectedClientee,true).sort{it.id}&#10;        }&#10;        return creditoss&#10;    }&#10;&#10;    Credito getSelectedCredito() {&#10;        return selectedCredito&#10;    }&#10;&#10;    @NotifyChange([&quot;pagamentos&quot;,&quot;selectedPagamento&quot;])&#10;    void setSelectedCredito(Credito selectedCredito) {&#10;        this.selectedCredito = selectedCredito&#10;        selectedPagamento = null&#10;       getPagamentos()&#10;&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;creditos&quot;,&quot;creditoss&quot;,&quot;selectedClientee&quot;,&quot;selectedCredito&quot;,&quot;selectedCliente&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;selectedPagamento&quot;])&#10;    def showPagamentos(){&#10;     //   lb_credito.visible = false&#10;        getPagamentos()&#10;    }&#10;    @Command&#10;    @NotifyChange([&quot;creditos&quot;,&quot;creditoss&quot;,&quot;selectedClientee&quot;,&quot;selectedCliente&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;])&#10;    def showCreditos(){&#10;        lb_credito.visible= true&#10;        lb_creditos.visible= true&#10;    }&#10;    Cliente getSelectedCliente() {&#10;        return selectedCliente&#10;    }&#10;&#10;&#10;    @NotifyChange([&quot;info&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;selectedPagamento&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedCreditoo&quot;,&quot;creditos&quot;,&quot;selectedCliente&quot;])&#10;    void setSelectedCliente(Cliente selectedCliente) {&#10;        info.value = &quot;&quot;&#10;        selectedCredito = null&#10;        selectedPagamento = null&#10;        sessionStorageService.parcela = null&#10;        sessionStorageService.credito = null&#10;        pagamentos.clear()&#10;        this.selectedCliente = selectedCliente&#10;        clientes.clear()&#10;        clientes.add(selectedCliente)&#10;    }&#10;&#10;    Remissao getSelectedRemissao() {&#10;        return selectedRemissao&#10;    }&#10;&#10;    void setSelectedRemissao(Remissao selectedRemissao) {&#10;        this.selectedRemissao = selectedRemissao&#10;    }&#10;&#10;    @NotifyChange([&quot;selectedConta&quot;,&quot;pagaments&quot;])&#10;   @Command&#10;   def getContaOrigem(){&#10;      selectedConta = Conta.findByCliente(parcelaEntrada.cliente)&#10;&#10;        System.println(selectedConta)&#10;        rw_co.visible= false&#10;   }&#10;&#10;&#10;&#10;    ListModelList&lt;Cliente&gt; getClientes() {&#10;        if(clientes==null){&#10;            clientes = new ListModelList&lt;Cliente&gt;()&#10;        }&#10;        return clientes&#10;    }&#10;&#10;    ListModelList&lt;Cliente&gt; getClientess() {&#10;        if(clientess==null){&#10;            clientess = new ListModelList&lt;Cliente&gt;()&#10;        }&#10;        return clientess&#10;    }&#10;&#10;    @NotifyChange(&quot;entrada&quot;)&#10;    Parcela getEntrada() {&#10;&#10;        return entrada&#10;    }&#10;&#10;    @NotifyChange([&quot;selectedPagamento&quot;,&quot;entrada&quot;])&#10;    void setEntrada(Parcela entrada) {&#10;        info.value= &quot;&quot;&#10;        this.entrada = entrada&#10;        sessionStorageService.entrada = entrada&#10;        if(selectedPagamento!=null&amp;&amp;entrada.pagamento==null){&#10;            bt_update_entrada.label=&quot;Alocar a &quot;+selectedPagamento.descricao+&quot; do(a) &quot;+selectedCredito.cliente.nome&#10;        }&#10;&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;selectedPagamento&quot;,&quot;entrada&quot;])&#10;    def updateEntrada(){&#10;        info.value=&quot;&quot;&#10;       entrada = Parcela.findById(entrada.id)&#10;        System.println(entrada.id)&#10;        Utilizador user = springSecurityService.currentUser as Utilizador&#10;        if(entrada.utilizador!=user){&#10;            if (!user.authorities.any { it.authority == &quot;PARCELA_UPDATE&quot; }) {&#10;                info.value+=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;        }&#10;&#10;        if(entrada.nomeDoCliente!=selectedCredito.cliente.nome){&#10;            info.value=&quot;O nome do cliente não confere! &quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            if (!user.authorities.any { it.authority == &quot;PARCELA_UPDATE&quot; }) {&#10;                info.value+=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;        }&#10;&#10;&#10;        if (entrada.valorPago&gt;selectedPagamento.totalEmDivida*(-1)){&#10;            info.value=&quot;O Valor a alocar não deve ser superior ao valor em dívida!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        if (entrada.pagamento!=null){&#10;            info.value=&quot;Este valor já foi alocado!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        try {&#10;            entrada.valorParcial = entrada.valorPago&#10;            entrada.pagamento = selectedPagamento&#10;            if(selectedPagamento.parcelas == null){&#10;                selectedPagamento.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#10;            }&#10;            selectedPagamento.parcelas.add(entrada)&#10;            entrada.merge(failOnError: true)&#10;            selectedPagamento.merge(failOnError: true)&#10;            Transferencia t = new Transferencia()&#10;            t.utilizador = utilizador&#10;            String descricao = entrada.descricao+&quot;-&quot;+entrada.id&#10;            Transferencia tr = Transferencia.findByDescricaoAndDiario(descricao,diario)&#10;          //  System.println(tr.origem)&#10;           // System.println(tr.destino)&#10;            t.origem = Conta.findByNumeroDaConta(selectedCliente.id.toString())&#10;            t.destino = Conta.findById(tr.origem.id)&#10;            t.descricao = &quot;Alocação de receb. em caixa&quot;+&quot;-&quot;+entrada.id&#10;            t.valor = entrada.valorParcial&#10;            t.diario = diario&#10;            t.save(failOnError: true)&#10;            Transacao tCredito = new Transacao()&#10;            Transacao tDebito = new Transacao()&#10;            tCredito.valor = entrada.valorParcial&#10;            tCredito.descricao=&quot;Alocação de receb. em caixa&quot;+&quot;-&quot;+entrada.id&#10;            tDebito.descricao =&quot;Alocação de rec. em caixa&quot;+&quot;-&quot;+entrada.id&#10;            tDebito.valor = entrada.valorParcial&#10;            tCredito.credito = true&#10;            tDebito.credito = false&#10;            def credora = Conta.findById(t.origem.id)&#10;            def devedora = Conta.findById(t.destino.id)&#10;            if (credora?.transacoes == null) {&#10;                credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;            }&#10;            if (devedora?.transacoes == null) {&#10;                devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;            }&#10;            tCredito.save(failOnError: true)&#10;            tDebito.save(failOnError: true)&#10;            credora.transacoes.add(tCredito)&#10;            devedora.transacoes.add(tDebito)&#10;            credora.merge(failOnError: true)&#10;            devedora.merge(failOnError: true)&#10;&#10;            info.value = &quot;O valor foi alocado com sucesso!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;        }catch(Exception e){&#10;            System.println(e.toString())&#10;            info.value = e.toString()&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;        }&#10;&#10;    }&#10;&#10;    ListModelList&lt;Parcela&gt; getEntradas() {&#10;&#10;        if(entradas ==null){&#10;            entradas = new ListModelList&lt;Parcela&gt;()&#10;        }&#10;        entradas.clear()&#10;        def parcelas = Parcela.findAllByDiario(diario)&#10;        for(Parcela p in parcelas){&#10;            if(p.pagamento==null){&#10;                entradas.add(p)&#10;            }&#10;        }&#10;        return entradas&#10;    }&#10;&#10;    Parcela getParcelaEntrada() {&#10;        return parcelaEntrada&#10;    }&#10;&#10;    void setParcelaEntrada(Parcela parcelaEntrada) {&#10;        this.parcelaEntrada = parcelaEntrada&#10;    }&#10;&#10;    Date getDia() {&#10;        return dia&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;dia&quot;])&#10;    void setDia(Date dia) {&#10;        this.dia = dia&#10;        sessionStorageService.setDia(dia)&#10;    }&#10;&#10;    BigDecimal getTotalParcelas() {&#10;        totalParcelas = 0.0&#10;        for(Parcela parcela in parcels){&#10;            totalParcelas +=parcela.valorPago&#10;        }&#10;        return totalParcelas&#10;    }&#10;&#10;    BigDecimal getTotalSaidas() {&#10;        totalSaidas = 0.0&#10;        for(Saida saida in saidas){&#10;            totalSaidas +=saida.valor&#10;        }&#10;        return totalSaidas&#10;    }&#10;    List&lt;Parcela&gt; getParcels() {&#10;        if (parcels==null){&#10;            parcels = new ListModelList&lt;Parcela&gt;(Parcela.findAllByValorPagoGreaterThanAndDiarioAndUtilizador(0.0,diario,utilizador))&#10;        }&#10;        return parcels&#10;    }&#10;&#10;    ListModelList&lt;Remissao&gt; getRemissoes() {&#10;        if(remissoes ==null){&#10;           remissoes = new ListModelList&lt;Remissao&gt;()&#10;        }&#10;        return remissoes&#10;    }&#10;&#10;    Remissao getRemissao() {&#10;        return remissao&#10;    }&#10;&#10;    void setRemissao(Remissao remissao) {&#10;        this.remissao = remissao&#10;    }&#10;&#10;    BigDecimal getSaldo() {&#10;        System.println(&quot;getTotalSaidas=&quot;+getTotalSaidas())&#10;        System.println(&quot;getTotalParcelas=&quot;+getTotalParcelas())&#10;        return getTotalParcelas()-getTotalSaidas()&#10;    }&#10;    List&lt;Saida&gt; getSaidas() {&#10;        if(saidas==null){&#10;            saidas = new ListModelList&lt;Saida&gt;(Saida.findAllByDiarioAndUtilizadorAndOrigem(diario,utilizador,contaCaixa))&#10;        }&#10;        return saidas&#10;    }&#10;    Saida getSelectedSaida() {&#10;        return selectedSaida&#10;    }&#10;&#10;&#10;    void setSelectedSaida(Saida selectedSaida) {&#10;        this.selectedSaida = selectedSaida&#10;    }&#10;&#10;    String getRecibo() {&#10;        return recibo&#10;    }&#10;&#10;    void setRecibo(String recibo) {&#10;        this.recibo = recibo&#10;    }&#10;&#10;&#10;&#10;&#10;    @Command&#10;    @NotifyChange([&quot;saida&quot;,'parcelaEntrada'])&#10;    def fecharCaixa(){&#10;        parcelaEntrada=null&#10;&#10;        getParcels()&#10;        getSaidas()&#10;&#10;       saida  = new Saida()&#10;&#10;        saida.valor = getSaldo()&#10;        saida.dataDePagamento = new Date()&#10;        saida.descricao =&quot;Feixo de caixa&quot;&#10;&#10;    }&#10;&#10;    @Command&#10;    def deleteSaida(){&#10;        try {&#10;            Transacao tCredito = new Transacao()&#10;            Transacao tDebito = new Transacao()&#10;            tCredito.valor = selectedSaida.valor&#10;            tCredito.descricao=&quot;Estorno&quot;&#10;            tDebito.descricao = &quot;Estorno&quot;&#10;            tDebito.valor = selectedSaida.valor&#10;            tCredito.credito = true&#10;            tDebito.credito = false&#10;            def credora = Conta.findById(selectedSaida.destino.id)&#10;            def devedora = Conta.findById(selectedSaida.origem.id)&#10;&#10;            tCredito.save(failOnError: true)&#10;            tDebito.save(failOnError: true)&#10;            credora.transacoes.add(tCredito)&#10;            devedora.transacoes.add(tDebito)&#10;            credora.merge(failOnError: true)&#10;            devedora.merge(failOnError: true)&#10;&#10;&#10;            selectedSaida.delete(failOnError: true)&#10;        }catch(Exception e){&#10;            System.println(e.toString())&#10;        }&#10;    }&#10;    @Command&#10;    def checkSelectedItem(){&#10;        if(parcela.formaDePagamento==&quot;transferencia bancária&quot;||parcela.formaDePagamento==&quot;deposito bancário&quot;){&#10;            rw_destino.visible =true&#10;            saida = new Saida()&#10;        }else {&#10;            rw_destino.visible = false&#10;        }&#10;    }&#10;    String getPagamento_id() {&#10;        return pagamento_id&#10;    }&#10;&#10;    ListModelList&lt;Transacao&gt; gettSaidas() {&#10;        if(tSaidas==null){&#10;            tSaidas = new ListModelList&lt;Transacao&gt;()&#10;        }&#10;        tSaidas?.clear()&#10;        if(contaCaixa?.id){&#10;            for(Transacao t in contaCaixa?.transacoes){&#10;                if (t?.credito){&#10;&#10;                    tSaidas?.add(t)&#10;                }&#10;&#10;            }&#10;        }&#10;        tSaidas.sort{it.dateCreated}&#10;        return tSaidas&#10;    }&#10;&#10;    ListModelList&lt;Transacao&gt; gettEntradas() {&#10;        if(tEntradas==null){&#10;            tSaidas = new ListModelList&lt;Transacao&gt;()&#10;        }&#10;        iEntradas.clear()&#10;        if(contaCaixa.id){&#10;            for(Transacao t in contaCaixa.transacoes){&#10;                if (t.credito){&#10;                    iEntradas.add(t)&#10;                }&#10;&#10;            }&#10;        }&#10;        return iEntradas&#10;    }&#10;&#10;    Conta getSelectedConta() {&#10;        return selectedConta&#10;    }&#10;&#10;    void setSelectedConta(Conta selectedConta) {&#10;        this.selectedConta = selectedConta&#10;    }&#10;&#10;    ListModelList&lt;Conta&gt; getContas() {&#10;        if(contas==null){&#10;            contas = new ListModelList&lt;Conta&gt;(Conta.findAllByFinalidadeOrFinalidade(&quot;conta_movimento&quot;,&quot;conta_capital&quot;))&#10;        }&#10;&#10;        return contas&#10;    }&#10;&#10;    Saida getSaida() {&#10;        return saida&#10;    }&#10;&#10;    void setSaida(Saida saida) {&#10;        this.saida = saida&#10;    }&#10;&#10;    Parcela getsParcela() {&#10;        return sParcela&#10;    }&#10;&#10;    void setsParcela(Parcela sParcela) {&#10;        this.sParcela = sParcela&#10;        sessionStorageService.parcela=sParcela&#10;        sessionStorageService.credito=selectedCredito&#10;    }&#10;&#10;    ListModelList&lt;Parcela&gt; getParcelas() {&#10;        if(parcelas==null){&#10;            parcelas = new ListModelList&lt;Parcela&gt;()&#10;        }&#10;        if(selectedPagamento.id!=null){&#10;            for(Parcela p in selectedPagamento.parcelas){&#10;                parcelas.add(p)&#10;            }&#10;        }&#10;        return parcelas&#10;    }&#10;    @NotifyChange(['contaCaixa','caixas'])&#10;    Conta getContaCaixa() {&#10;        return   Conta.findByUtilizadorAndFinalidade(utilizador,'conta_caixa')&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;saida&quot;,&quot;parcela&quot;,&quot;selectedPagamento&quot;,&quot;parcelaEntrada&quot;])&#10;    def addSaida(){&#10;     /*   bt_fechar_caixa.visible = false&#10;        dv_filtragem.visible = false&#10;        lb_pagamentos.visible = false*/&#10;        saida = new Saida()&#10;        saida.dataDePagamento = new Date()&#10;        saida.formaDePagamento = &quot;numerário&quot;&#10;        selectedPagamento = null&#10;        parcela = null&#10;        parcelaEntrada = null&#10;        remissao = null&#10;    }&#10;&#10;&#10;&#10;    @Command&#10;    @NotifyChange([&quot;saida&quot;,&quot;parcela&quot;,&quot;selectedPagamentoo&quot;,&quot;remissao&quot;])&#10;    def addRemissao(){&#10;        parcela = null&#10;        parcelaEntrada = null&#10;        saida = null&#10;        if(selectedPagamentoo==null){&#10;            info.value=&quot;Seleccione uma prestação!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        if(Pagamento.findById(selectedPagamentoo.id).pago){&#10;            info.value=&quot;Esta prestação já foi paga na totalidade!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        remissao =  new Remissao()&#10;        remissao.pagamento = selectedPagamento&#10;      // selectedPagamento = null&#10;&#10;    }&#10;    @Command&#10;    def printSaida(){&#10;&#10;    }&#10;    @Command&#10;    @NotifyChange(['contaCaixa','tSaidas',&quot;saidas&quot;])&#10;    def salvarSaida(){&#10;&#10;        if(Saida.findById(saida.id)){&#10;            info.value = &quot;Este Pagamento já foi lançado!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        if(0&gt;=saida.valor){&#10;            info.value = &quot;Valor inválido!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        getParcels()&#10;        getSaidas()&#10;        if(saida.valor&gt;getSaldo().setScale(2,RoundingMode.DOWN)){&#10;            info.value = &quot;O saldo de &quot;+getSaldo().setScale(2,RoundingMode.DOWN)+&quot;, em caixa  não cobre o valor de &quot;+saida.valor+&quot; ,que pretende dar saida!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        if(saida.dataDePagamento==null){&#10;            info.value = &quot;Data inválido!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        if(saida.formaDePagamento==null){&#10;            info.value = &quot;Forma de Pagamento não foi selecionado!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        if(contaCliente==null){&#10;            info.value = &quot;ESte cliente não tem conta!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            return&#10;        }&#10;        info.value = &quot;&quot;&#10;&#10;        if(contaCaixa==null){&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#10;            info.style =&quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            selectedPagamento=null&#10;            return&#10;        }&#10;&#10;        saida.utilizador = Utilizador.findById(utilizador.id)&#10;&#10;        if (saida.hasErrors()) {&#10;&#10;            return&#10;        }&#10;        saida.contaOrigem=contaCaixa.codigo&#10;        saida.contaDestino=selectedConta.codigo&#10;        saida.origem = contaCaixa&#10;        saida.destino = selectedConta&#10;        saida.diario = diario&#10;        saida.save(failOnError: true)&#10;        info.value = &quot;gravação feita com sucesso!&quot;&#10;        info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;&#10;        Transacao tCredito = new Transacao()&#10;        Transacao tDebito = new Transacao()&#10;        tCredito.valor = saida.valor&#10;        tCredito.descricao=saida.descricao+&quot;-&quot;+saida.formaDePagamento&#10;        tDebito.descricao = saida.descricao+&quot;-&quot;+saida.formaDePagamento&#10;        tDebito.valor = saida.valor&#10;        tCredito.credito = true&#10;        tDebito.credito = false&#10;        def credora = Conta.findById(contaCaixa.id)&#10;        def devedora = Conta.findById(selectedConta.id)&#10;        if (credora.transacoes == null) {&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        if (devedora.transacoes == null) {&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        tCredito.save(failOnError: true)&#10;        tDebito.save(failOnError: true)&#10;        credora.transacoes.add(tCredito)&#10;        devedora.transacoes.add(tDebito)&#10;        credora.merge(failOnError: true)&#10;        devedora.merge(failOnError: true)&#10;&#10;&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#10;        info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;        parcelaService.saidaInstance = saida&#10;        saidas.add(saida)&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange(['contaCaixa','tSaidas',&quot;entradas&quot;])&#10;    def salvarEntrada(){&#10;       try {&#10;           if(parcelaEntrada.nomeDoCliente==null){&#10;               info.value = &quot;Digite o nome do cliente!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               return&#10;           }&#10;           if(parcelaEntrada.dataDePagamento&gt;new Date()){&#10;               parcelaEntrada.dataDePagamento = new Date()&#10;               info.value = &quot;Data inválida!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;&#10;           }&#10;           if(Parcela.findById(parcelaEntrada.id)){&#10;               info.value = &quot;Este Pagamento já foi lançado!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               return&#10;           }&#10;&#10;           if(selectedConta==null){&#10;               info.value = &quot;Selecione uma conta Destino válido!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               return&#10;           }&#10;&#10;           if(0&gt;=parcelaEntrada.valorPago){&#10;               info.value = &quot;Valor inválido!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               return&#10;           }&#10;           if(parcelaEntrada.dataDePagamento==null){&#10;               info.value = &quot;Data inválido!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               return&#10;           }&#10;&#10;           if(parcelaEntrada.formaDePagamento==null){&#10;               info.value = &quot;Forma de Pagamento não foi selecionado!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               return&#10;           }&#10;           if(selectedConta==null){&#10;               info.value = &quot;Selecione a conta Origem!&quot;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               return&#10;           }&#10;           info.value = &quot;&quot;&#10;&#10;           if(contaCaixa==null){&#10;               info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#10;               info.style =&quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;               selectedPagamento=null&#10;               return&#10;           }&#10;           parcelaEntrada.setNumeroDoRecibo(contadorService.gerarNumeroDaParcela())&#10;           parcelaEntrada.diario = diario&#10;           Utilizador util = Utilizador.findById(utilizador.id)&#10;           parcelaEntrada.utilizador = util&#10;           parcelaEntrada.save(failOnError: true)&#10;         //  lancamentoEntrada(parcelaEntrada)&#10;           getEntradas()&#10;       }catch(Exception e){&#10;          info.value = e.toString()&#10;           info.style = &quot;color:red&quot;&#10;       }&#10;    }&#10;&#10;&#10;    @NotifyChange([&quot;selectedPagamento&quot;,'parcela',&quot;contaOrigem&quot;,&quot;saida&quot;,&quot;pagamento_id&quot;,&quot;parcelaEntrada&quot;,&quot;entradas&quot;])&#10;    @Command&#10;    addEntrada(){&#10;&#10;       /* bt_fechar_caixa.visible =false&#10;        dv_filtragem.visible = false&#10;        lb_pagamentos.visible = false*/&#10;        info.value=&quot;&quot;&#10;        if(utilizador?.contas==null){&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#10;            info.style =&quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            selectedPagamento=null&#10;            return&#10;        }&#10;&#10;&#10;&#10;        parcelaEntrada = new Parcela()&#10;        parcelaEntrada.diario = diario&#10;        parcelaEntrada.dataDePagamento = new Date()&#10;        parcelaEntrada.formaDePagamento = &quot;numerário&quot;&#10;        parcelaEntrada.descricao = &quot;Recebimento em caixa&quot;&#10;        if(selectedCliente!=null){&#10;            parcelaEntrada.nomeDoCliente= selectedCliente.nome&#10;        }&#10;        saida = null&#10;        remissao = null&#10;&#10;&#10;&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;selectedCreditoo&quot;,&quot;creditoss&quot;,&quot;remissoes&quot;,&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;])&#10;    def redemirCredito(){&#10;        remissao = new Remissao()&#10;&#10;        try {&#10;            remissao.valorDaRemissao = selectedCreditoo.valorEmDivida*(-1)&#10;            Utilizador user = springSecurityService.currentUser as Utilizador&#10;            if (!user.authorities.any { it.authority == &quot;REMISSAO_CREATE&quot; }) {&#10;                info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;            System.println(&quot;feita a validacao do user&quot;)&#10;            def contaDb = Conta.findByFinalidadeAndDesignacaoDaConta(&quot;conta_movimento&quot;, &quot;PERDAO_DA_DIVIDA&quot;)&#10;            if(contaDb==null&amp;&amp;!(contaDb?.ativo)){&#10;                info.value=&quot;Criar uma conta de movimento, associado a uma conta intregradora do passivo ,  com a designão 'PERDAO_DA_DIVIDA'!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;&#10;            if(Remissao.findById(remissao.id)){&#10;                info.value=&quot;Esta remissoão já existe na base de dados!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;            if(remissao.valorDaRemissao&gt;selectedCreditoo.valorEmDivida*(-1)){&#10;                info.value=&quot;O valor da remissão não pode ser superior ao valor em dívida!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                remissao.valorDaRemissao = selectedCreditoo.valorEmDivida*(-1)&#10;                return&#10;            }&#10;            if(remissao.valorDaRemissao&lt;0){&#10;                info.value=&quot;O valor da remissão não pode ser negativo!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                remissao.valorDaRemissao = remissao.valorDaRemissao*(-1)&#10;                return&#10;            }&#10;            remissao.diario = diario&#10;            remissao.utilizador =user&#10;            remissao.contaOrigem = Conta.findById(contaDb.id)&#10;            /*if(selectedPagamentoo==null){&#10;                info.value=&quot;Selecione pelo menos uma prestação!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }*/&#10;            Pagamento pagamento = Pagamento.findById(pagamentoss.first().id)&#10;            remissao.pagamento = pagamento&#10;            if(pagamento.remissoes==null){&#10;                pagamento.remissoes = new ArrayList&lt;Remissao&gt;()&#10;            }&#10;            remissao.createdDate = new Date()&#10;            pagamento.remissoes.add(remissao)&#10;            remissao.save()&#10;            Remissao remissaoDb = Remissao.findById(remissao.id)&#10;            System.println(&quot;remissaoDb==&quot;+remissaoDb)&#10;&#10;            if(remissaoDb!=null){&#10;                System.println(&quot;Remissão gravado com sucesso!&quot;)&#10;                info.value=&quot;Remissão gravado co sucesso!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                Transacao tCredito = new Transacao()&#10;                Transacao tDebito = new Transacao()&#10;                tCredito.valor = remissaoDb.valorDaRemissao&#10;                tCredito.descricao=remissaoDb.descricao+&quot;-&quot;+remissao.id&#10;                tDebito.descricao = remissaoDb.descricao+&quot;-&quot;+remissao&#10;                tDebito.valor = remissaoDb.valorDaRemissao&#10;                tCredito.credito = true&#10;                tDebito.credito = false&#10;                def credora = Conta.findById(contaDb.id)&#10;                def devedora = Conta.findByNumeroDaConta(pagamento.credito.cliente.id.toString())&#10;                if (credora?.transacoes == null) {&#10;                    credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;                }&#10;                if (devedora?.transacoes == null) {&#10;                    devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;                }&#10;                tCredito.save(failOnError: true)&#10;                tDebito.save(failOnError: true)&#10;                credora.transacoes.add(tCredito)&#10;                devedora.transacoes.add(tDebito)&#10;                credora.merge(failOnError: true)&#10;                devedora.merge(failOnError: true)&#10;                info.value = &quot;Operações feitas com sucesso!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;&#10;                //addRemissao()&#10;                selectedRemissao = Remissao.findById(remissao.id)&#10;                remissoes.add(selectedRemissao)&#10;                pagamentoss.clear()&#10;                selectedCreditoo=null&#10;&#10;                // remissao =null&#10;                // fecharEditor()&#10;&#10;            }else {&#10;                info.value=&quot;Erro na na gravação da remissão!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            }&#10;&#10;&#10;        }catch(SQLException e){&#10;            System.println(e.toString())&#10;        }&#10;    }&#10;&#10;    @NotifyChange([&quot;remissoes&quot;,&quot;remissao&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedRemissao&quot;])&#10;    @Command&#10;    def salvarRemissao(){&#10;&#10;        try {&#10;            Utilizador user = springSecurityService.currentUser as Utilizador&#10;            if (!user.authorities.any { it.authority == &quot;REMISSAO_CREATE&quot; }) {&#10;                info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;            System.println(&quot;feita a validacao do user&quot;)&#10;            def contaDb = Conta.findByFinalidadeAndDesignacaoDaConta(&quot;conta_movimento&quot;, &quot;PERDAO_DA_DIVIDA&quot;)&#10;            if(contaDb==null&amp;&amp;!(contaDb?.ativo)){&#10;                info.value=&quot;Criar uma conta de movimento, associado a uma conta intregradora do passivo ,  com a designão 'PERDAO_DA_DIVIDA'!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;&#10;            if(Remissao.findById(remissao.id)){&#10;                info.value=&quot;Esta remissoão já existe na base de dados!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;            if(remissao.valorDaRemissao&gt;Pagamento.findById(selectedPagamentoo.id).getTotalEmDivida()*(-1)){&#10;                info.value=&quot;O valor da remissão não pode ser superior ao valor em dívida!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                remissao.valorDaRemissao = Pagamento.findById(selectedPagamentoo.id).getTotalEmDivida()*(-1)&#10;&#10;                return&#10;            }&#10;            if(remissao.valorDaRemissao&lt;0){&#10;                info.value=&quot;O valor da remissão não pode ser negativo!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                remissao.valorDaRemissao = remissao.valorDaRemissao*(-1)&#10;                return&#10;            }&#10;            remissao.diario = diario&#10;            remissao.utilizador =user&#10;            remissao.contaOrigem = Conta.findById(contaDb.id)&#10;            Pagamento pagamento = Pagamento.findById(selectedPagamentoo.id)&#10;            remissao.pagamento = pagamento&#10;            if(pagamento.remissoes==null){&#10;                pagamento.remissoes = new ArrayList&lt;Remissao&gt;()&#10;            }&#10;            remissao.createdDate = new Date()&#10;            pagamento.remissoes.add(remissao)&#10;            remissao.save()&#10;            Remissao remissaoDb = Remissao.findById(remissao.id)&#10;            System.println(&quot;remissaoDb==&quot;+remissaoDb)&#10;&#10;            if(remissaoDb!=null){&#10;                System.println(&quot;Remissão gravado com sucesso!&quot;)&#10;                info.value=&quot;Remissão gravado co sucesso!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                Transacao tCredito = new Transacao()&#10;                Transacao tDebito = new Transacao()&#10;                tCredito.valor = remissaoDb.valorDaRemissao&#10;                tCredito.descricao=remissaoDb.descricao+&quot;-&quot;+remissao.id&#10;                tDebito.descricao = remissaoDb.descricao+&quot;-&quot;+remissao&#10;                tDebito.valor = remissaoDb.valorDaRemissao&#10;                tCredito.credito = true&#10;                tDebito.credito = false&#10;                def credora = Conta.findById(contaDb.id)&#10;                def devedora = Conta.findByNumeroDaConta(selectedPagamentoo.credito.cliente.id.toString())&#10;                if (credora?.transacoes == null) {&#10;                    credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;                }&#10;                if (devedora?.transacoes == null) {&#10;                    devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;                }&#10;                tCredito.save(failOnError: true)&#10;                tDebito.save(failOnError: true)&#10;                credora.transacoes.add(tCredito)&#10;                devedora.transacoes.add(tDebito)&#10;                credora.merge(failOnError: true)&#10;                devedora.merge(failOnError: true)&#10;                info.value = &quot;Operações feitas com sucesso!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                remissoes.add(remissao)&#10;                &#10;               //addRemissao()&#10;                selectedRemissao = Remissao.findById(remissao.id)&#10;               // remissao =null&#10;               // fecharEditor()&#10;&#10;            }else {&#10;                info.value=&quot;Erro na na gravação da remissão!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;            }&#10;&#10;&#10;        }catch(Exception e){&#10;            System.println(e.toString())&#10;        }&#10;    }&#10;    @Command&#10;    def printRecibo(){&#10;        parcelaService.parcelaInstance=parcela&#10;        parcelaService.creditoInstance=selectedCredito&#10;      //  Executions.sendRedirect(&quot;/parcela/printParcela/&quot;)&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;pagamentos&quot;])&#10;    def showAllPagamentos(){&#10;&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange(['parcelas','selectedCredito','parcela','selectedPagamento','pagamentos','pagamento','contaCaixa','contaCliente','tEntradas'])&#10;    def salvarParcela(){&#10;        if(settingsService.getSettings().pagamentosEmOrdem){&#10;             def pagamentos = Pagamento.findAllByCredito(selectedCredito).sort{it.id}&#10;            for(Pagamento pagamento in pagamentos){&#10;                if(!pagamento.pago){&#10;                    if(selectedPagamento.id&gt;pagamento.id){&#10;                        info.value=&quot;Por favor efetue o pagamento da &quot;+pagamento.descricao+&quot; que é anterior a esta e ainda não foi paga!&quot;&#10;                        info.style =&quot;color:red;font-weight;font-size:12pt;background:back&quot;&#10;                        selectedPagamento = pagamento&#10;                    }&#10;                }&#10;&#10;            }&#10;        }&#10;&#10;&#10;        try {&#10;            if(parcela.dataDePagamento&gt;new Date()){&#10;                parcela.dataDePagamento = new Date()&#10;                info.value = &quot;Data inválida!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;&#10;            }&#10;            if(Parcela.findById(parcela.id)){&#10;                info.value = &quot;Este Pagamento já foi lançado!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;            if(parcela.formaDePagamento==&quot;transferencia bancária&quot;||parcela.formaDePagamento==&quot;deposito bancário&quot;){&#10;                if(selectedConta==null){&#10;                    info.value = &quot;Selecione uma conta Destino válido!&quot;&#10;                    info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                    return&#10;                }&#10;            }&#10;            if(0&gt;=parcela.valorPago){&#10;                info.value = &quot;Valor inválido!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;            if(parcela.dataDePagamento==null){&#10;                info.value = &quot;Data inválido!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#10;                return&#10;            }&#10;            if(parcela.formaDePagamento==null){&#10;                info.value = &quot;Forma de Pagamento não foi selecionado!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;                return&#10;            }&#10;            if(contaCliente==null){&#10;                info.value = &quot;ESte cliente não tem conta!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;                return&#10;            }&#10;            info.value = &quot;&quot;&#10;            if(selectedPagamento.pago){&#10;                info.value = &quot;Esta Parcela já foi paga na Totalidade!&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;                return&#10;            }&#10;            if(contaCaixa==null){&#10;                info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#10;                info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;                selectedPagamento=null&#10;                return&#10;            }&#10;            List&lt;Pagamento&gt; pagamentoss= new LinkedList&lt;Pagamento&gt;(Pagamento.findAllByCredito(selectedCredito))&#10;            parcela.setNumeroDoRecibo(contadorService.gerarNumeroDaParcela())&#10;            Pagamento pagamento = Pagamento.findById(selectedPagamento.id)&#10;            parcela.pagamento = pagamento&#10;            parcela.diario = diario&#10;            Utilizador util = Utilizador.findById(utilizador.id)&#10;            parcela.utilizador = util&#10;            BigDecimal totalEmDivida = parcela.pagamento.totalEmDivida*(-1)&#10;            BigDecimal valorParcial = parcela.valorPago&#10;            if(parcela.valorPago&gt;totalEmDivida){&#10;&#10;                BigDecimal valor = parcela.valorPago - totalEmDivida&#10;                parcela.valorParcial = totalEmDivida&#10;                System.println(&quot;valor remanescente&quot;+valor)&#10;                BigDecimal totalCreditoDivida = 0.0&#10;                pagamentoss.each {totalCreditoDivida+=it.totalEmDivida}&#10;                if(valor&gt; totalCreditoDivida*(-1)){&#10;                    info.value = &quot;O valor remanescente (&quot; +valor+ &quot;)não deve ser maior que o total em dívida (&quot;+ totalCreditoDivida+&quot;) das prestações!&quot;&#10;                    info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;&#10;                    return&#10;                }&#10;                parcela.descricao+=&quot;*&quot;&#10;                System.println(valor)&#10;                if(pagamento.parcelas==null){&#10;                    pagamento.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#10;                }&#10;&#10;                pagamento.parcelas.add(parcela)&#10;                parcela.save(failOnError: true)&#10;                pagamento.merge(failOnError: true)&#10;              //  lancamentos(parcela)&#10;&#10;&#10;               // System.println(pagamentoss)&#10;                for(int x=0;x&lt;pagamentoss.size(); x++){&#10;                    if(valor&gt;0){&#10;                        Pagamento pagamento1 = Pagamento.findById(pagamentoss[x].id)&#10;&#10;                        if(!pagamento1.getPago()){&#10;                            if(pagamento1.totalEmDivida*(-1)&gt;=valor){&#10;                                Parcela parcela1 = new Parcela()&#10;                                parcela1.diario = diario&#10;                                parcela1.pagamento = pagamento1&#10;                                parcela1.valorParcial = valor&#10;                                parcela1.dataDePagamento = parcela.dataDePagamento&#10;                                parcela1.formaDePagamento = parcela.formaDePagamento&#10;                                valor = 0&#10;                                parcela1.descricao=&quot;*Amortização da dívida*&quot;+selectedPagamento.id&#10;                                parcela1.numeroDoRecibo=parcela.numeroDoRecibo&#10;                                parcela1.utilizador = util&#10;                                if(pagamento1.parcelas==null){&#10;                                    pagamento1.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#10;                                }&#10;&#10;                                pagamento1.parcelas.add(parcela1)&#10;                                parcela1.save(failOnError: true)&#10;                                pagamento1.merge(failOnError: true)&#10;                               // lancamentos(parcela1)&#10;&#10;&#10;                            }else {&#10;&#10;                                Parcela parcela2 = new Parcela()&#10;                                parcela2.diario = diario&#10;                                parcela2.pagamento = pagamento1&#10;                                valor-=pagamento1.totalEmDivida*(-1)&#10;                                parcela2.valorParcial = pagamento1.totalEmDivida*(-1)&#10;                                parcela2.dataDePagamento = parcela.dataDePagamento&#10;                                parcela2.formaDePagamento = parcela.formaDePagamento&#10;                                parcela2.descricao=&quot;*Amortização da dívida*&quot;+selectedPagamento.id&#10;                                parcela2.numeroDoRecibo = parcela.numeroDoRecibo&#10;                                parcela2.utilizador = util&#10;                                if(pagamento1.parcelas==null){&#10;                                    pagamento1.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#10;                                }&#10;&#10;                                pagamento1.parcelas.add(parcela2)&#10;                                parcela2.save(failOnError: true)&#10;                                pagamento1.merge(failOnError: true)&#10;                               // lancamentos(parcela2)&#10;&#10;&#10;&#10;                            }&#10;                        }&#10;                    }else break&#10;&#10;                }&#10;&#10;&#10;            }else {&#10;                if(pagamento.parcelas==null){&#10;                    pagamento.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#10;                }&#10;&#10;                pagamento.parcelas.add(parcela)&#10;                parcela.valorParcial = parcela.valorPago&#10;                parcela.save(failOnError: true)&#10;                pagamento.merge(failOnError: true)&#10;              //  lancamentos(parcela)&#10;&#10;            }&#10;&#10;            if(parcela.formaDePagamento==&quot;transferencia bancária&quot;||parcela.formaDePagamento==&quot;deposito bancário&quot;){&#10;                saida.formaDePagamento = parcela.formaDePagamento&#10;                saida.valor = valorParcial&#10;                saida.dataDePagamento = parcela.dataDePagamento&#10;                saida.descricao=parcela.descricao&#10;&#10;                salvarSaida()&#10;            }&#10;&#10;            sessionStorageService.parcela = parcela&#10;            sessionStorageService.credito = selectedCredito&#10;            info.value = &quot;Pagamento efetivado com sucesso!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            bt_salvar.label = &quot;Pago!&quot;&#10;&#10;          //  selectedPagamento = Pagamento.findById(selectedPagamento.id)&#10;           // Executions.sendRedirect(&quot;/parcela/printParcela/&quot;)&#10;        }catch(Exception e){&#10;            info.value = &quot;Erro na gravação dos dados!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            System.println(e.toString())&#10;        }&#10;&#10;    }&#10;    def lancamentos(Parcela parcel){&#10;&#10;        Transferencia t = new Transferencia()&#10;        t.utilizador = utilizador&#10;        t.origem = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#10;        t.destino = Conta.findById(contaCaixa.id)&#10;        t.descricao = parcel.descricao+&quot;-&quot;+parcela.formaDePagamento&#10;        t.valor = parcel.valorParcial&#10;        t.diario = diario&#10;        t.save(failOnError: true)&#10;        Transacao tCredito = new Transacao()&#10;        Transacao tDebito = new Transacao()&#10;        tCredito.valor = parcel.valorParcial&#10;        tCredito.descricao=parcel.descricao+&quot;-&quot;+parcela.formaDePagamento&#10;        tDebito.descricao = parcel.descricao+&quot;-&quot;+parcela.formaDePagamento&#10;        tDebito.valor = parcel.valorParcial&#10;        tCredito.credito = true&#10;        tDebito.credito = false&#10;        def credora = Conta.findById(contaCliente.id)&#10;        def devedora = Conta.findById(contaCaixa.id)&#10;        if (credora?.transacoes == null) {&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        if (devedora?.transacoes == null) {&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        tCredito.save(failOnError: true)&#10;        tDebito.save(failOnError: true)&#10;        credora.transacoes.add(tCredito)&#10;        devedora.transacoes.add(tDebito)&#10;        credora.merge(failOnError: true)&#10;        devedora.merge(failOnError: true)&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#10;        info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;    }&#10;    def lancamentoEntrada(Parcela parcel){&#10;&#10;        Transferencia t = new Transferencia()&#10;        t.utilizador = utilizador&#10;        t.parcela = parcel&#10;        t.origem = Conta.findById(selectedConta.id)&#10;        t.destino = Conta.findById(contaCaixa.id)&#10;        t.descricao = parcel.descricao+&quot;-&quot;+parcel.id&#10;        t.valor = parcel.valorPago&#10;        t.diario = diario&#10;        t.save(failOnError: true)&#10;        Transacao tCredito = new Transacao()&#10;        Transacao tDebito = new Transacao()&#10;        tCredito.valor = parcel.valorPago&#10;        tCredito.descricao=parcel.descricao+&quot;-&quot;+parcel.id&#10;        tDebito.descricao = parcel.descricao+&quot;-&quot;+parcel.id&#10;        tDebito.valor = parcel.valorPago&#10;        tCredito.credito = true&#10;        tDebito.credito = false&#10;        def credora = Conta.findById(selectedConta.id)&#10;        def devedora = Conta.findById(contaCaixa.id)&#10;        if (credora?.transacoes == null) {&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        if (devedora?.transacoes == null) {&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        tCredito.save(failOnError: true)&#10;        tDebito.save(failOnError: true)&#10;        credora.transacoes.add(tCredito)&#10;        devedora.transacoes.add(tDebito)&#10;        credora.merge(failOnError: true)&#10;        devedora.merge(failOnError: true)&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#10;        info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;    }&#10;    def lancarRemissao(Remissao remis){&#10;&#10;        Transferencia t = new Transferencia()&#10;        t.utilizador = utilizador&#10;        t.destino = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#10;        t.origem = Conta.findById(selectedConta.id)&#10;        t.descricao = remis.descricao+&quot;-&quot;+remissao.id&#10;        t.valor = remis.valorDaRemissao&#10;        t.diario = diario&#10;        t.save(failOnError: true)&#10;        Transacao tCredito = new Transacao()&#10;        Transacao tDebito = new Transacao()&#10;        tCredito.valor = remis.valorDaRemissao&#10;        tCredito.descricao=remis.descricao+&quot;-&quot;+remis.id&#10;        tDebito.descricao = remis.descricao+&quot;-&quot;+remissao&#10;        tDebito.valor = remis.valorDaRemissao&#10;        tCredito.credito = true&#10;        tDebito.credito = false&#10;        def credora = Conta.findById(selectedConta.id)&#10;        def devedora = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#10;        if (credora?.transacoes == null) {&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        if (devedora?.transacoes == null) {&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;        }&#10;        tCredito.save(failOnError: true)&#10;        tDebito.save(failOnError: true)&#10;        credora.transacoes.add(tCredito)&#10;        devedora.transacoes.add(tDebito)&#10;        credora.merge(failOnError: true)&#10;        devedora.merge(failOnError: true)&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#10;        info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;    }&#10;    Utilizador getUtilizador() {&#10;        utilizador = springSecurityService.currentUser as Utilizador&#10;        return utilizador&#10;    }&#10;&#10;    Conta getContaCliente() {&#10;       return contaCliente&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange(['selectedPagamento','caixas','contaCaixa'])&#10;&#10;    def verificarCondicoes(){&#10;        info.value= &quot;&quot;&#10;       // def pagamentos = Pagamento.findAllByCredito(selectedCredito)&#10;       // def totalCreditoEmDivida = 0.0&#10;      //  pagamentos.each {totalCreditoEmDivida+=it.totalEmDivida}&#10;        /*if(parcela.valorPago&gt;selectedCredito.valorEmDivida*(-1)){&#10;            info.value = &quot;O valor alocado (&quot; +parcela.valorPago +&quot;) não deve ser maior que o total em dívida (&quot;+ selectedCredito.valorEmDivida +&quot;) das prestações!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            parcela.valorPago = selectedCredito.valorEmDivida*(-1)&#10;            return&#10;        }*/&#10;        if(selectedPagamento.pago){&#10;            info.value = &quot;Esta Parcela já foi paga na Totalidade!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            return&#10;        }&#10;        if(selectedPagamento.totalEmDivida.setScale(2, RoundingMode.HALF_EVEN)*(-1)&gt;parcela.valorPago.setScale(2, RoundingMode.HALF_EVEN)){&#10;            info.value = &quot;O valor não cobre o total em dívida&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;        }&#10;        if(selectedPagamento.totalEmDivida.setScale(2, RoundingMode.HALF_EVEN)*(-1)==parcela.valorPago.setScale(2, RoundingMode.HALF_EVEN)){&#10;            info.value = &quot;&quot;&#10;            info.style = &quot;color:red;font-weight,font-size:14pt;background:back&quot;&#10;        }&#10;        if(selectedPagamento.totalEmDivida.setScale(2, RoundingMode.HALF_EVEN)*(-1)&lt;parcela.valorPago.setScale(2,RoundingMode.HALF_EVEN)){&#10;            System.println(selectedPagamento.totalEmDivida*(-1)-parcela.valorPago)&#10;            info.value = &quot;O valor é superior ao valor em dívida desta prestação&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;        }&#10;    }&#10;&#10;    @Command&#10;    def cleanInfo(){&#10;        info.value=&quot;&quot;&#10;    }&#10;    @Command&#10;    @NotifyChange(['selectedPagamento',&quot;parcela&quot;,&quot;selectedCliente&quot;])&#10;    def calcularMoras(){&#10;        pagamentoService.calcularMoras(selectedPagamento,parcela)&#10;        verificarCondicoes()&#10;    }&#10;&#10;&#10;&#10;    Parcela getParcela() {&#10;        return parcela&#10;    }&#10;&#10;    void setParcela(Parcela parcela) {&#10;        this.parcela = parcela&#10;    }&#10;&#10;    @NotifyChange(['selectedPagamento','saida','parcelaEntrada',&quot;remissao&quot;,&quot;pagamentos&quot;])&#10;    @Command&#10;    void fecharEditor(){&#10;        info.value = &quot;&quot;&#10;        selectedPagamento=null&#10;        saida= null&#10;        parcelaEntrada = null&#10;        bt_fechar_caixa.visible =true&#10;        dv_filtragem.visible = true&#10;        lb_pagamentos.visible = true&#10;        remissao = null&#10;        pagamentos.clear()&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange(['selectedPagamentoo','selectedRemissao','remissoes',&quot;selectedCreditoo&quot;,&quot;pagamentoss&quot;])&#10;    def fecharEditorRemissao(){&#10;        selectedPagamentoo=null&#10;        remissao = null&#10;    }&#10;    @Command&#10;    @NotifyChange([&quot;diario&quot;])&#10;    def mudarDiario(){&#10;        diario = getDiario()&#10;        if(diario.estado ==&quot;pendente&quot;){&#10;            if(diarioService.findByEstado(&quot;aberto&quot;)){&#10;                diario = diarioService.findByEstado(&quot;aberto&quot;)&#10;                bt_diario.style = &quot;background:#7fb3d5;font-size:26px&quot;&#10;            }&#10;&#10;        }else {&#10;            if(diarioService.findByEstado(&quot;pendente&quot;)){&#10;                diario = diarioService.findByEstado(&quot;pendente&quot;)&#10;                bt_diario.style = &quot;background:#f1948a;font-size:26px&quot;&#10;            }&#10;&#10;        }&#10;    }&#10;    Diario getDiario() {&#10;        return diario&#10;    }&#10;&#10;    String getId() {&#10;        return id&#10;    }&#10;&#10;    void setId(String id) {&#10;        this.id = id&#10;    }&#10;&#10;    Pagamento getSelectedPagamento() {&#10;&#10;        return selectedPagamento&#10;    }&#10;&#10;    void setSelectedPagamento(Pagamento selectedPagamento) {&#10;        bt_salvar.label=&quot;Salvar&quot;&#10;        this.selectedPagamento = selectedPagamento&#10;    }&#10;&#10;    String getFilter() {&#10;        return filter&#10;    }&#10;&#10;    void setFilter(String filter) {&#10;        this.filter = filter&#10;    }&#10;&#10;    @Init init() {&#10;        getUtilizador()&#10;        diario = diarioService.getDiario()&#10;      //  sessionStorageService.parcela=null&#10;      //  sessionStorageService.credito = null&#10;       // utilizador = Utilizador.findById(springSecurityService.principal?.id)&#10;&#10;       /* if(pagamentoService.pagamentoInstance?.id!=null){&#10;          pagamento_id=pagamentoService.pagamentoInstance.numeroDePagamento&#10;&#10;        }*/&#10;&#10;&#10;    }&#10;    @Command&#10;    @NotifyChange(['selectedPagamento',&quot;parcela&quot;,&quot;contaCliente&quot;,&quot;contaCaixa&quot;,&quot;saida&quot;,&quot;diario&quot;])&#10;    def  showSelectedPagamento(){&#10;        info.value = &quot;&quot;&#10;        diario = diarioService.getDiario()&#10;        if(utilizador?.contas==null){&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            selectedPagamento=null&#10;            return&#10;        }&#10;&#10;        parcela = new Parcela()&#10;        parcela.dataDePagamento = new Date()&#10;        parcela.formaDePagamento = &quot;numerário&quot;&#10;        parcela.descricao = &quot;Amortização da dívida&quot;&#10;        saida = null&#10;        remissao = null&#10;      // contaCliente = Conta.findByNumeroDaConta(selectedPagamento.credito.cliente.id.toString())&#10;        contaCliente = contadorService.getByNumeroDacoonta(selectedCliente.id.toString())&#10;      //  def pagamentos = Pagamento.findAllByCredito(selectedPagamento.credito)&#10;        def pagamentos = pagamentoService.getByCredito(selectedCredito)&#10;        for(Pagamento pagamento in pagamentos){&#10;            if(!pagamento.pago){&#10;                if(selectedPagamento.id&gt;pagamento.id){&#10;                    info.value=&quot;Por favor efetue o pagamento da &quot;+pagamento.descricao+&quot; que é anterior a esta e ainda não foi paga!&quot;&#10;                    info.style =&quot;color:red;font-weight;font-size:12pt;background:back&quot;&#10;                }&#10;            }&#10;&#10;        }&#10;&#10;&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;remissao&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedRemissao&quot;])&#10;    def showSelectedPag(){&#10;        remissao = new Remissao()&#10;        selectedPagamentoo.getTotalEmDivida()&#10;        selectedRemissao = null&#10;    }&#10;    @Command&#10;    @NotifyChange([&quot;selectedPagamento&quot;,'parcela',&quot;contaCliente&quot;,&quot;saida&quot;,&quot;pagamento_id&quot;])&#10;    findItem(){&#10;        info.value=&quot;&quot;&#10;           if(utilizador?.contas==null){&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            selectedPagamento=null&#10;            return&#10;        }&#10;&#10;&#10;        if(contaCaixa==null){&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            selectedPagamento=null&#10;            return&#10;        }&#10;        parcela = new Parcela()&#10;        parcela.diario = diario&#10;        parcela.dataDePagamento = new Date()&#10;        parcela.formaDePagamento = &quot;numerário&quot;&#10;        parcela.descricao = &quot;Amortização da dívida&quot;&#10;        saida = null&#10;        remissao = null&#10;        selectedPagamento = Pagamento.findByNumeroDePagamento(id)&#10;&#10;&#10;        if(selectedPagamento?.id!=null){&#10;            //    Executions.sendRedirect(&quot;/pagamento/show/&quot;+selectedPagamento.id)&#10;            pagamentoService.calcularMoras(selectedPagamento)&#10;            contaCliente = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#10;            pagamento_id=selectedPagamento.numeroDePagamento&#10;            def pagamentos = Pagamento.findAllByCredito(selectedCredito)&#10;            for(Pagamento pagamento in pagamentos){&#10;                if(!pagamento.pago){&#10;                    if(selectedPagamento.id&gt;pagamento.id){&#10;                        info.value=&quot;Por favor efetue o pagamento da &quot;+pagamento.descricao+&quot; que é anterior a esta e ainda não foi paga!&quot;&#10;                        info.style =&quot;color:red;font-weight;font-size:12pt;background:back&quot;&#10;                    }&#10;                }&#10;&#10;            }&#10;        }&#10;    }&#10;&#10;&#10;    ListModelList&lt;Pagamento&gt; getPagamentos() {&#10;        if(pagamentos==null){&#10;            pagamentos = new ArrayList&lt;&gt;()&#10;        }&#10;        if(allPagamentos){&#10;            pagamentos = Pagamento.findAllByCredito(selectedCredito).sort{it.id}&#10;        }else&#10;            pagamentos = Pagamento.findAllByCreditoAndPago(selectedCredito,false).sort{it.id}&#10;        return pagamentos&#10;    }&#10;&#10;    ListModelList&lt;Pagamento&gt; getPagamentoss() {&#10;        if(pagamentoss==null){&#10;            pagamentoss = new ArrayList&lt;&gt;()&#10;        }&#10;            pagamentoss = Pagamento.findAllByCreditoAndPago(selectedCreditoo,false).sort{it.id}&#10;        return pagamentoss&#10;    }&#10;&#10;    @NotifyChange([&quot;parcelas&quot;,&quot;sParcela&quot;])&#10;    @Command&#10;    void  deleteRecibo(){&#10;&#10;        try {&#10;            Utilizador user = springSecurityService.currentUser as Utilizador&#10;            if (!user.authorities.any { it.authority == &quot;PARCELA_DELETE&quot; }) {&#10;                info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;                return&#10;            }&#10;            selectedPagamento.parcelas.remove(sParcela)&#10;            selectedPagamento.merge(failOnError: true)&#10;          sParcela.delete(failOnError: true)&#10;            info.value=&quot;O Pagamento selecionada foi eliminado com sucesso!&quot;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;&#10;        }catch(Exception e){&#10;            System.println(e.toString())&#10;            info.value=&quot;Erro na eliminação do recibo!&quot;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;        }&#10;    }&#10;&#10;    @Command&#10;    @NotifyChange([&quot;selectedRemissao&quot;])&#10;    def showDelMessage(){&#10;        info.value=&quot;Faça double click para eliminar o item &quot;+sParcela.descricao&#10;        info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;    }&#10;&#10;    @NotifyChange([&quot;pagamentos&quot;,&quot;info&quot;,&quot;selectedRemissao&quot;,&quot;remissao&quot;])&#10;    @Command&#10;    void doSearch() {&#10;        info.value = &quot;&quot;&#10;        pagamentos.clear()&#10;        remissoes.clear()&#10;        List&lt;Pagamento&gt; allItems = Pagamento.findAllByCredito(selectedCredito)&#10;        List&lt;Remissao&gt; allItem = Remissao.all&#10;        if (filter == null || &quot;&quot;.equals(filter)) {&#10;           pagamentos.clear()&#10;            remissoes.clear()&#10;            selectedRemissao = null&#10;            remissao = null&#10;&#10;        } else {&#10;           /* for (Pagamento item : allItems) {&#10;                if (item.credito.cliente.nome.toString().toLowerCase().indexOf(filter.toLowerCase()) &gt;= 0 ||&#10;                        item.getId().toString().indexOf(filter) &gt;= 0 ||&#10;                        item.dataPrevistoDePagamento.format('dd/MM/yyyy').toString().indexOf(filter) &gt;= 0 ||&#10;                        item.dataPrevistoDePagamento.format('dd-MM-yyyy').toString().indexOf(filter) &gt;= 0 ||&#10;                        item.pago.toString().toLowerCase().indexOf(filter) &gt;= 0 ||&#10;                        item.valorPago.toString().indexOf(filter) &gt;= 0 ||&#10;                        item.valorPagoAmortizacao.toString().indexOf(filter) &gt;= 0 ||&#10;                        item.valorDeJuros.toString().indexOf(filter) &gt;= 0 ||&#10;                        item.numeroDePagamento.indexOf(filter) &gt;= 0 ||&#10;                        item.totalEmDivida.toString().indexOf(filter) &gt;= 0 ||&#10;                        item.credito.cliente.nome.toLowerCase().indexOf(filter) &gt;= 0 ||&#10;                        item.diasDeMora.toString().indexOf(filter) &gt;= 0 ||&#10;                        item.valorDaPrestacao.toString().indexOf(filter) &gt;= 0 ||&#10;                        item.descricao.toLowerCase().indexOf(filter) &gt;= 0) {&#10;                    pagamentos.add(item)&#10;                }&#10;&#10;            }*/&#10;            for (Remissao item : allItem) {&#10;                if (item.pagamento.credito.cliente.nome.toString().toLowerCase().indexOf(filter.toLowerCase()) &gt;= 0 ||&#10;                        item.getId().toString().indexOf(filter) &gt;= 0 ||&#10;                        item.createdDate.format('dd/MM/yyyy').toString().indexOf(filter) &gt;= 0 ||&#10;                        item.createdDate.format('dd-MM-yyyy').toString().indexOf(filter) &gt;= 0 ||&#10;                        item.diario.numeroDoDiario.toString().toLowerCase().indexOf(filter) &gt;= 0 ||&#10;                        item.descricao.toString().indexOf(filter) &gt;= 0 ||&#10;                       item.contaOrigem.designacaoDaConta.toLowerCase().indexOf(filter) &gt;= 0) {&#10;                    remissoes.add(item)&#10;                }&#10;&#10;            }&#10;        }&#10;    }&#10;&#10;    @Command&#10;    def alertDelete(){&#10;        Utilizador user = springSecurityService.currentUser as Utilizador&#10;        if (!user.authorities.any { it.authority == &quot;REMISSAO_DELETE&quot; }) {&#10;            info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;        }&#10;        else if(selectedRemissao?.pagamento?.credito?.invalido){&#10;            info.value=&quot;Este credito já foi invalidado!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14ptp;background:back&quot;&#10;&#10;        }&#10;&#10;        else {&#10;            info.value=&quot; Faça Double Click para executar esta operação!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;        }&#10;    }&#10;    @Command&#10;    @NotifyChange([&quot;selectedRemissao&quot;,&quot;remissoes&quot;,&quot;selectedPagamento&quot;])&#10;    def deleteRemissao(){&#10;        Utilizador user = springSecurityService.currentUser as Utilizador&#10;        if (!user.authorities.any { it.authority == &quot;REMISSAO_DELETE&quot; }) {&#10;            info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            return&#10;        }&#10;        if (selectedRemissao.id == null) {&#10;            info.value=&quot;Seleccione uma remissão!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;            return&#10;        }&#10;        try {&#10;            selectedRemissao = Remissao.findById(selectedRemissao.id)&#10;            def contaCapital = Conta.findById(selectedRemissao.contaOrigem.id)&#10;            Transacao tCredito = new Transacao()&#10;            Transacao tDebito = new Transacao()&#10;            tCredito.setValor(selectedRemissao.valorDaRemissao)&#10;            tDebito.setValor(selectedRemissao.valorDaRemissao)&#10;            tCredito.descricao = &quot;estorno da remissão da parcela  Nº:&quot;+selectedRemissao.pagamento.numeroDePagamento&#10;            tDebito.descricao =  &quot;estorno da remissão da Parcela Nº:&quot;+selectedRemissao.pagamento.numeroDePagamento&#10;            System.println(&quot;tCredito&quot;+tCredito.valor)&#10;            System.println(&quot;tDebito&quot;+tDebito.valor)&#10;            tCredito.credito = true&#10;            tDebito.credito = false&#10;            tCredito.save()&#10;            tDebito.save()&#10;            contaCliente = Conta.findByNumeroDaConta(selectedRemissao.pagamento.credito.cliente.id.toString())&#10;            if (contaCapital.transacoes == null) {&#10;                contaCapital.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;            }&#10;            if (contaCliente.transacoes == null) {&#10;                contaCliente.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#10;            }&#10;            contaCapital.transacoes.add(tDebito)&#10;            contaCliente.transacoes.add(tCredito)&#10;            contaCapital.merge(failOnError: true)&#10;            contaCliente.merge(failOnError: true)&#10;            def pagamentoDb = Pagamento.findById(selectedRemissao.pagamento.id)&#10;            System.println(pagamentoDb)&#10;            pagamentoDb.remissoes.remove(selectedRemissao)&#10;            selectedRemissao.delete()&#10;            pagamentoDb.merge failOnError: true&#10;&#10;            info.value=&quot;REMISSÃO DA DÍVIDA invalidado com sucesso!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;&#10;        }catch(Exception e){&#10;            System.println(e.toString())&#10;            info.value = &quot;Erro na eliminação da remissão!&quot;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#10;        }&#10;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package pagamento&#13;&#10;&#13;&#10;import grails.plugin.springsecurity.SpringSecurityService&#13;&#10;import grails.transaction.Transactional&#13;&#10;import mz.maleyanga.ClienteService&#13;&#10;import mz.maleyanga.ContadorService&#13;&#10;import mz.maleyanga.CreditoService&#13;&#10;import mz.maleyanga.DiarioService&#13;&#10;import mz.maleyanga.PagamentoService&#13;&#10;import mz.maleyanga.SessionStorageService&#13;&#10;import mz.maleyanga.SettingsService&#13;&#10;import mz.maleyanga.cliente.Cliente&#13;&#10;import mz.maleyanga.conta.Conta&#13;&#10;import mz.maleyanga.credito.Credito&#13;&#10;import mz.maleyanga.diario.Diario&#13;&#10;import mz.maleyanga.pagamento.Pagamento&#13;&#10;import mz.maleyanga.pagamento.Parcela&#13;&#10;import mz.maleyanga.ParcelaService&#13;&#10;import mz.maleyanga.pagamento.Remissao&#13;&#10;import mz.maleyanga.saidas.Saida&#13;&#10;import mz.maleyanga.security.Utilizador&#13;&#10;import mz.maleyanga.transacao.Transacao&#13;&#10;import mz.maleyanga.transferencia.Transferencia&#13;&#10;import org.springframework.stereotype.Service&#13;&#10;import org.zkoss.bind.annotation.Init&#13;&#10;import org.zkoss.bind.annotation.Command&#13;&#10;import org.zkoss.bind.annotation.NotifyChange&#13;&#10;import org.zkoss.zk.ui.select.annotation.Wire&#13;&#10;import org.zkoss.zul.Button&#13;&#10;import org.zkoss.zul.Div&#13;&#10;import org.zkoss.zul.Label&#13;&#10;import org.zkoss.zul.ListModelList&#13;&#10;import org.zkoss.zul.Listbox&#13;&#10;import org.zkoss.zul.Row&#13;&#10;import java.math.RoundingMode&#13;&#10;import java.sql.SQLException&#13;&#10;&#13;&#10;@Transactional&#13;&#10;@Service&#13;&#10;class PagamentosViewModel {&#13;&#10;    PagamentoService pagamentoService&#13;&#10;    SessionStorageService sessionStorageService&#13;&#10;     SettingsService settingsService&#13;&#10;    @Wire Label info&#13;&#10;    @Wire Button bt_update_entrada&#13;&#10;    @Wire Label lb_pag&#13;&#10;    @Wire Label lb_remissoes&#13;&#10;    @Wire Row rw_co&#13;&#10;    @Wire Div dv_filtragem&#13;&#10;    @Wire Listbox lb_pagamentos&#13;&#10;    @Wire Row rw_destino&#13;&#10;    @Wire Button bt_diario&#13;&#10;    @Wire Button bt_salvar&#13;&#10;    @Wire Button bt_fechar_caixa&#13;&#10;    @Wire Listbox lb_credito&#13;&#10;    @Wire Listbox lb_creditos&#13;&#10;    private  String filter&#13;&#10;    private  String filterCliente&#13;&#10;    private  boolean  allPagamentos&#13;&#10;    private  boolean  allCreditos&#13;&#10;    private  String id&#13;&#10;    private  String pagamento_id = &quot;&quot;&#13;&#10;    private  Pagamento selectedPagamento&#13;&#10;    private  Pagamento selectedPagamentoo&#13;&#10;    private  Credito selectedCredito&#13;&#10;    private  Credito selectedCreditoo&#13;&#10;    private ListModelList&lt;Pagamento&gt; pagamentos&#13;&#10;    private ListModelList&lt;Pagamento&gt; pagamentoss&#13;&#10;    private ListModelList&lt;Parcela&gt; parcelas&#13;&#10;    private ListModelList&lt;Parcela&gt; entradas&#13;&#10;    private ListModelList&lt;Remissao&gt; remissoes&#13;&#10;    private ListModelList&lt;Parcela&gt; parcels&#13;&#10;    private ListModelList&lt;Saida&gt; saidas&#13;&#10;    private ListModelList&lt;Conta&gt; contas&#13;&#10;    private ListModelList&lt;Transacao&gt; tSaidas&#13;&#10;    private ListModelList&lt;Transacao&gt; tEntradas&#13;&#10;    private ListModelList&lt;Cliente&gt; clientes&#13;&#10;    private ListModelList&lt;Cliente&gt; clientess&#13;&#10;    private ListModelList&lt;Credito&gt; creditos&#13;&#10;    private ListModelList&lt;Credito&gt; creditoss&#13;&#10;    ClienteService clienteService&#13;&#10;    CreditoService creditoService&#13;&#10;    private Diario diario&#13;&#10;    private Parcela entrada&#13;&#10;    private Cliente selectedCliente&#13;&#10;    private Cliente selectedClientee&#13;&#10;    private Date dia&#13;&#10;    DiarioService diarioService&#13;&#10;    private Parcela parcela&#13;&#10;    private Parcela parcelaEntrada&#13;&#10;    private Saida saida&#13;&#10;    private Parcela sParcela&#13;&#10;    private String recibo&#13;&#10;    private Remissao remissao&#13;&#10;    private BigDecimal totalParcelas = 0.0&#13;&#10;    private BigDecimal totalSaidas = 0.0&#13;&#10;    ParcelaService parcelaService&#13;&#10;    SpringSecurityService springSecurityService&#13;&#10;      ContadorService contadorService&#13;&#10;    private  Utilizador utilizador&#13;&#10;    private  Conta contaCliente = new Conta()&#13;&#10;    private Remissao selectedRemissao&#13;&#10;&#13;&#10;    private  Conta selectedConta&#13;&#10;    private  Saida selectedSaida&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;clientes&quot;,&quot;selectedCliente&quot;,&quot;pagamentos&quot;,&quot;selectedCredito&quot;,&quot;creditos&quot;,&quot;selectedPagamento&quot;,&quot;filterCliente&quot;])&#13;&#10;    void doSearchCliente() {&#13;&#10;        info.value=&quot;&quot;&#13;&#10;        fecharEditor()&#13;&#10;        clientes.clear()&#13;&#10;        clientess.clear()&#13;&#10;        pagamentos.clear()&#13;&#10;        if(filterCliente.contains(&quot;/&quot;)){&#13;&#10;            selectedCredito = Credito.findByNumeroDoCredito(filterCliente)&#13;&#10;            if(selectedCredito){&#13;&#10;                creditos.add(selectedCredito)&#13;&#10;                selectedCliente = selectedCredito.cliente&#13;&#10;                showCreditos()&#13;&#10;                getSelectedCliente()&#13;&#10;                return&#13;&#10;            }else {&#13;&#10;               lb_credito.visible = false&#13;&#10;                creditos.clear()&#13;&#10;                info.value+=&quot;Crédito não indentificado !&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        List&lt;Cliente&gt; allItems = clienteService.findAllByName(filterCliente)&#13;&#10;        if (filterCliente != null &amp;&amp;! &quot;&quot;.equals(filterCliente))&#13;&#10;        {&#13;&#10;            for (Cliente item : allItems) {&#13;&#10;                if (item.nome.toLowerCase().indexOf(filterCliente.toLowerCase()) &gt;= 0 ||&#13;&#10;&#13;&#10;                        item.numeroDeIndentificao.indexOf(filterCliente) &gt;= 0) {&#13;&#10;                    clientes.add(item)&#13;&#10;                    clientess.add(item)&#13;&#10;                }&#13;&#10;            }&#13;&#10;            if(clientes.empty||clientess.empty){&#13;&#10;                lb_credito.visible = false&#13;&#10;                creditos.clear()&#13;&#10;                pagamentos.clear()&#13;&#10;                info.value+=&quot;Cliente não indentificado !&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    String getFilterCliente() {&#13;&#10;        return filterCliente&#13;&#10;    }&#13;&#10;&#13;&#10;    void setFilterCliente(String filterCliente) {&#13;&#10;        this.filterCliente = filterCliente&#13;&#10;    }&#13;&#10;&#13;&#10;    Pagamento getSelectedPagamentoo() {&#13;&#10;        return selectedPagamentoo&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;,&quot;remissao&quot;,&quot;selectedRemissao&quot;])&#13;&#10;    void setSelectedPagamentoo(Pagamento selectedPagamentoo) {&#13;&#10;        this.selectedPagamentoo = selectedPagamentoo&#13;&#10;        selectedRemissao = null&#13;&#10;        remissao = new Remissao()&#13;&#10;    }&#13;&#10;&#13;&#10;    Credito getSelectedCreditoo() {&#13;&#10;        return selectedCreditoo&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;,&quot;remissao&quot;,&quot;selectedRemissao&quot;,&quot;selectedCreditoo&quot;])&#13;&#10;    void setSelectedCreditoo(Credito selectedCreditoo) {&#13;&#10;        selectedRemissao = null&#13;&#10;        remissao = new Remissao()&#13;&#10;        this.selectedCreditoo = selectedCreditoo&#13;&#10;    }&#13;&#10;&#13;&#10;    Cliente getSelectedClientee() {&#13;&#10;        return selectedClientee&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;selectedPagamento&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedCreditoo&quot;,&quot;selectedClientee&quot;,&quot;creditoss&quot;])&#13;&#10;    void setSelectedClientee(Cliente selectedClientee) {&#13;&#10;        sessionStorageService.cliente = selectedClientee&#13;&#10;        this.selectedClientee = selectedClientee&#13;&#10;       clientess.clear()&#13;&#10;        clientess.add(selectedClientee)&#13;&#10;    }&#13;&#10;&#13;&#10;    boolean getAllPagamentos() {&#13;&#10;        return allPagamentos&#13;&#10;    }&#13;&#10;&#13;&#10;    void setAllPagamentos(boolean allPagamentos) {&#13;&#10;        this.allPagamentos = allPagamentos&#13;&#10;    }&#13;&#10;    boolean getAllCreditos() {&#13;&#10;        return allCreditos&#13;&#10;    }&#13;&#10;&#13;&#10;    void setAllCreditos(boolean allCreditos) {&#13;&#10;        this.allCreditos = allCreditos&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;pagamentos&quot;,&quot;selectedCredito&quot;,&quot;info&quot;,&quot;allPagamentos&quot;,&quot;allCreditos&quot;])&#13;&#10;    void setAll() {&#13;&#10;        allPagamentos = !allPagamentos&#13;&#10;       getPagamentos()&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;creditos&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;allPagamentos&quot;,&quot;allCreditos&quot;,&quot;info&quot;])&#13;&#10;    void setAllC() {&#13;&#10;        allCreditos = !allCreditos&#13;&#10;        getCreditos()&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;allCreditos&quot;,&quot;allPagamentos&quot;,&quot;creditos&quot;,&quot;info&quot;])&#13;&#10;    def cleanAllCreditos(){&#13;&#10;        allCreditos = false&#13;&#10;        allPagamentos = false&#13;&#10;        info.value= &quot;&quot;&#13;&#10;        getCreditos()&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;allCreditos&quot;,&quot;allPagamentos&quot;,&quot;pagamentos&quot;,&quot;info&quot;])&#13;&#10;    def cleanAllPagamentos(){&#13;&#10;        info.value= &quot;&quot;&#13;&#10;        allPagamentos = false&#13;&#10;        getPagamentos()&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;creditos&quot;])&#13;&#10;    ListModelList&lt;Credito&gt; getCreditos() {&#13;&#10;        if(creditos==null){&#13;&#10;            creditos = new ListModelList&lt;Credito&gt;()&#13;&#10;        }&#13;&#10;        creditos.clear()&#13;&#10;&#13;&#10;        if(selectedCliente!=null){&#13;&#10;            if(allCreditos){&#13;&#10;                creditos = creditoService.findAllByCliente(selectedCliente)&#13;&#10;            }else&#13;&#10;            creditos = creditoService.findAllByClienteAndEmDivida(selectedCliente)&#13;&#10;        }&#13;&#10;        return creditos&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Credito&gt; getCreditoss() {&#13;&#10;        if(creditoss==null){&#13;&#10;            creditoss = new ListModelList&lt;Credito&gt;()&#13;&#10;        }&#13;&#10;        creditoss.clear()&#13;&#10;        if(selectedClientee!=null){&#13;&#10;            creditoss = Credito.findAllByClienteAndEmDivida(selectedClientee,true).sort{it.id}&#13;&#10;        }&#13;&#10;        return creditoss&#13;&#10;    }&#13;&#10;&#13;&#10;    Credito getSelectedCredito() {&#13;&#10;        return selectedCredito&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;pagamentos&quot;,&quot;selectedPagamento&quot;])&#13;&#10;    void setSelectedCredito(Credito selectedCredito) {&#13;&#10;        this.selectedCredito = selectedCredito&#13;&#10;        selectedPagamento = null&#13;&#10;       getPagamentos()&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;creditos&quot;,&quot;creditoss&quot;,&quot;selectedClientee&quot;,&quot;selectedCredito&quot;,&quot;selectedCliente&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;selectedPagamento&quot;])&#13;&#10;    def showPagamentos(){&#13;&#10;     //   lb_credito.visible = false&#13;&#10;        getPagamentos()&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;creditos&quot;,&quot;creditoss&quot;,&quot;selectedClientee&quot;,&quot;selectedCliente&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;])&#13;&#10;    def showCreditos(){&#13;&#10;        lb_credito.visible= true&#13;&#10;        lb_creditos.visible= true&#13;&#10;    }&#13;&#10;    Cliente getSelectedCliente() {&#13;&#10;        return selectedCliente&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    @NotifyChange([&quot;info&quot;,&quot;selectedCredito&quot;,&quot;pagamentos&quot;,&quot;selectedPagamento&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedCreditoo&quot;,&quot;creditos&quot;,&quot;selectedCliente&quot;])&#13;&#10;    void setSelectedCliente(Cliente selectedCliente) {&#13;&#10;        info.value = &quot;&quot;&#13;&#10;        selectedCredito = null&#13;&#10;        selectedPagamento = null&#13;&#10;        sessionStorageService.parcela = null&#13;&#10;        sessionStorageService.credito = null&#13;&#10;        pagamentos.clear()&#13;&#10;        this.selectedCliente = selectedCliente&#13;&#10;        clientes.clear()&#13;&#10;        clientes.add(selectedCliente)&#13;&#10;    }&#13;&#10;&#13;&#10;    Remissao getSelectedRemissao() {&#13;&#10;        return selectedRemissao&#13;&#10;    }&#13;&#10;&#13;&#10;    void setSelectedRemissao(Remissao selectedRemissao) {&#13;&#10;        this.selectedRemissao = selectedRemissao&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;selectedConta&quot;,&quot;pagaments&quot;])&#13;&#10;   @Command&#13;&#10;   def getContaOrigem(){&#13;&#10;      selectedConta = Conta.findByCliente(parcelaEntrada.cliente)&#13;&#10;&#13;&#10;        System.println(selectedConta)&#13;&#10;        rw_co.visible= false&#13;&#10;   }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;    ListModelList&lt;Cliente&gt; getClientes() {&#13;&#10;        if(clientes==null){&#13;&#10;            clientes = new ListModelList&lt;Cliente&gt;()&#13;&#10;        }&#13;&#10;        return clientes&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Cliente&gt; getClientess() {&#13;&#10;        if(clientess==null){&#13;&#10;            clientess = new ListModelList&lt;Cliente&gt;()&#13;&#10;        }&#13;&#10;        return clientess&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange(&quot;entrada&quot;)&#13;&#10;    Parcela getEntrada() {&#13;&#10;&#13;&#10;        return entrada&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;selectedPagamento&quot;,&quot;entrada&quot;])&#13;&#10;    void setEntrada(Parcela entrada) {&#13;&#10;        info.value= &quot;&quot;&#13;&#10;        this.entrada = entrada&#13;&#10;        if(entrada != null) {&#13;&#10;            sessionStorageService.entrada = entrada&#13;&#10;            if(selectedPagamento!=null&amp;&amp;entrada.pagamento==null){&#13;&#10;                bt_update_entrada.label=&quot;Alocar a &quot;+selectedPagamento.descricao+&quot; do(a) &quot;+selectedCredito.cliente.nome&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;selectedPagamento&quot;,&quot;entrada&quot;])&#13;&#10;    def updateEntrada(){&#13;&#10;        if(entrada == null) {&#13;&#10;            info.value=&quot;Nenhuma entrada selecionada!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        &#13;&#10;        info.value=&quot;&quot;&#13;&#10;        entrada = Parcela.findById(entrada.id)&#13;&#10;        if(entrada == null) {&#13;&#10;            info.value=&quot;Entrada não encontrada!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        &#13;&#10;        System.println(entrada.id)&#13;&#10;        Utilizador user = springSecurityService.currentUser as Utilizador&#13;&#10;        if(entrada.utilizador!=user){&#13;&#10;            if (!user.authorities.any { it.authority == &quot;PARCELA_UPDATE&quot; }) {&#13;&#10;                info.value+=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        if(selectedCredito?.cliente?.nome &amp;&amp; entrada.nomeDoCliente!=selectedCredito.cliente.nome){&#13;&#10;            info.value=&quot;O nome do cliente não confere! &quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            if (!user.authorities.any { it.authority == &quot;PARCELA_UPDATE&quot; }) {&#13;&#10;                info.value+=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        if (selectedPagamento != null &amp;&amp; entrada.valorPago&gt;selectedPagamento.totalEmDivida*(-1)){&#13;&#10;            info.value=&quot;O Valor a alocar não deve ser superior ao valor em dívida!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if (entrada.pagamento!=null){&#13;&#10;            info.value=&quot;Este valor já foi alocado!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        try {&#13;&#10;            entrada.valorParcial = entrada.valorPago&#13;&#10;            entrada.pagamento = selectedPagamento&#13;&#10;            if(selectedPagamento.parcelas == null){&#13;&#10;                selectedPagamento.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#13;&#10;            }&#13;&#10;            selectedPagamento.parcelas.add(entrada)&#13;&#10;            entrada.merge(failOnError: true)&#13;&#10;            selectedPagamento.merge(failOnError: true)&#13;&#10;            Transferencia t = new Transferencia()&#13;&#10;            t.utilizador = utilizador&#13;&#10;            String descricao = entrada.descricao+&quot;-&quot;+entrada.id&#13;&#10;            Transferencia tr = Transferencia.findByDescricaoAndDiario(descricao,diario)&#13;&#10;          //  System.println(tr.origem)&#13;&#10;           // System.println(tr.destino)&#13;&#10;            t.origem = Conta.findByNumeroDaConta(selectedCliente.id.toString())&#13;&#10;            t.destino = Conta.findById(tr.origem.id)&#13;&#10;            t.descricao = &quot;Alocação de receb. em caixa&quot;+&quot;-&quot;+entrada.id&#13;&#10;            t.valor = entrada.valorParcial&#13;&#10;            t.diario = diario&#13;&#10;            t.save(failOnError: true)&#13;&#10;            Transacao tCredito = new Transacao()&#13;&#10;            Transacao tDebito = new Transacao()&#13;&#10;            tCredito.valor = entrada.valorParcial&#13;&#10;            tCredito.descricao=&quot;Alocação de receb. em caixa&quot;+&quot;-&quot;+entrada.id&#13;&#10;            tDebito.descricao =&quot;Alocação de rec. em caixa&quot;+&quot;-&quot;+entrada.id&#13;&#10;            tDebito.valor = entrada.valorParcial&#13;&#10;            tCredito.credito = true&#13;&#10;            tDebito.credito = false&#13;&#10;            def credora = Conta.findById(t.origem.id)&#13;&#10;            def devedora = Conta.findById(t.destino.id)&#13;&#10;            if (credora?.transacoes == null) {&#13;&#10;                credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;            }&#13;&#10;            if (devedora?.transacoes == null) {&#13;&#10;                devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;            }&#13;&#10;            tCredito.save(failOnError: true)&#13;&#10;            tDebito.save(failOnError: true)&#13;&#10;            credora.transacoes.add(tCredito)&#13;&#10;            devedora.transacoes.add(tDebito)&#13;&#10;            credora.merge(failOnError: true)&#13;&#10;            devedora.merge(failOnError: true)&#13;&#10;&#13;&#10;            info.value = &quot;O valor foi alocado com sucesso!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;        }catch(Exception e){&#13;&#10;            System.println(e.toString())&#13;&#10;            info.value = e.toString()&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Parcela&gt; getEntradas() {&#13;&#10;&#13;&#10;        if(entradas ==null){&#13;&#10;            entradas = new ListModelList&lt;Parcela&gt;()&#13;&#10;        }&#13;&#10;        entradas.clear()&#13;&#10;        def parcelas = Parcela.findAllByDiario(diario)&#13;&#10;        for(Parcela p in parcelas){&#13;&#10;            if(p.pagamento==null){&#13;&#10;                entradas.add(p)&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return entradas&#13;&#10;    }&#13;&#10;&#13;&#10;    Parcela getParcelaEntrada() {&#13;&#10;        return parcelaEntrada&#13;&#10;    }&#13;&#10;&#13;&#10;    void setParcelaEntrada(Parcela parcelaEntrada) {&#13;&#10;        this.parcelaEntrada = parcelaEntrada&#13;&#10;    }&#13;&#10;&#13;&#10;    Date getDia() {&#13;&#10;        return dia&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;dia&quot;])&#13;&#10;    void setDia(Date dia) {&#13;&#10;        this.dia = dia&#13;&#10;        sessionStorageService.setDia(dia)&#13;&#10;    }&#13;&#10;&#13;&#10;    BigDecimal getTotalParcelas() {&#13;&#10;        totalParcelas = 0.0&#13;&#10;        for(Parcela parcela in parcels){&#13;&#10;            totalParcelas +=parcela.valorPago&#13;&#10;        }&#13;&#10;        return totalParcelas&#13;&#10;    }&#13;&#10;&#13;&#10;    BigDecimal getTotalSaidas() {&#13;&#10;        totalSaidas = 0.0&#13;&#10;        for(Saida saida in saidas){&#13;&#10;            totalSaidas +=saida.valor&#13;&#10;        }&#13;&#10;        return totalSaidas&#13;&#10;    }&#13;&#10;    List&lt;Parcela&gt; getParcels() {&#13;&#10;        if (parcels==null){&#13;&#10;            parcels = new ListModelList&lt;Parcela&gt;(Parcela.findAllByValorPagoGreaterThanAndDiarioAndUtilizador(0.0,diario,utilizador))&#13;&#10;        }&#13;&#10;        return parcels&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Remissao&gt; getRemissoes() {&#13;&#10;        if(remissoes ==null){&#13;&#10;           remissoes = new ListModelList&lt;Remissao&gt;()&#13;&#10;        }&#13;&#10;        return remissoes&#13;&#10;    }&#13;&#10;&#13;&#10;    Remissao getRemissao() {&#13;&#10;        return remissao&#13;&#10;    }&#13;&#10;&#13;&#10;    void setRemissao(Remissao remissao) {&#13;&#10;        this.remissao = remissao&#13;&#10;    }&#13;&#10;&#13;&#10;    BigDecimal getSaldo() {&#13;&#10;        System.println(&quot;getTotalSaidas=&quot;+getTotalSaidas())&#13;&#10;        System.println(&quot;getTotalParcelas=&quot;+getTotalParcelas())&#13;&#10;        return getTotalParcelas()-getTotalSaidas()&#13;&#10;    }&#13;&#10;    List&lt;Saida&gt; getSaidas() {&#13;&#10;        if(saidas==null){&#13;&#10;            saidas = new ListModelList&lt;Saida&gt;(Saida.findAllByDiarioAndUtilizadorAndOrigem(diario,utilizador,contaCaixa))&#13;&#10;        }&#13;&#10;        return saidas&#13;&#10;    }&#13;&#10;    Saida getSelectedSaida() {&#13;&#10;        return selectedSaida&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    void setSelectedSaida(Saida selectedSaida) {&#13;&#10;        this.selectedSaida = selectedSaida&#13;&#10;    }&#13;&#10;&#13;&#10;    String getRecibo() {&#13;&#10;        return recibo&#13;&#10;    }&#13;&#10;&#13;&#10;    void setRecibo(String recibo) {&#13;&#10;        this.recibo = recibo&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;saida&quot;,'parcelaEntrada'])&#13;&#10;    def fecharCaixa(){&#13;&#10;        parcelaEntrada=null&#13;&#10;&#13;&#10;        getParcels()&#13;&#10;        getSaidas()&#13;&#10;&#13;&#10;       saida  = new Saida()&#13;&#10;&#13;&#10;        saida.valor = getSaldo()&#13;&#10;        saida.dataDePagamento = new Date()&#13;&#10;        saida.descricao =&quot;Feixo de caixa&quot;&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    def deleteSaida(){&#13;&#10;        try {&#13;&#10;            Transacao tCredito = new Transacao()&#13;&#10;            Transacao tDebito = new Transacao()&#13;&#10;            tCredito.valor = selectedSaida.valor&#13;&#10;            tCredito.descricao=&quot;Estorno&quot;&#13;&#10;            tDebito.descricao = &quot;Estorno&quot;&#13;&#10;            tDebito.valor = selectedSaida.valor&#13;&#10;            tCredito.credito = true&#13;&#10;            tDebito.credito = false&#13;&#10;            def credora = Conta.findById(selectedSaida.destino.id)&#13;&#10;            def devedora = Conta.findById(selectedSaida.origem.id)&#13;&#10;&#13;&#10;            tCredito.save(failOnError: true)&#13;&#10;            tDebito.save(failOnError: true)&#13;&#10;            credora.transacoes.add(tCredito)&#13;&#10;            devedora.transacoes.add(tDebito)&#13;&#10;            credora.merge(failOnError: true)&#13;&#10;            devedora.merge(failOnError: true)&#13;&#10;&#13;&#10;&#13;&#10;            selectedSaida.delete(failOnError: true)&#13;&#10;        }catch(Exception e){&#13;&#10;            System.println(e.toString())&#13;&#10;        }&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    def checkSelectedItem(){&#13;&#10;        if(parcela.formaDePagamento==&quot;transferencia bancária&quot;||parcela.formaDePagamento==&quot;deposito bancário&quot;){&#13;&#10;            rw_destino.visible =true&#13;&#10;            saida = new Saida()&#13;&#10;        }else {&#13;&#10;            rw_destino.visible = false&#13;&#10;        }&#13;&#10;    }&#13;&#10;    String getPagamento_id() {&#13;&#10;        return pagamento_id&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Transacao&gt; gettSaidas() {&#13;&#10;        if(tSaidas==null){&#13;&#10;            tSaidas = new ListModelList&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        tSaidas?.clear()&#13;&#10;        if(contaCaixa?.id){&#13;&#10;            for(Transacao t in contaCaixa?.transacoes){&#13;&#10;                if (t?.credito){&#13;&#10;&#13;&#10;                    tSaidas?.add(t)&#13;&#10;                }&#13;&#10;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        tSaidas.sort{it.dateCreated}&#13;&#10;        return tSaidas&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Transacao&gt; gettEntradas() {&#13;&#10;        if(tEntradas==null){&#13;&#10;            tSaidas = new ListModelList&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        iEntradas.clear()&#13;&#10;        if(contaCaixa.id){&#13;&#10;            for(Transacao t in contaCaixa.transacoes){&#13;&#10;                if (t.credito){&#13;&#10;                    iEntradas.add(t)&#13;&#10;                }&#13;&#10;&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return iEntradas&#13;&#10;    }&#13;&#10;&#13;&#10;    Conta getSelectedConta() {&#13;&#10;        return selectedConta&#13;&#10;    }&#13;&#10;&#13;&#10;    void setSelectedConta(Conta selectedConta) {&#13;&#10;        this.selectedConta = selectedConta&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Conta&gt; getContas() {&#13;&#10;        if(contas==null){&#13;&#10;            contas = new ListModelList&lt;Conta&gt;(Conta.findAllByFinalidadeOrFinalidade(&quot;conta_movimento&quot;,&quot;conta_capital&quot;))&#13;&#10;        }&#13;&#10;&#13;&#10;        return contas&#13;&#10;    }&#13;&#10;&#13;&#10;    Saida getSaida() {&#13;&#10;        return saida&#13;&#10;    }&#13;&#10;&#13;&#10;    void setSaida(Saida saida) {&#13;&#10;        this.saida = saida&#13;&#10;    }&#13;&#10;&#13;&#10;    Parcela getsParcela() {&#13;&#10;        return sParcela&#13;&#10;    }&#13;&#10;&#13;&#10;    void setsParcela(Parcela sParcela) {&#13;&#10;        this.sParcela = sParcela&#13;&#10;        sessionStorageService.parcela=sParcela&#13;&#10;        sessionStorageService.credito=selectedCredito&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Parcela&gt; getParcelas() {&#13;&#10;        if(parcelas==null){&#13;&#10;            parcelas = new ListModelList&lt;Parcela&gt;()&#13;&#10;        }&#13;&#10;        if(selectedPagamento.id!=null){&#13;&#10;            for(Parcela p in selectedPagamento.parcelas){&#13;&#10;                parcelas.add(p)&#13;&#10;            }&#13;&#10;        }&#13;&#10;        return parcelas&#13;&#10;    }&#13;&#10;    @NotifyChange(['contaCaixa','caixas'])&#13;&#10;    Conta getContaCaixa() {&#13;&#10;        return   Conta.findByUtilizadorAndFinalidade(utilizador,'conta_caixa')&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;saida&quot;,&quot;parcela&quot;,&quot;selectedPagamento&quot;,&quot;parcelaEntrada&quot;])&#13;&#10;    def addSaida(){&#13;&#10;     /*   bt_fechar_caixa.visible = false&#13;&#10;        dv_filtragem.visible = false&#13;&#10;        lb_pagamentos.visible = false*/&#13;&#10;        saida = new Saida()&#13;&#10;        saida.dataDePagamento = new Date()&#13;&#10;        saida.formaDePagamento = &quot;numerário&quot;&#13;&#10;        selectedPagamento = null&#13;&#10;        parcela = null&#13;&#10;        parcelaEntrada = null&#13;&#10;        remissao = null&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;saida&quot;,&quot;parcela&quot;,&quot;selectedPagamentoo&quot;,&quot;remissao&quot;])&#13;&#10;    def addRemissao(){&#13;&#10;        parcela = null&#13;&#10;        parcelaEntrada = null&#13;&#10;        saida = null&#13;&#10;        if(selectedPagamentoo==null){&#13;&#10;            info.value=&quot;Seleccione uma prestação!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if(Pagamento.findById(selectedPagamentoo.id).pago){&#13;&#10;            info.value=&quot;Esta prestação já foi paga na totalidade!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        remissao =  new Remissao()&#13;&#10;        remissao.pagamento = selectedPagamento&#13;&#10;      // selectedPagamento = null&#13;&#10;&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    def printSaida(){&#13;&#10;&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange(['contaCaixa','tSaidas',&quot;saidas&quot;])&#13;&#10;    def salvarSaida(){&#13;&#10;&#13;&#10;        if(Saida.findById(saida.id)){&#13;&#10;            info.value = &quot;Este Pagamento já foi lançado!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if(0&gt;=saida.valor){&#13;&#10;            info.value = &quot;Valor inválido!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        getParcels()&#13;&#10;        getSaidas()&#13;&#10;        if(saida.valor&gt;getSaldo().setScale(2,RoundingMode.DOWN)){&#13;&#10;            info.value = &quot;O saldo de &quot;+getSaldo().setScale(2,RoundingMode.DOWN)+&quot;, em caixa  não cobre o valor de &quot;+saida.valor+&quot; ,que pretende dar saida!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if(saida.dataDePagamento==null){&#13;&#10;            info.value = &quot;Data inválido!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if(saida.formaDePagamento==null){&#13;&#10;            info.value = &quot;Forma de Pagamento não foi selecionado!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if(contaCliente==null){&#13;&#10;            info.value = &quot;ESte cliente não tem conta!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        info.value = &quot;&quot;&#13;&#10;&#13;&#10;        if(contaCaixa==null){&#13;&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#13;&#10;            info.style =&quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            selectedPagamento=null&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        saida.utilizador = Utilizador.findById(utilizador.id)&#13;&#10;&#13;&#10;        if (saida.hasErrors()) {&#13;&#10;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        saida.contaOrigem=contaCaixa.codigo&#13;&#10;        saida.contaDestino=selectedConta.codigo&#13;&#10;        saida.origem = contaCaixa&#13;&#10;        saida.destino = selectedConta&#13;&#10;        saida.diario = diario&#13;&#10;        saida.save(failOnError: true)&#13;&#10;        info.value = &quot;gravação feita com sucesso!&quot;&#13;&#10;        info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;&#13;&#10;        Transacao tCredito = new Transacao()&#13;&#10;        Transacao tDebito = new Transacao()&#13;&#10;        tCredito.valor = saida.valor&#13;&#10;        tCredito.descricao=saida.descricao+&quot;-&quot;+saida.formaDePagamento&#13;&#10;        tDebito.descricao = saida.descricao+&quot;-&quot;+saida.formaDePagamento&#13;&#10;        tDebito.valor = saida.valor&#13;&#10;        tCredito.credito = true&#13;&#10;        tDebito.credito = false&#13;&#10;        def credora = Conta.findById(contaCaixa.id)&#13;&#10;        def devedora = Conta.findById(selectedConta.id)&#13;&#10;        if (credora.transacoes == null) {&#13;&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        if (devedora.transacoes == null) {&#13;&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        tCredito.save(failOnError: true)&#13;&#10;        tDebito.save(failOnError: true)&#13;&#10;        credora.transacoes.add(tCredito)&#13;&#10;        devedora.transacoes.add(tDebito)&#13;&#10;        credora.merge(failOnError: true)&#13;&#10;        devedora.merge(failOnError: true)&#13;&#10;&#13;&#10;&#13;&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#13;&#10;        info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;        parcelaService.saidaInstance = saida&#13;&#10;        saidas.add(saida)&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange(['contaCaixa','tSaidas',&quot;entradas&quot;])&#13;&#10;    def salvarEntrada(){&#13;&#10;       try {&#13;&#10;           if(parcelaEntrada.nomeDoCliente==null){&#13;&#10;               info.value = &quot;Digite o nome do cliente!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               return&#13;&#10;           }&#13;&#10;           if(parcelaEntrada.dataDePagamento&gt;new Date()){&#13;&#10;               parcelaEntrada.dataDePagamento = new Date()&#13;&#10;               info.value = &quot;Data inválida!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;&#13;&#10;           }&#13;&#10;           if(Parcela.findById(parcelaEntrada.id)){&#13;&#10;               info.value = &quot;Este Pagamento já foi lançado!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               return&#13;&#10;           }&#13;&#10;&#13;&#10;           if(selectedConta==null){&#13;&#10;               info.value = &quot;Selecione uma conta Destino válido!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               return&#13;&#10;           }&#13;&#10;&#13;&#10;           if(0&gt;=parcelaEntrada.valorPago){&#13;&#10;               info.value = &quot;Valor inválido!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               return&#13;&#10;           }&#13;&#10;           if(parcelaEntrada.dataDePagamento==null){&#13;&#10;               info.value = &quot;Data inválido!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               return&#13;&#10;           }&#13;&#10;&#13;&#10;           if(parcelaEntrada.formaDePagamento==null){&#13;&#10;               info.value = &quot;Forma de Pagamento não foi selecionado!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               return&#13;&#10;           }&#13;&#10;           if(selectedConta==null){&#13;&#10;               info.value = &quot;Selecione a conta Origem!&quot;&#13;&#10;               info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               return&#13;&#10;           }&#13;&#10;           info.value = &quot;&quot;&#13;&#10;&#13;&#10;           if(contaCaixa==null){&#13;&#10;               info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#13;&#10;               info.style =&quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;               selectedPagamento=null&#13;&#10;               return&#13;&#10;           }&#13;&#10;           parcelaEntrada.setNumeroDoRecibo(contadorService.gerarNumeroDaParcela())&#13;&#10;           parcelaEntrada.diario = diario&#13;&#10;           Utilizador util = Utilizador.findById(utilizador.id)&#13;&#10;           parcelaEntrada.utilizador = util&#13;&#10;           parcelaEntrada.save(failOnError: true)&#13;&#10;         //  lancamentoEntrada(parcelaEntrada)&#13;&#10;           getEntradas()&#13;&#10;       }catch(Exception e){&#13;&#10;          info.value = e.toString()&#13;&#10;           info.style = &quot;color:red&quot;&#13;&#10;       }&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    @NotifyChange([&quot;selectedPagamento&quot;,'parcela',&quot;contaOrigem&quot;,&quot;saida&quot;,&quot;pagamento_id&quot;,&quot;parcelaEntrada&quot;,&quot;entradas&quot;])&#13;&#10;    @Command&#13;&#10;    addEntrada(){&#13;&#10;&#13;&#10;       /* bt_fechar_caixa.visible =false&#13;&#10;        dv_filtragem.visible = false&#13;&#10;        lb_pagamentos.visible = false*/&#13;&#10;        info.value=&quot;&quot;&#13;&#10;        if(utilizador?.contas==null){&#13;&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#13;&#10;            info.style =&quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            selectedPagamento=null&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;        parcelaEntrada = new Parcela()&#13;&#10;        parcelaEntrada.diario = diario&#13;&#10;        parcelaEntrada.dataDePagamento = new Date()&#13;&#10;        parcelaEntrada.formaDePagamento = &quot;numerário&quot;&#13;&#10;        parcelaEntrada.descricao = &quot;Recebimento em caixa&quot;&#13;&#10;        if(selectedCliente!=null){&#13;&#10;            parcelaEntrada.nomeDoCliente= selectedCliente.nome&#13;&#10;        }&#13;&#10;        saida = null&#13;&#10;        remissao = null&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;selectedCreditoo&quot;,&quot;creditoss&quot;,&quot;remissoes&quot;,&quot;pagamentoss&quot;,&quot;selectedPagamentoo&quot;])&#13;&#10;    def redemirCredito(){&#13;&#10;        remissao = new Remissao()&#13;&#10;&#13;&#10;        try {&#13;&#10;            remissao.valorDaRemissao = selectedCreditoo.valorEmDivida*(-1)&#13;&#10;            Utilizador user = springSecurityService.currentUser as Utilizador&#13;&#10;            if (!user.authorities.any { it.authority == &quot;REMISSAO_CREATE&quot; }) {&#13;&#10;                info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            System.println(&quot;feita a validacao do user&quot;)&#13;&#10;            def contaDb = Conta.findByFinalidadeAndDesignacaoDaConta(&quot;conta_movimento&quot;, &quot;PERDAO_DA_DIVIDA&quot;)&#13;&#10;            if(contaDb==null&amp;&amp;!(contaDb?.ativo)){&#13;&#10;                info.value=&quot;Criar uma conta de movimento, associado a uma conta intregradora do passivo ,  com a designão 'PERDAO_DA_DIVIDA'!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;&#13;&#10;            if(Remissao.findById(remissao.id)){&#13;&#10;                info.value=&quot;Esta remissoão já existe na base de dados!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(remissao.valorDaRemissao&gt;selectedCreditoo.valorEmDivida*(-1)){&#13;&#10;                info.value=&quot;O valor da remissão não pode ser superior ao valor em dívida!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                remissao.valorDaRemissao = selectedCreditoo.valorEmDivida*(-1)&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(remissao.valorDaRemissao&lt;0){&#13;&#10;                info.value=&quot;O valor da remissão não pode ser negativo!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                remissao.valorDaRemissao = remissao.valorDaRemissao*(-1)&#13;&#10;                return&#13;&#10;            }&#13;&#10;            remissao.diario = diario&#13;&#10;            remissao.utilizador =user&#13;&#10;            remissao.contaOrigem = Conta.findById(contaDb.id)&#13;&#10;            /*if(selectedPagamentoo==null){&#13;&#10;                info.value=&quot;Selecione pelo menos uma prestação!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }*/&#13;&#10;            Pagamento pagamento = Pagamento.findById(pagamentoss.first().id)&#13;&#10;            remissao.pagamento = pagamento&#13;&#10;            if(pagamento.remissoes==null){&#13;&#10;                pagamento.remissoes = new ArrayList&lt;Remissao&gt;()&#13;&#10;            }&#13;&#10;            remissao.createdDate = new Date()&#13;&#10;            pagamento.remissoes.add(remissao)&#13;&#10;            remissao.save()&#13;&#10;            Remissao remissaoDb = Remissao.findById(remissao.id)&#13;&#10;            System.println(&quot;remissaoDb==&quot;+remissaoDb)&#13;&#10;&#13;&#10;            if(remissaoDb!=null){&#13;&#10;                System.println(&quot;Remissão gravado com sucesso!&quot;)&#13;&#10;                info.value=&quot;Remissão gravado co sucesso!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                Transacao tCredito = new Transacao()&#13;&#10;                Transacao tDebito = new Transacao()&#13;&#10;                tCredito.valor = remissaoDb.valorDaRemissao&#13;&#10;                tCredito.descricao=remissaoDb.descricao+&quot;-&quot;+remissao.id&#13;&#10;                tDebito.descricao = remissaoDb.descricao+&quot;-&quot;+remissao&#13;&#10;                tDebito.valor = remissaoDb.valorDaRemissao&#13;&#10;                tCredito.credito = true&#13;&#10;                tDebito.credito = false&#13;&#10;                def credora = Conta.findById(contaDb.id)&#13;&#10;                def devedora = Conta.findByNumeroDaConta(pagamento.credito.cliente.id.toString())&#13;&#10;                if (credora?.transacoes == null) {&#13;&#10;                    credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;                }&#13;&#10;                if (devedora?.transacoes == null) {&#13;&#10;                    devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;                }&#13;&#10;                tCredito.save(failOnError: true)&#13;&#10;                tDebito.save(failOnError: true)&#13;&#10;                credora.transacoes.add(tCredito)&#13;&#10;                devedora.transacoes.add(tDebito)&#13;&#10;                credora.merge(failOnError: true)&#13;&#10;                devedora.merge(failOnError: true)&#13;&#10;                info.value = &quot;Operações feitas com sucesso!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;&#13;&#10;                //addRemissao()&#13;&#10;                selectedRemissao = Remissao.findById(remissao.id)&#13;&#10;                remissoes.add(selectedRemissao)&#13;&#10;                pagamentoss.clear()&#13;&#10;                selectedCreditoo=null&#13;&#10;&#13;&#10;                // remissao =null&#13;&#10;                // fecharEditor()&#13;&#10;&#13;&#10;            }else {&#13;&#10;                info.value=&quot;Erro na na gravação da remissão!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            }&#13;&#10;&#13;&#10;&#13;&#10;        }catch(SQLException e){&#13;&#10;            System.println(e.toString())&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;remissoes&quot;,&quot;remissao&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedRemissao&quot;])&#13;&#10;    @Command&#13;&#10;    def salvarRemissao(){&#13;&#10;&#13;&#10;        try {&#13;&#10;            Utilizador user = springSecurityService.currentUser as Utilizador&#13;&#10;            if (!user.authorities.any { it.authority == &quot;REMISSAO_CREATE&quot; }) {&#13;&#10;                info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            System.println(&quot;feita a validacao do user&quot;)&#13;&#10;            def contaDb = Conta.findByFinalidadeAndDesignacaoDaConta(&quot;conta_movimento&quot;, &quot;PERDAO_DA_DIVIDA&quot;)&#13;&#10;            if(contaDb==null&amp;&amp;!(contaDb?.ativo)){&#13;&#10;                info.value=&quot;Criar uma conta de movimento, associado a uma conta intregradora do passivo ,  com a designão 'PERDAO_DA_DIVIDA'!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;&#13;&#10;            if(Remissao.findById(remissao.id)){&#13;&#10;                info.value=&quot;Esta remissoão já existe na base de dados!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(remissao.valorDaRemissao&gt;Pagamento.findById(selectedPagamentoo.id).getTotalEmDivida()*(-1)){&#13;&#10;                info.value=&quot;O valor da remissão não pode ser superior ao valor em dívida!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                remissao.valorDaRemissao = Pagamento.findById(selectedPagamentoo.id).getTotalEmDivida()*(-1)&#13;&#10;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(remissao.valorDaRemissao&lt;0){&#13;&#10;                info.value=&quot;O valor da remissão não pode ser negativo!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                remissao.valorDaRemissao = remissao.valorDaRemissao*(-1)&#13;&#10;                return&#13;&#10;            }&#13;&#10;            remissao.diario = diario&#13;&#10;            remissao.utilizador =user&#13;&#10;            remissao.contaOrigem = Conta.findById(contaDb.id)&#13;&#10;            Pagamento pagamento = Pagamento.findById(selectedPagamentoo.id)&#13;&#10;            remissao.pagamento = pagamento&#13;&#10;            if(pagamento.remissoes==null){&#13;&#10;                pagamento.remissoes = new ArrayList&lt;Remissao&gt;()&#13;&#10;            }&#13;&#10;            remissao.createdDate = new Date()&#13;&#10;            pagamento.remissoes.add(remissao)&#13;&#10;            remissao.save()&#13;&#10;            Remissao remissaoDb = Remissao.findById(remissao.id)&#13;&#10;            System.println(&quot;remissaoDb==&quot;+remissaoDb)&#13;&#10;&#13;&#10;            if(remissaoDb!=null){&#13;&#10;                System.println(&quot;Remissão gravado com sucesso!&quot;)&#13;&#10;                info.value=&quot;Remissão gravado co sucesso!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                Transacao tCredito = new Transacao()&#13;&#10;                Transacao tDebito = new Transacao()&#13;&#10;                tCredito.valor = remissaoDb.valorDaRemissao&#13;&#10;                tCredito.descricao=remissaoDb.descricao+&quot;-&quot;+remissao.id&#13;&#10;                tDebito.descricao = remissaoDb.descricao+&quot;-&quot;+remissao&#13;&#10;                tDebito.valor = remissaoDb.valorDaRemissao&#13;&#10;                tCredito.credito = true&#13;&#10;                tDebito.credito = false&#13;&#10;                def credora = Conta.findById(contaDb.id)&#13;&#10;                def devedora = Conta.findByNumeroDaConta(selectedPagamentoo.credito.cliente.id.toString())&#13;&#10;                if (credora?.transacoes == null) {&#13;&#10;                    credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;                }&#13;&#10;                if (devedora?.transacoes == null) {&#13;&#10;                    devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;                }&#13;&#10;                tCredito.save(failOnError: true)&#13;&#10;                tDebito.save(failOnError: true)&#13;&#10;                credora.transacoes.add(tCredito)&#13;&#10;                devedora.transacoes.add(tDebito)&#13;&#10;                credora.merge(failOnError: true)&#13;&#10;                devedora.merge(failOnError: true)&#13;&#10;                info.value = &quot;Operações feitas com sucesso!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                remissoes.add(remissao)&#13;&#10;                &#13;&#10;               //addRemissao()&#13;&#10;                selectedRemissao = Remissao.findById(remissao.id)&#13;&#10;               // remissao =null&#13;&#10;               // fecharEditor()&#13;&#10;&#13;&#10;            }else {&#13;&#10;                info.value=&quot;Erro na na gravação da remissão!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;            }&#13;&#10;&#13;&#10;&#13;&#10;        }catch(Exception e){&#13;&#10;            System.println(e.toString())&#13;&#10;        }&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    def printRecibo(){&#13;&#10;        parcelaService.parcelaInstance=parcela&#13;&#10;        parcelaService.creditoInstance=selectedCredito&#13;&#10;      //  Executions.sendRedirect(&quot;/parcela/printParcela/&quot;)&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;pagamentos&quot;])&#13;&#10;    def showAllPagamentos(){&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange(['parcelas','selectedCredito','parcela','selectedPagamento','pagamentos','pagamento','contaCaixa','contaCliente','tEntradas'])&#13;&#10;    def salvarParcela(){&#13;&#10;        if(settingsService.getSettings().pagamentosEmOrdem){&#13;&#10;             def pagamentos = Pagamento.findAllByCredito(selectedCredito).sort{it.id}&#13;&#10;            for(Pagamento pagamento in pagamentos){&#13;&#10;                if(!pagamento.pago){&#13;&#10;                    if(selectedPagamento.id&gt;pagamento.id){&#13;&#10;                        info.value=&quot;Por favor efetue o pagamento da &quot;+pagamento.descricao+&quot; que é anterior a esta e ainda não foi paga!&quot;&#13;&#10;                        info.style =&quot;color:red;font-weight;font-size:12pt;background:back&quot;&#13;&#10;                        selectedPagamento = pagamento&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;&#13;&#10;        try {&#13;&#10;            if(parcela.dataDePagamento&gt;new Date()){&#13;&#10;                parcela.dataDePagamento = new Date()&#13;&#10;                info.value = &quot;Data inválida!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;&#13;&#10;            }&#13;&#10;            if(Parcela.findById(parcela.id)){&#13;&#10;                info.value = &quot;Este Pagamento já foi lançado!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(parcela.formaDePagamento==&quot;transferencia bancária&quot;||parcela.formaDePagamento==&quot;deposito bancário&quot;){&#13;&#10;                if(selectedConta==null){&#13;&#10;                    info.value = &quot;Selecione uma conta Destino válido!&quot;&#13;&#10;                    info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                    return&#13;&#10;                }&#13;&#10;            }&#13;&#10;            if(0&gt;=parcela.valorPago){&#13;&#10;                info.value = &quot;Valor inválido!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(parcela.dataDePagamento==null){&#13;&#10;                info.value = &quot;Data inválido!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:16px;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(parcela.formaDePagamento==null){&#13;&#10;                info.value = &quot;Forma de Pagamento não foi selecionado!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(contaCliente==null){&#13;&#10;                info.value = &quot;ESte cliente não tem conta!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            info.value = &quot;&quot;&#13;&#10;            if(selectedPagamento.pago){&#13;&#10;                info.value = &quot;Esta Parcela já foi paga na Totalidade!&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            if(contaCaixa==null){&#13;&#10;                info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#13;&#10;                info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;                selectedPagamento=null&#13;&#10;                return&#13;&#10;            }&#13;&#10;            List&lt;Pagamento&gt; pagamentoss= new LinkedList&lt;Pagamento&gt;(Pagamento.findAllByCredito(selectedCredito))&#13;&#10;            parcela.setNumeroDoRecibo(contadorService.gerarNumeroDaParcela())&#13;&#10;            Pagamento pagamento = Pagamento.findById(selectedPagamento.id)&#13;&#10;            parcela.pagamento = pagamento&#13;&#10;            parcela.diario = diario&#13;&#10;            Utilizador util = Utilizador.findById(utilizador.id)&#13;&#10;            parcela.utilizador = util&#13;&#10;            BigDecimal totalEmDivida = parcela.pagamento.totalEmDivida*(-1)&#13;&#10;            BigDecimal valorParcial = parcela.valorPago&#13;&#10;            if(parcela.valorPago&gt;totalEmDivida){&#13;&#10;&#13;&#10;                BigDecimal valor = parcela.valorPago - totalEmDivida&#13;&#10;                parcela.valorParcial = totalEmDivida&#13;&#10;                System.println(&quot;valor remanescente&quot;+valor)&#13;&#10;                BigDecimal totalCreditoDivida = 0.0&#13;&#10;                pagamentoss.each {totalCreditoDivida+=it.totalEmDivida}&#13;&#10;                if(valor&gt; totalCreditoDivida*(-1)){&#13;&#10;                    info.value = &quot;O valor remanescente (&quot; +valor+ &quot;)não deve ser maior que o total em dívida (&quot;+ totalCreditoDivida+&quot;) das prestações!&quot;&#13;&#10;                    info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;&#13;&#10;                    return&#13;&#10;                }&#13;&#10;                parcela.descricao+=&quot;*&quot;&#13;&#10;                System.println(valor)&#13;&#10;                if(pagamento.parcelas==null){&#13;&#10;                    pagamento.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#13;&#10;                }&#13;&#10;&#13;&#10;                pagamento.parcelas.add(parcela)&#13;&#10;                parcela.save(failOnError: true)&#13;&#10;                pagamento.merge(failOnError: true)&#13;&#10;              //  lancamentos(parcela)&#13;&#10;&#13;&#10;&#13;&#10;               // System.println(pagamentoss)&#13;&#10;                for(int x=0;x&lt;pagamentoss.size(); x++){&#13;&#10;                    if(valor&gt;0){&#13;&#10;                        Pagamento pagamento1 = Pagamento.findById(pagamentoss[x].id)&#13;&#10;&#13;&#10;                        if(!pagamento1.getPago()){&#13;&#10;                            if(pagamento1.totalEmDivida*(-1)&gt;=valor){&#13;&#10;                                Parcela parcela1 = new Parcela()&#13;&#10;                                parcela1.diario = diario&#13;&#10;                                parcela1.pagamento = pagamento1&#13;&#10;                                parcela1.valorParcial = valor&#13;&#10;                                parcela1.dataDePagamento = parcela.dataDePagamento&#13;&#10;                                parcela1.formaDePagamento = parcela.formaDePagamento&#13;&#10;                                valor = 0&#13;&#10;                                parcela1.descricao=&quot;*Amortização da dívida*&quot;+selectedPagamento.id&#13;&#10;                                parcela1.numeroDoRecibo=parcela.numeroDoRecibo&#13;&#10;                                parcela1.utilizador = util&#13;&#10;                                if(pagamento1.parcelas==null){&#13;&#10;                                    pagamento1.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#13;&#10;                                }&#13;&#10;&#13;&#10;                                pagamento1.parcelas.add(parcela1)&#13;&#10;                                parcela1.save(failOnError: true)&#13;&#10;                                pagamento1.merge(failOnError: true)&#13;&#10;                               // lancamentos(parcela1)&#13;&#10;&#13;&#10;&#13;&#10;                            }else {&#13;&#10;&#13;&#10;                                Parcela parcela2 = new Parcela()&#13;&#10;                                parcela2.diario = diario&#13;&#10;                                parcela2.pagamento = pagamento1&#13;&#10;                                valor-=pagamento1.totalEmDivida*(-1)&#13;&#10;                                parcela2.valorParcial = pagamento1.totalEmDivida*(-1)&#13;&#10;                                parcela2.dataDePagamento = parcela.dataDePagamento&#13;&#10;                                parcela2.formaDePagamento = parcela.formaDePagamento&#13;&#10;                                parcela2.descricao=&quot;*Amortização da dívida*&quot;+selectedPagamento.id&#13;&#10;                                parcela2.numeroDoRecibo = parcela.numeroDoRecibo&#13;&#10;                                parcela2.utilizador = util&#13;&#10;                                if(pagamento1.parcelas==null){&#13;&#10;                                    pagamento1.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#13;&#10;                                }&#13;&#10;&#13;&#10;                                pagamento1.parcelas.add(parcela2)&#13;&#10;                                parcela2.save(failOnError: true)&#13;&#10;                                pagamento1.merge(failOnError: true)&#13;&#10;                               // lancamentos(parcela2)&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;                            }&#13;&#10;                        }&#13;&#10;                    }else break&#13;&#10;&#13;&#10;                }&#13;&#10;&#13;&#10;&#13;&#10;            }else {&#13;&#10;                if(pagamento.parcelas==null){&#13;&#10;                    pagamento.parcelas = new LinkedHashSet&lt;Parcela&gt;()&#13;&#10;                }&#13;&#10;&#13;&#10;                pagamento.parcelas.add(parcela)&#13;&#10;                parcela.valorParcial = parcela.valorPago&#13;&#10;                parcela.save(failOnError: true)&#13;&#10;                pagamento.merge(failOnError: true)&#13;&#10;              //  lancamentos(parcela)&#13;&#10;&#13;&#10;            }&#13;&#10;&#13;&#10;            if(parcela.formaDePagamento==&quot;transferencia bancária&quot;||parcela.formaDePagamento==&quot;deposito bancário&quot;){&#13;&#10;                saida.formaDePagamento = parcela.formaDePagamento&#13;&#10;                saida.valor = valorParcial&#13;&#10;                saida.dataDePagamento = parcela.dataDePagamento&#13;&#10;                saida.descricao=parcela.descricao&#13;&#10;&#13;&#10;                salvarSaida()&#13;&#10;            }&#13;&#10;&#13;&#10;            sessionStorageService.parcela = parcela&#13;&#10;            sessionStorageService.credito = selectedCredito&#13;&#10;            info.value = &quot;Pagamento efetivado com sucesso!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            bt_salvar.label = &quot;Pago!&quot;&#13;&#10;&#13;&#10;          //  selectedPagamento = Pagamento.findById(selectedPagamento.id)&#13;&#10;           // Executions.sendRedirect(&quot;/parcela/printParcela/&quot;)&#13;&#10;        }catch(Exception e){&#13;&#10;            info.value = &quot;Erro na gravação dos dados!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            System.println(e.toString())&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;    def lancamentos(Parcela parcel){&#13;&#10;&#13;&#10;        Transferencia t = new Transferencia()&#13;&#10;        t.utilizador = utilizador&#13;&#10;        t.origem = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#13;&#10;        t.destino = Conta.findById(contaCaixa.id)&#13;&#10;        t.descricao = parcel.descricao+&quot;-&quot;+parcela.formaDePagamento&#13;&#10;        t.valor = parcel.valorParcial&#13;&#10;        t.diario = diario&#13;&#10;        t.save(failOnError: true)&#13;&#10;        Transacao tCredito = new Transacao()&#13;&#10;        Transacao tDebito = new Transacao()&#13;&#10;        tCredito.valor = parcel.valorParcial&#13;&#10;        tCredito.descricao=parcel.descricao+&quot;-&quot;+parcela.formaDePagamento&#13;&#10;        tDebito.descricao = parcel.descricao+&quot;-&quot;+parcela.formaDePagamento&#13;&#10;        tDebito.valor = parcel.valorParcial&#13;&#10;        tCredito.credito = true&#13;&#10;        tDebito.credito = false&#13;&#10;        def credora = Conta.findById(contaCliente.id)&#13;&#10;        def devedora = Conta.findById(contaCaixa.id)&#13;&#10;        if (credora?.transacoes == null) {&#13;&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        if (devedora?.transacoes == null) {&#13;&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        tCredito.save(failOnError: true)&#13;&#10;        tDebito.save(failOnError: true)&#13;&#10;        credora.transacoes.add(tCredito)&#13;&#10;        devedora.transacoes.add(tDebito)&#13;&#10;        credora.merge(failOnError: true)&#13;&#10;        devedora.merge(failOnError: true)&#13;&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#13;&#10;        info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;    }&#13;&#10;    def lancamentoEntrada(Parcela parcel){&#13;&#10;&#13;&#10;        Transferencia t = new Transferencia()&#13;&#10;        t.utilizador = utilizador&#13;&#10;        t.parcela = parcel&#13;&#10;        t.origem = Conta.findById(selectedConta.id)&#13;&#10;        t.destino = Conta.findById(contaCaixa.id)&#13;&#10;        t.descricao = parcel.descricao+&quot;-&quot;+parcel.id&#13;&#10;        t.valor = parcel.valorPago&#13;&#10;        t.diario = diario&#13;&#10;        t.save(failOnError: true)&#13;&#10;        Transacao tCredito = new Transacao()&#13;&#10;        Transacao tDebito = new Transacao()&#13;&#10;        tCredito.valor = parcel.valorPago&#13;&#10;        tCredito.descricao=parcel.descricao+&quot;-&quot;+parcel.id&#13;&#10;        tDebito.descricao = parcel.descricao+&quot;-&quot;+parcel.id&#13;&#10;        tDebito.valor = parcel.valorPago&#13;&#10;        tCredito.credito = true&#13;&#10;        tDebito.credito = false&#13;&#10;        def credora = Conta.findById(selectedConta.id)&#13;&#10;        def devedora = Conta.findById(contaCaixa.id)&#13;&#10;        if (credora?.transacoes == null) {&#13;&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        if (devedora?.transacoes == null) {&#13;&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        tCredito.save(failOnError: true)&#13;&#10;        tDebito.save(failOnError: true)&#13;&#10;        credora.transacoes.add(tCredito)&#13;&#10;        devedora.transacoes.add(tDebito)&#13;&#10;        credora.merge(failOnError: true)&#13;&#10;        devedora.merge(failOnError: true)&#13;&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#13;&#10;        info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;    }&#13;&#10;    def lancarRemissao(Remissao remis){&#13;&#10;&#13;&#10;        Transferencia t = new Transferencia()&#13;&#10;        t.utilizador = utilizador&#13;&#10;        t.destino = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#13;&#10;        t.origem = Conta.findById(selectedConta.id)&#13;&#10;        t.descricao = remis.descricao+&quot;-&quot;+remissao.id&#13;&#10;        t.valor = remis.valorDaRemissao&#13;&#10;        t.diario = diario&#13;&#10;        t.save(failOnError: true)&#13;&#10;        Transacao tCredito = new Transacao()&#13;&#10;        Transacao tDebito = new Transacao()&#13;&#10;        tCredito.valor = remis.valorDaRemissao&#13;&#10;        tCredito.descricao=remis.descricao+&quot;-&quot;+remis.id&#13;&#10;        tDebito.descricao = remis.descricao+&quot;-&quot;+remissao&#13;&#10;        tDebito.valor = remis.valorDaRemissao&#13;&#10;        tCredito.credito = true&#13;&#10;        tDebito.credito = false&#13;&#10;        def credora = Conta.findById(selectedConta.id)&#13;&#10;        def devedora = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#13;&#10;        if (credora?.transacoes == null) {&#13;&#10;            credora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        if (devedora?.transacoes == null) {&#13;&#10;            devedora.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;        }&#13;&#10;        tCredito.save(failOnError: true)&#13;&#10;        tDebito.save(failOnError: true)&#13;&#10;        credora.transacoes.add(tCredito)&#13;&#10;        devedora.transacoes.add(tDebito)&#13;&#10;        credora.merge(failOnError: true)&#13;&#10;        devedora.merge(failOnError: true)&#13;&#10;        info.value = &quot;Operações feitas com sucesso!&quot;&#13;&#10;        info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;    }&#13;&#10;    Utilizador getUtilizador() {&#13;&#10;        utilizador = springSecurityService.currentUser as Utilizador&#13;&#10;        return utilizador&#13;&#10;    }&#13;&#10;&#13;&#10;    Conta getContaCliente() {&#13;&#10;       return contaCliente&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange(['selectedPagamento','caixas','contaCaixa'])&#13;&#10;&#13;&#10;    def verificarCondicoes(){&#13;&#10;        info.value= &quot;&quot;&#13;&#10;       // def pagamentos = Pagamento.findAllByCredito(selectedCredito)&#13;&#10;       // def totalCreditoEmDivida = 0.0&#13;&#10;      //  pagamentos.each {totalCreditoEmDivida+=it.totalEmDivida}&#13;&#10;        /*if(parcela.valorPago&gt;selectedCredito.valorEmDivida*(-1)){&#13;&#10;            info.value = &quot;O valor alocado (&quot; +parcela.valorPago +&quot;) não deve ser maior que o total em dívida (&quot;+ selectedCredito.valorEmDivida +&quot;) das prestações!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            parcela.valorPago = selectedCredito.valorEmDivida*(-1)&#13;&#10;            return&#13;&#10;        }*/&#13;&#10;        if(selectedPagamento.pago){&#13;&#10;            info.value = &quot;Esta Parcela já foi paga na Totalidade!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if(selectedPagamento.totalEmDivida.setScale(2, RoundingMode.HALF_EVEN)*(-1)&gt;parcela.valorPago.setScale(2, RoundingMode.HALF_EVEN)){&#13;&#10;            info.value = &quot;O valor não cobre o total em dívida&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;        }&#13;&#10;        if(selectedPagamento.totalEmDivida.setScale(2, RoundingMode.HALF_EVEN)*(-1)==parcela.valorPago.setScale(2, RoundingMode.HALF_EVEN)){&#13;&#10;            info.value = &quot;&quot;&#13;&#10;            info.style = &quot;color:red;font-weight,font-size:14pt;background:back&quot;&#13;&#10;        }&#13;&#10;        if(selectedPagamento.totalEmDivida.setScale(2, RoundingMode.HALF_EVEN)*(-1)&lt;parcela.valorPago.setScale(2,RoundingMode.HALF_EVEN)){&#13;&#10;            System.println(selectedPagamento.totalEmDivida*(-1)-parcela.valorPago)&#13;&#10;            info.value = &quot;O valor é superior ao valor em dívida desta prestação&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    def cleanInfo(){&#13;&#10;        info.value=&quot;&quot;&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange(['selectedPagamento',&quot;parcela&quot;,&quot;selectedCliente&quot;])&#13;&#10;    def calcularMoras(){&#13;&#10;        pagamentoService.calcularMoras(selectedPagamento,parcela)&#13;&#10;        verificarCondicoes()&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;    Parcela getParcela() {&#13;&#10;        return parcela&#13;&#10;    }&#13;&#10;&#13;&#10;    void setParcela(Parcela parcela) {&#13;&#10;        this.parcela = parcela&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange(['selectedPagamento','saida','parcelaEntrada',&quot;remissao&quot;,&quot;pagamentos&quot;])&#13;&#10;    @Command&#13;&#10;    void fecharEditor(){&#13;&#10;        info.value = &quot;&quot;&#13;&#10;        selectedPagamento=null&#13;&#10;        saida= null&#13;&#10;        parcelaEntrada = null&#13;&#10;        bt_fechar_caixa.visible =true&#13;&#10;        dv_filtragem.visible = true&#13;&#10;        lb_pagamentos.visible = true&#13;&#10;        remissao = null&#13;&#10;        pagamentos.clear()&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange(['selectedPagamentoo','selectedRemissao','remissoes',&quot;selectedCreditoo&quot;,&quot;pagamentoss&quot;])&#13;&#10;    def fecharEditorRemissao(){&#13;&#10;        selectedPagamentoo=null&#13;&#10;        remissao = null&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;diario&quot;])&#13;&#10;    def mudarDiario(){&#13;&#10;        diario = getDiario()&#13;&#10;        if(diario.estado ==&quot;pendente&quot;){&#13;&#10;            if(diarioService.findByEstado(&quot;aberto&quot;)){&#13;&#10;                diario = diarioService.findByEstado(&quot;aberto&quot;)&#13;&#10;                bt_diario.style = &quot;background:#7fb3d5;font-size:26px&quot;&#13;&#10;            }&#13;&#10;&#13;&#10;        }else {&#13;&#10;            if(diarioService.findByEstado(&quot;pendente&quot;)){&#13;&#10;                diario = diarioService.findByEstado(&quot;pendente&quot;)&#13;&#10;                bt_diario.style = &quot;background:#f1948a;font-size:26px&quot;&#13;&#10;            }&#13;&#10;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    Diario getDiario() {&#13;&#10;        return diario&#13;&#10;    }&#13;&#10;&#13;&#10;    String getId() {&#13;&#10;        return id&#13;&#10;    }&#13;&#10;&#13;&#10;    void setId(String id) {&#13;&#10;        this.id = id&#13;&#10;    }&#13;&#10;&#13;&#10;    Pagamento getSelectedPagamento() {&#13;&#10;&#13;&#10;        return selectedPagamento&#13;&#10;    }&#13;&#10;&#13;&#10;    void setSelectedPagamento(Pagamento selectedPagamento) {&#13;&#10;        bt_salvar.label=&quot;Salvar&quot;&#13;&#10;        this.selectedPagamento = selectedPagamento&#13;&#10;    }&#13;&#10;&#13;&#10;    String getFilter() {&#13;&#10;        return filter&#13;&#10;    }&#13;&#10;&#13;&#10;    void setFilter(String filter) {&#13;&#10;        this.filter = filter&#13;&#10;    }&#13;&#10;&#13;&#10;    @Init init() {&#13;&#10;        getUtilizador()&#13;&#10;        diario = diarioService.getDiario()&#13;&#10;      //  sessionStorageService.parcela=null&#13;&#10;      //  sessionStorageService.credito = null&#13;&#10;       // utilizador = Utilizador.findById(springSecurityService.principal?.id)&#13;&#10;&#13;&#10;       /* if(pagamentoService.pagamentoInstance?.id!=null){&#13;&#10;          pagamento_id=pagamentoService.pagamentoInstance.numeroDePagamento&#13;&#10;&#13;&#10;        }*/&#13;&#10;&#13;&#10;&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange(['selectedPagamento',&quot;parcela&quot;,&quot;contaCliente&quot;,&quot;contaCaixa&quot;,&quot;saida&quot;,&quot;diario&quot;])&#13;&#10;    def  showSelectedPagamento(){&#13;&#10;        info.value = &quot;&quot;&#13;&#10;        diario = diarioService.getDiario()&#13;&#10;        if(utilizador?.contas==null){&#13;&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#13;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            selectedPagamento=null&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;        parcela = new Parcela()&#13;&#10;        parcela.dataDePagamento = new Date()&#13;&#10;        parcela.formaDePagamento = &quot;numerário&quot;&#13;&#10;        parcela.descricao = &quot;Amortização da dívida&quot;&#13;&#10;        saida = null&#13;&#10;        remissao = null&#13;&#10;      // contaCliente = Conta.findByNumeroDaConta(selectedPagamento.credito.cliente.id.toString())&#13;&#10;        contaCliente = contadorService.getByNumeroDacoonta(selectedCliente.id.toString())&#13;&#10;      //  def pagamentos = Pagamento.findAllByCredito(selectedPagamento.credito)&#13;&#10;        def pagamentos = pagamentoService.getByCredito(selectedCredito)&#13;&#10;        for(Pagamento pagamento in pagamentos){&#13;&#10;            if(!pagamento.pago){&#13;&#10;                if(selectedPagamento.id&gt;pagamento.id){&#13;&#10;                    info.value=&quot;Por favor efetue o pagamento da &quot;+pagamento.descricao+&quot; que é anterior a esta e ainda não foi paga!&quot;&#13;&#10;                    info.style =&quot;color:red;font-weight;font-size:12pt;background:back&quot;&#13;&#10;                }&#13;&#10;            }&#13;&#10;&#13;&#10;        }&#13;&#10;&#13;&#10;&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;remissao&quot;,&quot;selectedPagamentoo&quot;,&quot;selectedRemissao&quot;])&#13;&#10;    def showSelectedPag(){&#13;&#10;        remissao = new Remissao()&#13;&#10;        selectedPagamentoo.getTotalEmDivida()&#13;&#10;        selectedRemissao = null&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;selectedPagamento&quot;,'parcela',&quot;contaCliente&quot;,&quot;saida&quot;,&quot;pagamento_id&quot;])&#13;&#10;    findItem(){&#13;&#10;        info.value=&quot;&quot;&#13;&#10;           if(utilizador?.contas==null){&#13;&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#13;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            selectedPagamento=null&#13;&#10;            return&#13;&#10;        }&#13;&#10;&#13;&#10;&#13;&#10;        if(contaCaixa==null){&#13;&#10;            info.value=&quot;O Utilizador &quot;+utilizador.username+&quot; não tem nehuma conta associada de forma poder lançar pagamentos!&quot;&#13;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            selectedPagamento=null&#13;&#10;            return&#13;&#10;        }&#13;&#10;        parcela = new Parcela()&#13;&#10;        parcela.diario = diario&#13;&#10;        parcela.dataDePagamento = new Date()&#13;&#10;        parcela.formaDePagamento = &quot;numerário&quot;&#13;&#10;        parcela.descricao = &quot;Amortização da dívida&quot;&#13;&#10;        saida = null&#13;&#10;        remissao = null&#13;&#10;        selectedPagamento = Pagamento.findByNumeroDePagamento(id)&#13;&#10;&#13;&#10;&#13;&#10;        if(selectedPagamento?.id!=null){&#13;&#10;            //    Executions.sendRedirect(&quot;/pagamento/show/&quot;+selectedPagamento.id)&#13;&#10;            pagamentoService.calcularMoras(selectedPagamento)&#13;&#10;            contaCliente = Conta.findByNumeroDaConta(selectedCredito.cliente.id.toString())&#13;&#10;            pagamento_id=selectedPagamento.numeroDePagamento&#13;&#10;            def pagamentos = Pagamento.findAllByCredito(selectedCredito)&#13;&#10;            for(Pagamento pagamento in pagamentos){&#13;&#10;                if(!pagamento.pago){&#13;&#10;                    if(selectedPagamento.id&gt;pagamento.id){&#13;&#10;                        info.value=&quot;Por favor efetue o pagamento da &quot;+pagamento.descricao+&quot; que é anterior a esta e ainda não foi paga!&quot;&#13;&#10;                        info.style =&quot;color:red;font-weight;font-size:12pt;background:back&quot;&#13;&#10;                    }&#13;&#10;                }&#13;&#10;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    ListModelList&lt;Pagamento&gt; getPagamentos() {&#13;&#10;        if(pagamentos==null){&#13;&#10;            pagamentos = new ArrayList&lt;&gt;()&#13;&#10;        }&#13;&#10;        if(allPagamentos){&#13;&#10;            pagamentos = Pagamento.findAllByCredito(selectedCredito).sort{it.id}&#13;&#10;        }else&#13;&#10;            pagamentos = Pagamento.findAllByCreditoAndPago(selectedCredito,false).sort{it.id}&#13;&#10;        return pagamentos&#13;&#10;    }&#13;&#10;&#13;&#10;    ListModelList&lt;Pagamento&gt; getPagamentoss() {&#13;&#10;        if(pagamentoss==null){&#13;&#10;            pagamentoss = new ArrayList&lt;&gt;()&#13;&#10;        }&#13;&#10;            pagamentoss = Pagamento.findAllByCreditoAndPago(selectedCreditoo,false).sort{it.id}&#13;&#10;        return pagamentoss&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;parcelas&quot;,&quot;sParcela&quot;])&#13;&#10;    @Command&#13;&#10;    void  deleteRecibo(){&#13;&#10;&#13;&#10;        try {&#13;&#10;            Utilizador user = springSecurityService.currentUser as Utilizador&#13;&#10;            if (!user.authorities.any { it.authority == &quot;PARCELA_DELETE&quot; }) {&#13;&#10;                info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#13;&#10;                info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;                return&#13;&#10;            }&#13;&#10;            selectedPagamento.parcelas.remove(sParcela)&#13;&#10;            selectedPagamento.merge(failOnError: true)&#13;&#10;          sParcela.delete(failOnError: true)&#13;&#10;            info.value=&quot;O Pagamento selecionada foi eliminado com sucesso!&quot;&#13;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;&#13;&#10;        }catch(Exception e){&#13;&#10;            System.println(e.toString())&#13;&#10;            info.value=&quot;Erro na eliminação do recibo!&quot;&#13;&#10;            info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;selectedRemissao&quot;])&#13;&#10;    def showDelMessage(){&#13;&#10;        info.value=&quot;Faça double click para eliminar o item &quot;+sParcela.descricao&#13;&#10;        info.style =&quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;    }&#13;&#10;&#13;&#10;    @NotifyChange([&quot;pagamentos&quot;,&quot;info&quot;,&quot;selectedRemissao&quot;,&quot;remissao&quot;])&#13;&#10;    @Command&#13;&#10;    void doSearch() {&#13;&#10;        info.value = &quot;&quot;&#13;&#10;        pagamentos.clear()&#13;&#10;        remissoes.clear()&#13;&#10;        List&lt;Pagamento&gt; allItems = Pagamento.findAllByCredito(selectedCredito)&#13;&#10;        List&lt;Remissao&gt; allItem = Remissao.all&#13;&#10;        if (filter == null || &quot;&quot;.equals(filter)) {&#13;&#10;           pagamentos.clear()&#13;&#10;            remissoes.clear()&#13;&#10;            selectedRemissao = null&#13;&#10;            remissao = null&#13;&#10;&#13;&#10;        } else {&#13;&#10;           /* for (Pagamento item : allItems) {&#13;&#10;                if (item.credito.cliente.nome.toString().toLowerCase().indexOf(filter.toLowerCase()) &gt;= 0 ||&#13;&#10;                        item.getId().toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.dataPrevistoDePagamento.format('dd/MM/yyyy').toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.dataPrevistoDePagamento.format('dd-MM-yyyy').toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.pago.toString().toLowerCase().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.valorPago.toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.valorPagoAmortizacao.toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.valorDeJuros.toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.numeroDePagamento.indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.totalEmDivida.toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.credito.cliente.nome.toLowerCase().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.diasDeMora.toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.valorDaPrestacao.toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.descricao.toLowerCase().indexOf(filter) &gt;= 0) {&#13;&#10;                    pagamentos.add(item)&#13;&#10;                }&#13;&#10;&#13;&#10;            }*/&#13;&#10;            for (Remissao item : allItem) {&#13;&#10;                if (item.pagamento.credito.cliente.nome.toString().toLowerCase().indexOf(filter.toLowerCase()) &gt;= 0 ||&#13;&#10;                        item.getId().toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.createdDate.format('dd/MM/yyyy').toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.createdDate.format('dd-MM-yyyy').toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.diario.numeroDoDiario.toString().toLowerCase().indexOf(filter) &gt;= 0 ||&#13;&#10;                        item.descricao.toString().indexOf(filter) &gt;= 0 ||&#13;&#10;                       item.contaOrigem.designacaoDaConta.toLowerCase().indexOf(filter) &gt;= 0) {&#13;&#10;                    remissoes.add(item)&#13;&#10;                }&#13;&#10;&#13;&#10;            }&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Command&#13;&#10;    def alertDelete(){&#13;&#10;        Utilizador user = springSecurityService.currentUser as Utilizador&#13;&#10;        if (!user.authorities.any { it.authority == &quot;REMISSAO_DELETE&quot; }) {&#13;&#10;            info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;        }&#13;&#10;        else if(selectedRemissao?.pagamento?.credito?.invalido){&#13;&#10;            info.value=&quot;Este credito já foi invalidado!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14ptp;background:back&quot;&#13;&#10;&#13;&#10;        }&#13;&#10;&#13;&#10;        else {&#13;&#10;            info.value=&quot; Faça Double Click para executar esta operação!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;        }&#13;&#10;    }&#13;&#10;    @Command&#13;&#10;    @NotifyChange([&quot;selectedRemissao&quot;,&quot;remissoes&quot;,&quot;selectedPagamento&quot;])&#13;&#10;    def deleteRemissao(){&#13;&#10;        Utilizador user = springSecurityService.currentUser as Utilizador&#13;&#10;        if (!user.authorities.any { it.authority == &quot;REMISSAO_DELETE&quot; }) {&#13;&#10;            info.value=&quot;Este utilizador não tem permissão para executar esta acção !&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        if (selectedRemissao.id == null) {&#13;&#10;            info.value=&quot;Seleccione uma remissão!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;            return&#13;&#10;        }&#13;&#10;        try {&#13;&#10;            selectedRemissao = Remissao.findById(selectedRemissao.id)&#13;&#10;            def contaCapital = Conta.findById(selectedRemissao.contaOrigem.id)&#13;&#10;            Transacao tCredito = new Transacao()&#13;&#10;            Transacao tDebito = new Transacao()&#13;&#10;            tCredito.setValor(selectedRemissao.valorDaRemissao)&#13;&#10;            tDebito.setValor(selectedRemissao.valorDaRemissao)&#13;&#10;            tCredito.descricao = &quot;estorno da remissão da parcela  Nº:&quot;+selectedRemissao.pagamento.numeroDePagamento&#13;&#10;            tDebito.descricao =  &quot;estorno da remissão da Parcela Nº:&quot;+selectedRemissao.pagamento.numeroDePagamento&#13;&#10;            System.println(&quot;tCredito&quot;+tCredito.valor)&#13;&#10;            System.println(&quot;tDebito&quot;+tDebito.valor)&#13;&#10;            tCredito.credito = true&#13;&#10;            tDebito.credito = false&#13;&#10;            tCredito.save()&#13;&#10;            tDebito.save()&#13;&#10;            contaCliente = Conta.findByNumeroDaConta(selectedRemissao.pagamento.credito.cliente.id.toString())&#13;&#10;            if (contaCapital.transacoes == null) {&#13;&#10;                contaCapital.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;            }&#13;&#10;            if (contaCliente.transacoes == null) {&#13;&#10;                contaCliente.transacoes = new LinkedHashSet&lt;Transacao&gt;()&#13;&#10;            }&#13;&#10;            contaCapital.transacoes.add(tDebito)&#13;&#10;            contaCliente.transacoes.add(tCredito)&#13;&#10;            contaCapital.merge(failOnError: true)&#13;&#10;            contaCliente.merge(failOnError: true)&#13;&#10;            def pagamentoDb = Pagamento.findById(selectedRemissao.pagamento.id)&#13;&#10;            System.println(pagamentoDb)&#13;&#10;            pagamentoDb.remissoes.remove(selectedRemissao)&#13;&#10;            selectedRemissao.delete()&#13;&#10;            pagamentoDb.merge failOnError: true&#13;&#10;&#13;&#10;            info.value=&quot;REMISSÃO DA DÍVIDA invalidado com sucesso!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;&#13;&#10;        }catch(Exception e){&#13;&#10;            System.println(e.toString())&#13;&#10;            info.value = &quot;Erro na eliminação da remissão!&quot;&#13;&#10;            info.style = &quot;color:red;font-weight;font-size:14pt;background:back&quot;&#13;&#10;        }&#13;&#10;&#13;&#10;    }&#13;&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/grails-app/zul/credito/printSimulador.zul">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/grails-app/zul/credito/printSimulador.zul" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;zk xmlns=&quot;http://www.zkoss.org/2005/zul&quot;&#10;    xmlns:h=&quot;http://www.w3.org/1999/xhtml&quot;&#10;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;    xsi:schemaLocation=&quot;http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd&quot;&gt;&#10;&#10;    &lt;window apply=&quot;grailsBindComposer&quot;&#10;            viewModel=&quot;@id('vm') @init('printSimuladorViewModel')&quot;&gt;&#10;        &lt;style&gt;&#10;            body { background-color: #eaeaea; }&#10;            .z-textbox{ border-style : none; background: #FFF}&#10;            .z-intbox{ border-style : none; background: #FFF}&#10;            .z-doublebox{ border-style : none; background: #FFF}&#10;            .z-listcell{ border-style : none; background: #FFF}&#10;&#10;        &lt;/style&gt;&#10;        &lt;hbox align=&quot;center&quot;&gt;&#10;            &lt;image src=&quot;${z.resource(dir:'images', file:'logo_laulane_m.png')}&quot;/&gt;&#10;        &lt;/hbox&gt;&#10;        &lt;hbox&gt;&#10;            &lt;grid style=&quot;margin-top:20px&quot; width=&quot;400px&quot;&gt;&#10;                &lt;columns&gt;&#10;                    &lt;column width=&quot;150px&quot;/&gt;&#10;                    &lt;column width=&quot;&quot;/&gt;&#10;&#10;                &lt;/columns&gt;&#10;                &lt;rows&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Periodicidade&quot;/&gt;&#10;                        &lt;label value=&quot;@load(vm.credito.periodicidade)&quot;/&gt;&#10;&#10;                    &lt;/row&gt;&#10;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Valor Creditado&quot;/&gt;&#10;&#10;                        &lt;label style=&quot;font-size:14pt&quot;&#10;                               value=&quot;@load(vm.credito.valorCreditado)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                        MZN&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Número de Prestações&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.credito.numeroDePrestacoes)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;&#10;                &lt;/rows&gt;&#10;            &lt;/grid&gt;&#10;            &lt;grid style=&quot;margin-top:20px&quot; height=&quot;112px&quot; width=&quot;280px&quot;&gt;&#10;                &lt;columns&gt;&#10;                    &lt;column width=&quot;150px&quot;/&gt;&#10;                    &lt;column width=&quot;&quot;/&gt;&#10;                &lt;/columns&gt;&#10;                &lt;rows&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Taxa Anual (%)&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.juros)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Juros de Mora (%)&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.jurosDeMora)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Forma de Cálculo&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.taxaFixa)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;&#10;&#10;                &lt;/rows&gt;&#10;            &lt;/grid&gt;&#10;        &lt;/hbox&gt;&#10;&#10;        &lt;grid width=&quot;684px&quot; model=&quot;@bind(vm.prestacoes)&quot;&gt;&#10;            &lt;columns&gt;&#10;                &lt;column width=&quot;55px&quot;&gt;&#10;                    &lt;label value=&quot;Nº&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column width=&quot;80px&quot;&gt;&#10;                    &lt;label value=&quot;Data&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column width=&quot;150px&quot;&gt;&#10;                    &lt;label value=&quot;Saldo Devedor&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column width=&quot;150px&quot;&gt;&#10;                    &lt;label value=&quot;Valor da Prestação&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column width=&quot;150px&quot;&gt;&#10;                    &lt;label value=&quot;Amortização&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column width=&quot;99px&quot;&gt;&#10;                    &lt;label value=&quot;Juros&quot;/&gt;&#10;                &lt;/column&gt;&#10;            &lt;/columns&gt;&#10;            &lt;template name=&quot;model&quot;&gt;&#10;                &lt;row&gt;&#10;                    &lt;label value=&quot;@load(forEachStatus.index+1)&quot;/&gt;&#10;                    &lt;label value=&quot;@load(each.dataPrevistoDePagamento) @converter('formatedDate', format='dd/MM')&quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.saldoDevedor) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.valorDaPrestacao * -1) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.valorDeAmortizacao * -1) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.valorDeJuros) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;&#10;                &lt;/row&gt;&#10;&#10;            &lt;/template&gt;&#10;            &lt;foot&gt;&#10;                &lt;footer&gt;&lt;/footer&gt;&#10;                &lt;footer&gt;&#10;                    &lt;label value=&quot;TOTAIS&quot; style=&quot;font-weight:bold&quot;/&gt;&#10;                &lt;/footer&gt;&#10;                &lt;footer&gt;&lt;/footer&gt;&#10;                &lt;footer&gt;&#10;                    &lt;label value=&quot;@load(vm.totalPrestacoes * -1)@converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-weight:bold&quot;/&gt;&#10;                &lt;/footer&gt;&#10;                &lt;footer&gt;&#10;                    &lt;label value=&quot;@load(vm.totalamortizacao * -1)@converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-weight:bold&quot;/&gt;&#10;                &lt;/footer&gt;&#10;                &lt;footer&gt;&#10;                    &lt;label value=&quot;@load(vm.totaljuros)@converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-weight:bold&quot;/&gt;&#10;                &lt;/footer&gt;&#10;            &lt;/foot&gt;&#10;        &lt;/grid&gt;&#10;&#10;&#10;    &lt;/window&gt;&#10;&#10;&lt;/zk&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;zk xmlns=&quot;http://www.zkoss.org/2005/zul&quot;&#13;&#10;    xmlns:h=&quot;http://www.w3.org/1999/xhtml&quot;&#13;&#10;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#13;&#10;    xsi:schemaLocation=&quot;http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd&quot;&gt;&#13;&#10;&#13;&#10;    &lt;window apply=&quot;grailsBindComposer&quot;&#13;&#10;            viewModel=&quot;@id('vm') @init('printSimuladorViewModel')&quot;&gt;&#13;&#10;        &lt;style&gt;&#13;&#10;            body { background-color: #eaeaea; }&#13;&#10;            .z-textbox{ border-style : none; background: #FFF}&#13;&#10;            .z-intbox{ border-style : none; background: #FFF}&#13;&#10;            .z-doublebox{ border-style : none; background: #FFF}&#13;&#10;            .z-listcell{ border-style : none; background: #FFF}&#13;&#10;&#13;&#10;        &lt;/style&gt;&#13;&#10;        &lt;hbox align=&quot;center&quot;&gt;&#13;&#10;            &lt;image src=&quot;${z.resource(dir:'images', file:'logo_laulane_m.png')}&quot;/&gt;&#13;&#10;        &lt;/hbox&gt;&#13;&#10;        &lt;hbox&gt;&#13;&#10;            &lt;grid style=&quot;margin-top:20px&quot; width=&quot;400px&quot;&gt;&#13;&#10;                &lt;columns&gt;&#13;&#10;                    &lt;column width=&quot;150px&quot;/&gt;&#13;&#10;                    &lt;column width=&quot;&quot;/&gt;&#13;&#10;&#13;&#10;                &lt;/columns&gt;&#13;&#10;                &lt;rows&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Periodicidade&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@load(vm.credito.periodicidade)&quot;/&gt;&#13;&#10;&#13;&#10;                    &lt;/row&gt;&#13;&#10;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Valor Creditado&quot;/&gt;&#13;&#10;&#13;&#10;                        &lt;label style=&quot;font-size:14pt&quot;&#13;&#10;                               value=&quot;@load(vm.credito.valorCreditado)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;                        MZN&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Número de Prestações&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.credito.numeroDePrestacoes)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;&#13;&#10;                &lt;/rows&gt;&#13;&#10;            &lt;/grid&gt;&#13;&#10;            &lt;grid style=&quot;margin-top:20px&quot; height=&quot;112px&quot; width=&quot;280px&quot;&gt;&#13;&#10;                &lt;columns&gt;&#13;&#10;                    &lt;column width=&quot;150px&quot;/&gt;&#13;&#10;                    &lt;column width=&quot;&quot;/&gt;&#13;&#10;                &lt;/columns&gt;&#13;&#10;                &lt;rows&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Taxa Anual (%)&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.juros)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Juros de Mora (%)&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.jurosDeMora)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Forma de Cálculo&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.taxaFixa)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;&#13;&#10;&#13;&#10;                &lt;/rows&gt;&#13;&#10;            &lt;/grid&gt;&#13;&#10;        &lt;/hbox&gt;&#13;&#10;&#13;&#10;        &lt;grid width=&quot;684px&quot; model=&quot;@bind(vm.prestacoes)&quot; style=&quot;overflow:hidden;&quot;&gt;&#13;&#10;            &lt;columns&gt;&#13;&#10;                &lt;column width=&quot;40px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Nº&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column width=&quot;70px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Data&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column width=&quot;120px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Saldo Devedor&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column width=&quot;130px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Valor da Prestação&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column width=&quot;130px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Amortização&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column width=&quot;94px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Juros&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;            &lt;/columns&gt;&#13;&#10;            &lt;template name=&quot;model&quot;&gt;&#13;&#10;                &lt;row&gt;&#13;&#10;                    &lt;label value=&quot;@load(forEachStatus.index+1)&quot; style=&quot;font-size:11px&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@load(each.dataPrevistoDePagamento) @converter('formatedDate', format='dd/MM')&quot; style=&quot;font-size:11px&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.saldoDevedor) @converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-size:11px&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.valorDaPrestacao * -1) @converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-size:11px&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.valorDeAmortizacao * -1) @converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-size:11px&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.valorDeJuros) @converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-size:11px&quot;/&gt;&#13;&#10;&#13;&#10;                &lt;/row&gt;&#13;&#10;&#13;&#10;            &lt;/template&gt;&#13;&#10;            &lt;foot&gt;&#13;&#10;                &lt;footer&gt;&lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&#13;&#10;                    &lt;label value=&quot;TOTAIS&quot; style=&quot;font-weight:bold&quot;/&gt;&#13;&#10;                &lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&#13;&#10;                    &lt;label value=&quot;@load(vm.totalPrestacoes * -1)@converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-weight:bold&quot;/&gt;&#13;&#10;                &lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&#13;&#10;                    &lt;label value=&quot;@load(vm.totalamortizacao * -1)@converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-weight:bold&quot;/&gt;&#13;&#10;                &lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&#13;&#10;                    &lt;label value=&quot;@load(vm.totaljuros)@converter('formatedNumber', format='###,##0.00')&quot; style=&quot;font-weight:bold&quot;/&gt;&#13;&#10;                &lt;/footer&gt;&#13;&#10;            &lt;/foot&gt;&#13;&#10;        &lt;/grid&gt;&#13;&#10;&#13;&#10;&#13;&#10;    &lt;/window&gt;&#13;&#10;&#13;&#10;&lt;/zk&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/grails-app/zul/credito/simulador.zul">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/grails-app/zul/credito/simulador.zul" />
              <option name="originalContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#10;&#10;&lt;zk xmlns=&quot;http://www.zkoss.org/2005/zul&quot;&#10;    xmlns:h=&quot;http://www.w3.org/1999/xhtml&quot;&#10;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#10;    xsi:schemaLocation=&quot;http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd&quot;&gt;&#10;&#10;    &lt;window apply=&quot;grailsBindComposer&quot;&#10;            viewModel=&quot;@id('vm') @init('simuladorViewModel')&quot;&gt;&#10;        &lt;style&gt;&#10;            body { background-color: #eaeaea; }&#10;            .z-textbox{ border-style : none; background: #FFF}&#10;            .z-intbox{ border-style : none; background: #FFF}&#10;            .z-doublebox{ border-style : none; background: #FFF}&#10;            .z-listcell{ border-style : none; background: #FFF}&#10;&#10;        &lt;/style&gt;&#10;        &lt;label id=&quot;info&quot;/&gt;&#10;        &lt;hbox&gt;&#10;            &lt;grid width=&quot;450px&quot;&gt;&#10;                &lt;columns&gt;&#10;                    &lt;column width=&quot;&quot;/&gt;&#10;                    &lt;column width=&quot;&quot;/&gt;&#10;&#10;                &lt;/columns&gt;&#10;                &lt;rows&gt;&#10;                    &lt;row id=&quot;rw_def&quot;&gt;&#10;                        &lt;label value=&quot;Def. De crédito&quot;/&gt;&#10;                        &lt;combobox constraint=&quot;no empty&quot; id=&quot;cb_def&quot; onSelect=&quot;@command('showDetails')&quot;&#10;                                  selectedItem=&quot;@bind(vm.selectedDefinicaoDeCredito)&quot; model=&quot;@load(vm.definicoes)&quot;&#10;                                  hflex=&quot;1&quot;&#10;                                  mold=&quot;rounded&quot; autodrop=&quot;true&quot; autocomplete=&quot;true&quot;&gt;&#10;                            &lt;template name=&quot;model&quot;&gt;&#10;                                &lt;comboitem onClick=&quot;@command('')&quot; label=&quot;@load(each.descricao )&quot;&#10;                                           value=&quot;@load(each.descricao)&quot;/&gt;&#10;                            &lt;/template&gt;&#10;                        &lt;/combobox&gt;&#10;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Forma de cálculo&quot;/&gt;&#10;                        &lt;combobox constraint=&quot;no empty&quot; width=&quot;&quot; onSelect=&quot;@command('showDetails')&quot;&#10;                                  value=&quot;@bind(vm.selecedFormaDeCalculo)&quot;&gt;&#10;                            &lt;comboitem label=&quot;pmt&quot;/&gt;&#10;                            &lt;comboitem label=&quot;taxafixa&quot;/&gt;&#10;&#10;                        &lt;/combobox&gt;&#10;                    &lt;/row&gt;&#10;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Taxa Anual (%)&quot;/&gt;&#10;                        &lt;decimalbox constraint=&quot;no negative&quot; onChange=&quot;@command('showDetails')&quot;&#10;                                    value=&quot;@bind(vm.selectedDefinicaoDeCredito.percentualDejuros)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Valor Creditado&quot;/&gt;&#10;                        &lt;decimalbox width=&quot;100%&quot; onChange=&quot;@command('showDetails')&quot;&#10;                                    constraint=&quot;no negative, no zero, no empty&quot; style=&quot;font-size:14pt&quot;&#10;                                    format=&quot;###,##0.00&quot; value=&quot;@bind(vm.credito.valorCreditado)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Número de Prestações&quot;/&gt;&#10;                        &lt;intbox style=&quot;font-size:14pt&quot; constraint=&quot;no negative, no zero, no empty&quot;&#10;                                onChange=&quot;@command('showDetails')&quot; value=&quot;@bind(vm.numeroDePrestacoes)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Data Previsto para desembolso&quot; onClick=&quot;@command('showDetails   ')&quot;/&gt;&#10;                        &lt;datebox format=&quot;dd/MM/yy&quot; value=&quot;@bind(vm.dataPrevista)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                &lt;/rows&gt;&#10;            &lt;/grid&gt;&#10;            &lt;grid width=&quot;240px&quot;&gt;&#10;                &lt;columns&gt;&#10;                    &lt;column width=&quot;150px&quot;/&gt;&#10;                    &lt;column/&gt;&#10;                &lt;/columns&gt;&#10;                &lt;rows&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Taxa Anual (Def.)(%)&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.juros)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Juros de Mora(%)&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.jurosDeMora)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Forma de calculo&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.selectedDefinicaoDeCredito.formaDeCalculo)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Nº max. de prestaões&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.selectedDefinicaoDeCredito.numeroDePrestacoes)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                    &lt;row&gt;&#10;                        &lt;label value=&quot;Rec. de moras&quot;/&gt;&#10;                        &lt;label value=&quot;@bind(vm.selectedDefinicaoDeCredito.recorenciaDeMoras)&quot;/&gt;&#10;                    &lt;/row&gt;&#10;                &lt;/rows&gt;&#10;            &lt;/grid&gt;&#10;        &lt;/hbox&gt;&#10;&#10;        &lt;grid model=&quot;@bind(vm.prestacoes)&quot;&gt;&#10;            &lt;columns&gt;&#10;                &lt;column width=&quot;55px&quot;&gt;&#10;                    &lt;label value=&quot;Parcelas&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column width=&quot;80px&quot;&gt;&#10;                    &lt;label value=&quot;DPDP&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column&gt;&#10;                    &lt;label value=&quot;Saldo Devedor&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column&gt;&#10;                    &lt;label value=&quot;Prestações&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column&gt;&#10;                    &lt;label value=&quot;Amortização&quot;/&gt;&#10;                &lt;/column&gt;&#10;                &lt;column&gt;&#10;                    &lt;label value=&quot;Juros&quot;/&gt;&#10;                &lt;/column&gt;&#10;            &lt;/columns&gt;&#10;            &lt;template name=&quot;model&quot;&gt;&#10;                &lt;row&gt;&#10;                    &lt;label value=&quot;@load(forEachStatus.index+1)&quot;/&gt;&#10;                    &lt;label value=&quot;@load(each.dataPrevistoDePagamento) @converter('formatedDate', format='dd/MM/yyyy') &quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.saldoDevedor) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.valorDaPrestacao) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.valorDeAmortizacao) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                    &lt;label value=&quot;@bind(each.valorDeJuros) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;&#10;                &lt;/row&gt;&#10;&#10;            &lt;/template&gt;&#10;            &lt;foot&gt;&#10;                &lt;footer&gt;&lt;/footer&gt;&#10;                &lt;footer&gt;Totais&lt;/footer&gt;&#10;                &lt;footer&gt;&#10;                    &lt;label value=&quot;@load(vm.totalPrestacoes)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                &lt;/footer&gt;&#10;                &lt;footer&gt;&#10;                    &lt;label value=&quot;@load(vm.totalamortizacao)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                &lt;/footer&gt;&#10;                &lt;footer&gt;&#10;                    &lt;label value=&quot;@load(vm.totaljuros)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#10;                &lt;/footer&gt;&#10;            &lt;/foot&gt;&#10;        &lt;/grid&gt;&#10;&#10;        &lt;button image=&quot;${z.resource(dir:'images', file:'print.png')}&quot; label=&quot;Imprimir&quot;&#10;                onClick=&quot;@command('print')&quot;/&gt;&#10;        &lt;button image=&quot;${z.resource(dir:'images', file:'cancelar.png')}&quot; label=&quot;Reset&quot;&#10;                onClick=&quot;@command('clean')&quot;/&gt;&#10;    &lt;/window&gt;&#10;&#10;&lt;/zk&gt;" />
              <option name="updatedContent" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&#13;&#10;&#13;&#10;&lt;zk xmlns=&quot;http://www.zkoss.org/2005/zul&quot;&#13;&#10;    xmlns:h=&quot;http://www.w3.org/1999/xhtml&quot;&#13;&#10;    xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot;&#13;&#10;    xsi:schemaLocation=&quot;http://www.zkoss.org/2005/zul http://www.zkoss.org/2005/zul/zul.xsd&quot;&gt;&#13;&#10;&#13;&#10;    &lt;window apply=&quot;grailsBindComposer&quot;&#13;&#10;            viewModel=&quot;@id('vm') @init('simuladorViewModel')&quot;&gt;&#13;&#10;        &lt;style&gt;&#13;&#10;            body { background-color: #eaeaea; }&#13;&#10;            .z-textbox{ border-style : none; background: #FFF}&#13;&#10;            .z-intbox{ border-style : none; background: #FFF}&#13;&#10;            .z-doublebox{ border-style : none; background: #FFF}&#13;&#10;            .z-listcell{ border-style : none; background: #FFF}&#13;&#10;&#13;&#10;        &lt;/style&gt;&#13;&#10;        &lt;label id=&quot;info&quot;/&gt;&#13;&#10;        &lt;hbox&gt;&#13;&#10;            &lt;grid width=&quot;450px&quot;&gt;&#13;&#10;                &lt;columns&gt;&#13;&#10;                    &lt;column width=&quot;&quot;/&gt;&#13;&#10;                    &lt;column width=&quot;&quot;/&gt;&#13;&#10;&#13;&#10;                &lt;/columns&gt;&#13;&#10;                &lt;rows&gt;&#13;&#10;                    &lt;row id=&quot;rw_def&quot;&gt;&#13;&#10;                        &lt;label value=&quot;Def. De crédito&quot;/&gt;&#13;&#10;                        &lt;combobox constraint=&quot;no empty&quot; id=&quot;cb_def&quot; onSelect=&quot;@command('showDetails')&quot;&#13;&#10;                                  selectedItem=&quot;@bind(vm.selectedDefinicaoDeCredito)&quot; model=&quot;@load(vm.definicoes)&quot;&#13;&#10;                                  hflex=&quot;1&quot;&#13;&#10;                                  mold=&quot;rounded&quot; autodrop=&quot;true&quot; autocomplete=&quot;true&quot;&gt;&#13;&#10;                            &lt;template name=&quot;model&quot;&gt;&#13;&#10;                                &lt;comboitem onClick=&quot;@command('')&quot; label=&quot;@load(each.descricao )&quot;&#13;&#10;                                           value=&quot;@load(each.descricao)&quot;/&gt;&#13;&#10;                            &lt;/template&gt;&#13;&#10;                        &lt;/combobox&gt;&#13;&#10;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Forma de cálculo&quot;/&gt;&#13;&#10;                        &lt;combobox constraint=&quot;no empty&quot; width=&quot;&quot; onSelect=&quot;@command('showDetails')&quot;&#13;&#10;                                  value=&quot;@bind(vm.selecedFormaDeCalculo)&quot;&gt;&#13;&#10;                            &lt;comboitem label=&quot;pmt&quot;/&gt;&#13;&#10;                            &lt;comboitem label=&quot;taxafixa&quot;/&gt;&#13;&#10;&#13;&#10;                        &lt;/combobox&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Taxa Anual (%)&quot;/&gt;&#13;&#10;                        &lt;decimalbox constraint=&quot;no negative&quot; onChange=&quot;@command('showDetails')&quot;&#13;&#10;                                    value=&quot;@bind(vm.selectedDefinicaoDeCredito.percentualDejuros)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Valor Creditado&quot;/&gt;&#13;&#10;                        &lt;decimalbox width=&quot;100%&quot; onChange=&quot;@command('showDetails')&quot;&#13;&#10;                                    constraint=&quot;no negative, no zero, no empty&quot; style=&quot;font-size:14pt&quot;&#13;&#10;                                    format=&quot;###,##0.00&quot; value=&quot;@bind(vm.credito.valorCreditado)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Número de Prestações&quot;/&gt;&#13;&#10;                        &lt;intbox style=&quot;font-size:14pt&quot; constraint=&quot;no negative, no zero, no empty&quot;&#13;&#10;                                onChange=&quot;@command('showDetails')&quot; value=&quot;@bind(vm.numeroDePrestacoes)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Data Previsto para desembolso&quot; onClick=&quot;@command('showDetails   ')&quot;/&gt;&#13;&#10;                        &lt;datebox format=&quot;dd/MM/yy&quot; value=&quot;@bind(vm.dataPrevista)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                &lt;/rows&gt;&#13;&#10;            &lt;/grid&gt;&#13;&#10;            &lt;grid width=&quot;240px&quot;&gt;&#13;&#10;                &lt;columns&gt;&#13;&#10;                    &lt;column width=&quot;150px&quot;/&gt;&#13;&#10;                    &lt;column/&gt;&#13;&#10;                &lt;/columns&gt;&#13;&#10;                &lt;rows&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Taxa Anual (Def.)(%)&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.juros)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Juros de Mora(%)&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.jurosDeMora)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Forma de calculo&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.selectedDefinicaoDeCredito.formaDeCalculo)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Nº max. de prestaões&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.selectedDefinicaoDeCredito.numeroDePrestacoes)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                    &lt;row&gt;&#13;&#10;                        &lt;label value=&quot;Rec. de moras&quot;/&gt;&#13;&#10;                        &lt;label value=&quot;@bind(vm.selectedDefinicaoDeCredito.recorenciaDeMoras)&quot;/&gt;&#13;&#10;                    &lt;/row&gt;&#13;&#10;                &lt;/rows&gt;&#13;&#10;            &lt;/grid&gt;&#13;&#10;        &lt;/hbox&gt;&#13;&#10;&#13;&#10;        &lt;grid model=&quot;@bind(vm.prestacoes)&quot;&gt;&#13;&#10;            &lt;columns&gt;&#13;&#10;                &lt;column width=&quot;55px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Parcela&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column width=&quot;80px&quot;&gt;&#13;&#10;                    &lt;label value=&quot;Data&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column&gt;&#13;&#10;                    &lt;label value=&quot;Saldo Devedor&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column&gt;&#13;&#10;                    &lt;label value=&quot;Valor da Prestação&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column&gt;&#13;&#10;                    &lt;label value=&quot;Amortização&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;                &lt;column&gt;&#13;&#10;                    &lt;label value=&quot;Juros&quot;/&gt;&#13;&#10;                &lt;/column&gt;&#13;&#10;            &lt;/columns&gt;&#13;&#10;            &lt;template name=&quot;model&quot;&gt;&#13;&#10;                &lt;row&gt;&#13;&#10;                    &lt;label value=&quot;@load(forEachStatus.index+1)&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@load(each.dataPrevistoDePagamento) @converter('formatedDate', format='dd/MM/yyyy') &quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.saldoDevedor) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.valorDaPrestacao * -1) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.valorDeAmortizacao * -1) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;                    &lt;label value=&quot;@bind(each.valorDeJuros) @converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;&#13;&#10;                &lt;/row&gt;&#13;&#10;&#13;&#10;            &lt;/template&gt;&#13;&#10;            &lt;foot&gt;&#13;&#10;                &lt;footer&gt;&lt;/footer&gt;&#13;&#10;                &lt;footer&gt;Totais&lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&#13;&#10;                    &lt;label value=&quot;@load(vm.totalPrestacoes * -1)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;                &lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&#13;&#10;                    &lt;label value=&quot;@load(vm.totalamortizacao * -1)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;                &lt;/footer&gt;&#13;&#10;                &lt;footer&gt;&#13;&#10;                    &lt;label value=&quot;@load(vm.totaljuros)@converter('formatedNumber', format='###,##0.00')&quot;/&gt;&#13;&#10;                &lt;/footer&gt;&#13;&#10;            &lt;/foot&gt;&#13;&#10;        &lt;/grid&gt;&#13;&#10;&#13;&#10;        &lt;button image=&quot;${z.resource(dir:'images', file:'print.png')}&quot; label=&quot;Imprimir&quot;&#13;&#10;                onClick=&quot;@command('print')&quot;/&gt;&#13;&#10;        &lt;button image=&quot;${z.resource(dir:'images', file:'cancelar.png')}&quot; label=&quot;Reset&quot;&#13;&#10;                onClick=&quot;@command('clean')&quot;/&gt;&#13;&#10;    &lt;/window&gt;&#13;&#10;&#13;&#10;&lt;/zk&gt;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/startMaleyanga.bat">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/startMaleyanga.bat" />
              <option name="originalContent" value="@echo off&#10;title maleyanga&#10;&#10;REM --- Configuration ---&#10;set &quot;JAVA_HOME=C:\Program Files\Java\jdk1.7.0_80&quot;&#10;set &quot;GRAILS_HOME=W:\App\grails-2.3.11\grails-2.3.11&quot;&#10;set &quot;PATH=%GRAILS_HOME%\bin;%JAVA_HOME%\bin;%PATH%&quot;&#10;&#10;echo ===================================&#10;echo    INICIANDO APLICACAO MALEYANGA&#10;echo ===================================&#10;echo.&#10;echo JAVA_HOME: %JAVA_HOME%&#10;echo GRAILS_HOME: %GRAILS_HOME%&#10;echo.&#10;&#10;REM Navigate to the project directory&#10;cd /d &quot;W:\mz.maleyanga&quot;&#10;&#10;REM Clean the project first to ensure it's built with the correct Java version&#10;echo Limpando o projeto...&#10;call &quot;%GRAILS_HOME%\bin\grails.bat&quot; clean --stacktrace&#10;&#10;echo.&#10;&#10;REM Run the application in production mode&#10;echo Iniciando a aplicacao...&#10;call &quot;%GRAILS_HOME%\bin\grails.bat&quot; prod runApp&#10;" />
              <option name="updatedContent" value="@echo off&#13;&#10;title maleyanga&#13;&#10;&#13;&#10;REM --- Configuration ---&#13;&#10;set &quot;JAVA_HOME=C:\Program Files\Java\jdk1.7.0_80&quot;&#13;&#10;set &quot;GRAILS_HOME=W:\App\grails-2.3.11\grails-2.3.11&quot;&#13;&#10;set &quot;PATH=%GRAILS_HOME%\bin;%JAVA_HOME%\bin;%PATH%&quot;&#13;&#10;&#13;&#10;echo ===================================&#13;&#10;echo    INICIANDO APLICACAO MALEYANGA&#13;&#10;echo ===================================&#13;&#10;echo.&#13;&#10;echo JAVA_HOME: %JAVA_HOME%&#13;&#10;echo GRAILS_HOME: %GRAILS_HOME%&#13;&#10;echo.&#13;&#10;&#13;&#10;REM Navigate to the project directory&#13;&#10;cd /d &quot;W:\mz.maleyanga&quot;&#13;&#10;&#13;&#10;REM Clean the project first to ensure it's built with the correct Java version&#13;&#10;echo Limpando o projeto...&#13;&#10;call &quot;%GRAILS_HOME%\bin\grails.bat&quot; clean --stacktrace&#13;&#10;&#13;&#10;echo.&#13;&#10;&#13;&#10;REM Run the application in development mode&#13;&#10;echo Iniciando a aplicacao...&#13;&#10;call &quot;%GRAILS_HOME%\bin\grails.bat&quot; run-app" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>